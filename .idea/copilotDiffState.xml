<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StartActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StatusActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RecordsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RecordSummaryActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:name=&quot;.AlcoholicTimerApplication&quot;&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:label=&quot;@string/app_name&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StartActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StatusActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.RecordsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.RecordSummaryActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.SettingsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:label=&quot;설정&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot; /&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/AlcoholicTimerApplication.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/AlcoholicTimerApplication.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.app.Application&#10;import com.example.alcoholictimer.utils.Constants&#10;&#10;class AlcoholicTimerApplication : Application() {&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;        &#10;        // 앱 설정 초기화&#10;        Constants.init(applicationContext)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.google.android.material.navigation.NavigationView&#10;import java.util.Date&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity() {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 최신 상태로 업데이트&#10;            updateNavigationDrawer()&#10;            drawerLayout.open()&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener { menuItem -&gt;&#10;            when (menuItem.itemId) {&#10;                R.id.nav_start -&gt; {&#10;                    if (this !is StartActivity) {&#10;                        startActivity(Intent(this, StartActivity::class.java))&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_records -&gt; {&#10;                    // 활동 보기 화면으로 이동&#10;                    Toast.makeText(this, &quot;활동 보기로 이동합니다&quot;, Toast.LENGTH_SHORT).show()&#10;                    if (this !is RecordsActivity) {&#10;                        val intent = Intent(this, RecordsActivity::class.java)&#10;                        startActivity(intent)&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_challenge -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_messages -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_settings -&gt; {&#10;                    Toast.makeText(this, &quot;설정 기능은 준비 중입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;            drawerLayout.close()&#10;            true&#10;        }&#10;&#10;        // 각 액티비티의 레이아웃을 contentFrame에 추가&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태와 헤더 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationDrawer() {&#10;        // 네비게이션 메뉴 상태 업데이트&#10;        updateNavigationMenuState()&#10;&#10;        // 네비게이션 헤더 정보 업데이트&#10;        updateNavigationHeader()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 이미 금주를 시작했다면 금주 시작 메뉴를 비활성화합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주가 이미 시작되었으면 시작 메뉴 비활성화&#10;        val startMenuItem = navigationView.menu.findItem(R.id.nav_start)&#10;        startMenuItem.isEnabled = !hasStarted&#10;&#10;        // 활동 보기 메뉴는 항상 활성화&#10;        val recordsMenuItem = navigationView.menu.findItem(R.id.nav_records)&#10;        recordsMenuItem.isEnabled = true&#10;    }&#10;&#10;    /**&#10;     * 네비게이션 헤더의 사용자 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationHeader() {&#10;        val headerView = navigationView.getHeaderView(0)&#10;        if (headerView != null) {&#10;            val tvUserNickname = headerView.findViewById&lt;TextView&gt;(R.id.tvUserNickname)&#10;            val tvUserLevelDays = headerView.findViewById&lt;TextView&gt;(R.id.tvUserLevelDays)&#10;&#10;            // 사용자 이름은 기본값으로 &quot;알중이&quot; 사용&#10;            tvUserNickname.text = &quot;알중이&quot;&#10;&#10;            // 금주 상태에 따른 레벨 및 일수 정보 업데이트&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            if (sharedPref.contains(&quot;start_time&quot;)) {&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, Date().time)&#10;                val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;                // 레벨 계산 (시간 단위에 따라 적절한 마일스톤 사용)&#10;                val adjustedMilestones = when {&#10;                    Constants.SECOND_TEST_MODE -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                    Constants.TEST_MODE -&gt; listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;                    else -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                }&#10;&#10;                var currentLevel = 1&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i + 1&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                tvUserLevelDays.text = &quot;Level $currentLevel · ${timePassed}${Constants.TIME_UNIT_TEXT} 금주 중&quot;&#10;            } else {&#10;                tvUserLevelDays.text = &quot;금주를 시작해보세요!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#13;&#10;&#13;&#10;import android.content.Intent&#13;&#10;import android.os.Bundle&#13;&#10;import android.view.View&#13;&#10;import android.widget.ImageButton&#13;&#10;import android.widget.TextView&#13;&#10;import android.widget.Toast&#13;&#10;import androidx.appcompat.app.AppCompatActivity&#13;&#10;import androidx.core.view.WindowCompat&#13;&#10;import androidx.drawerlayout.widget.DrawerLayout&#13;&#10;import com.example.alcoholictimer.utils.Constants&#13;&#10;import com.google.android.material.navigation.NavigationView&#13;&#10;import java.util.Date&#13;&#10;&#13;&#10;/**&#13;&#10; * 모든 액티비티의 베이스 클래스&#13;&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#13;&#10; */&#13;&#10;abstract class BaseActivity : AppCompatActivity() {&#13;&#10;&#13;&#10;    protected lateinit var drawerLayout: DrawerLayout&#13;&#10;    protected lateinit var navigationView: NavigationView&#13;&#10;&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;&#13;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#13;&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#13;&#10;&#13;&#10;        setContentView(R.layout.layout_base)&#13;&#10;&#13;&#10;        // 공통 UI 요소 초기화&#13;&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#13;&#10;        navigationView = findViewById(R.id.navigationView)&#13;&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#13;&#10;&#13;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#13;&#10;        btnMenu.setOnClickListener {&#13;&#10;            // 드로어를 열기 전에 최신 상태로 업데이트&#13;&#10;            updateNavigationDrawer()&#13;&#10;            drawerLayout.open()&#13;&#10;        }&#13;&#10;&#13;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#13;&#10;        navigationView.setNavigationItemSelectedListener { menuItem -&gt;&#13;&#10;            when (menuItem.itemId) {&#13;&#10;                R.id.nav_start -&gt; {&#13;&#10;                    if (this !is StartActivity) {&#13;&#10;                        startActivity(Intent(this, StartActivity::class.java))&#13;&#10;                        if (this !is MainActivity) {&#13;&#10;                            finish()&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;                R.id.nav_records -&gt; {&#13;&#10;                    // 활동 보기 화면으로 이동&#13;&#10;                    Toast.makeText(this, &quot;활동 보기로 이동합니다&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;                    if (this !is RecordsActivity) {&#13;&#10;                        val intent = Intent(this, RecordsActivity::class.java)&#13;&#10;                        startActivity(intent)&#13;&#10;                        if (this !is MainActivity) {&#13;&#10;                            finish()&#13;&#10;                        }&#13;&#10;                    }&#13;&#10;                }&#13;&#10;                R.id.nav_challenge -&gt; {&#13;&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;                }&#13;&#10;                R.id.nav_messages -&gt; {&#13;&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;                }&#13;&#10;                R.id.nav_notifications -&gt; {&#13;&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;                }&#13;&#10;                R.id.nav_settings -&gt; {&#13;&#10;                    // 설정 화면으로 이동&#13;&#10;                    val intent = Intent(this, SettingsActivity::class.java)&#13;&#10;                    startActivity(intent)&#13;&#10;                    // 설정 화면에서는 현재 화면을 유지&#13;&#10;                }&#13;&#10;            }&#13;&#10;            // 메뉴 선택 후 드로어 닫기&#13;&#10;            drawerLayout.close()&#13;&#10;            true&#13;&#10;        }&#13;&#10;&#13;&#10;        // 특정 화면에 필요한 컨텐츠 뷰 설정&#13;&#10;        setupContentView()&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태와 헤더 정보를 업데이트합니다.&#13;&#10;     */&#13;&#10;    private fun updateNavigationDrawer() {&#13;&#10;        // 네비게이션 메뉴 상태 업데이트&#13;&#10;        updateNavigationMenuState()&#13;&#10;&#13;&#10;        // 네비게이션 헤더 정보 업데이트&#13;&#10;        updateNavigationHeader()&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#13;&#10;     * 이미 금주를 시작했다면 금주 시작 메뉴를 비활성화합니다.&#13;&#10;     */&#13;&#10;    private fun updateNavigationMenuState() {&#13;&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#13;&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#13;&#10;&#13;&#10;        // 금주가 이미 시작되었으면 시작 메뉴 비활성화&#13;&#10;        val startMenuItem = navigationView.menu.findItem(R.id.nav_start)&#13;&#10;        startMenuItem.isEnabled = !hasStarted&#13;&#10;&#13;&#10;        // 활동 보기 메뉴는 항상 활성화&#13;&#10;        val recordsMenuItem = navigationView.menu.findItem(R.id.nav_records)&#13;&#10;        recordsMenuItem.isEnabled = true&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 네비게이션 헤더의 사용자 정보를 업데이트합니다.&#13;&#10;     */&#13;&#10;    private fun updateNavigationHeader() {&#13;&#10;        val headerView = navigationView.getHeaderView(0)&#13;&#10;        if (headerView != null) {&#13;&#10;            val tvUserNickname = headerView.findViewById&lt;TextView&gt;(R.id.tvUserNickname)&#13;&#10;            val tvUserLevelDays = headerView.findViewById&lt;TextView&gt;(R.id.tvUserLevelDays)&#13;&#10;&#13;&#10;            // 사용자 이름은 기본값으로 &quot;알중이&quot; 사용&#13;&#10;            tvUserNickname.text = &quot;알중이&quot;&#13;&#10;&#13;&#10;            // 금주 상태에 따른 레벨 및 일수 정보 업데이트&#13;&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#13;&#10;            if (sharedPref.contains(&quot;start_time&quot;)) {&#13;&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, Date().time)&#13;&#10;                val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#13;&#10;&#13;&#10;                // 레벨 계산 (시간 단위에 따라 적절한 마일스톤 사용)&#13;&#10;                val adjustedMilestones = when {&#13;&#10;                    Constants.SECOND_TEST_MODE -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#13;&#10;                    Constants.TEST_MODE -&gt; listOf(0, 1, 2, 5, 10, 15, 20, 30)&#13;&#10;                    else -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#13;&#10;                }&#13;&#10;&#13;&#10;                var currentLevel = 1&#13;&#10;                for (i in adjustedMilestones.indices) {&#13;&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#13;&#10;                        currentLevel = i + 1&#13;&#10;                    } else {&#13;&#10;                        break&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                tvUserLevelDays.text = &quot;Level $currentLevel · ${timePassed}${Constants.TIME_UNIT_TEXT} 금주 중&quot;&#13;&#10;            } else {&#13;&#10;                tvUserLevelDays.text = &quot;금주를 시작해보세요!&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 각 액티비티에서 구현할 추상 메소드&#13;&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#13;&#10;     */&#13;&#10;    protected abstract fun setupContentView()&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SettingsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SettingsActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.RadioButton&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;&#10;class SettingsActivity : AppCompatActivity() {&#10;&#10;    private lateinit var rbRealMode: RadioButton&#10;    private lateinit var rbMinuteMode: RadioButton&#10;    private lateinit var rbSecondMode: RadioButton&#10;    private lateinit var btnSaveSettings: Button&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_settings)&#10;&#10;        // UI 요소 초기화&#10;        rbRealMode = findViewById(R.id.rbRealMode)&#10;        rbMinuteMode = findViewById(R.id.rbMinuteMode)&#10;        rbSecondMode = findViewById(R.id.rbSecondMode)&#10;        btnSaveSettings = findViewById(R.id.btnSaveSettings)&#10;&#10;        // 현재 설정 불러오기 및 UI에 반영&#10;        loadCurrentSettings()&#10;&#10;        // 저장 버튼 클릭 이벤트&#10;        btnSaveSettings.setOnClickListener {&#10;            saveSettings()&#10;            Toast.makeText(this, &quot;설정이 저장되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;            finish()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 현재 설정을 불러와 UI에 반영합니다.&#10;     */&#10;    private fun loadCurrentSettings() {&#10;        val preferences = getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;        val testMode = preferences.getInt(Constants.PREF_KEY_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        // 라디오 버튼 선택 상태 설정&#10;        when (testMode) {&#10;            Constants.TEST_MODE_REAL -&gt; rbRealMode.isChecked = true&#10;            Constants.TEST_MODE_MINUTE -&gt; rbMinuteMode.isChecked = true&#10;            Constants.TEST_MODE_SECOND -&gt; rbSecondMode.isChecked = true&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 사용자 설정을 저장합니다.&#10;     */&#10;    private fun saveSettings() {&#10;        val preferences = getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;        val editor = preferences.edit()&#10;&#10;        // 선택된 테스트 모드 저장&#10;        val testMode = when {&#10;            rbRealMode.isChecked -&gt; Constants.TEST_MODE_REAL&#10;            rbMinuteMode.isChecked -&gt; Constants.TEST_MODE_MINUTE&#10;            rbSecondMode.isChecked -&gt; Constants.TEST_MODE_SECOND&#10;            else -&gt; Constants.TEST_MODE_REAL // 기본값&#10;        }&#10;&#10;        editor.putInt(Constants.PREF_KEY_TEST_MODE, testMode)&#10;        editor.apply()&#10;&#10;        // Constants 클래스의 동적 설정 업데이트&#10;        Constants.updateTestMode(testMode)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.widget.Button&#10;import android.widget.RadioButton&#10;import android.widget.RadioGroup&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;&#10;class SettingsActivity : AppCompatActivity() {&#10;&#10;    private lateinit var radioGroupTestMode: RadioGroup&#10;    private lateinit var rbRealMode: RadioButton&#10;    private lateinit var rbMinuteMode: RadioButton&#10;    private lateinit var rbSecondMode: RadioButton&#10;    private lateinit var btnSaveSettings: Button&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_settings)&#10;&#10;        // UI 요소 초기화&#10;        radioGroupTestMode = findViewById(R.id.radioGroupTestMode)&#10;        rbRealMode = findViewById(R.id.rbRealMode)&#10;        rbMinuteMode = findViewById(R.id.rbMinuteMode)&#10;        rbSecondMode = findViewById(R.id.rbSecondMode)&#10;        btnSaveSettings = findViewById(R.id.btnSaveSettings)&#10;&#10;        // 현재 설정 불러오기 및 UI에 반영&#10;        loadCurrentSettings()&#10;&#10;        // 저장 버튼 클릭 이벤트&#10;        btnSaveSettings.setOnClickListener {&#10;            saveSettings()&#10;            Toast.makeText(this, &quot;설정이 저장되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;            finish()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 현재 설정을 불러와 UI에 반영합니다.&#10;     */&#10;    private fun loadCurrentSettings() {&#10;        val preferences = getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;        val testMode = preferences.getInt(Constants.PREF_KEY_TEST_MODE, Constants.TEST_MODE_SECOND)&#10;&#10;        // 라디오 버튼 선택 상태 설정&#10;        when (testMode) {&#10;            Constants.TEST_MODE_REAL -&gt; rbRealMode.isChecked = true&#10;            Constants.TEST_MODE_MINUTE -&gt; rbMinuteMode.isChecked = true&#10;            Constants.TEST_MODE_SECOND -&gt; rbSecondMode.isChecked = true&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 사용자 설정을 저장합니다.&#10;     */&#10;    private fun saveSettings() {&#10;        val preferences = getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;        val editor = preferences.edit()&#10;&#10;        // 선택된 테스트 모드 저장&#10;        val testMode = when (radioGroupTestMode.checkedRadioButtonId) {&#10;            R.id.rbRealMode -&gt; Constants.TEST_MODE_REAL&#10;            R.id.rbMinuteMode -&gt; Constants.TEST_MODE_MINUTE&#10;            R.id.rbSecondMode -&gt; Constants.TEST_MODE_SECOND&#10;            else -&gt; Constants.TEST_MODE_SECOND // 기본값&#10;        }&#10;&#10;        editor.putInt(Constants.PREF_KEY_TEST_MODE, testMode)&#10;        editor.apply()&#10;&#10;        // Constants 클래스의 동적 설정 업데이트&#10;        Constants.updateTestMode(testMode)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer.utils&#10;&#10;object Constants {&#10;    // 테스트 모드 설정 (true: 초 단위, false: 일 단위)&#10;    const val TEST_MODE = true&#10;&#10;    // 초 단위 테스트 모드 (1초 = 1일 개념)&#10;    const val SECOND_TEST_MODE = true&#10;&#10;    // 프로그레스바 초 단위 테스트 모드&#10;    const val PROGRESS_TEST_MODE = true&#10;&#10;    // 시간 변환 상수&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#10;&#10;    // 사용할 시간 단위&#10;    val TIME_UNIT_MILLIS = when {&#10;        SECOND_TEST_MODE -&gt; SECOND_IN_MILLIS  // 초 단위 테스트 (1초 = 1일)&#10;        TEST_MODE -&gt; MINUTE_IN_MILLIS         // 분 단위 테스트 (1분 = 1일)&#10;        else -&gt; DAY_IN_MILLIS                 // 실제 일 단위 (1일 = 24시간)&#10;    }&#10;&#10;    // 프로그레스바용 시간 단위&#10;    val PROGRESS_TIME_UNIT_MILLIS = if (PROGRESS_TEST_MODE) SECOND_IN_MILLIS else TIME_UNIT_MILLIS&#10;&#10;    // 단위 텍스트&#10;    val TIME_UNIT_TEXT = when {&#10;        SECOND_TEST_MODE -&gt; &quot;초&quot;  // 초 단위 테스트 시 표시 텍스트&#10;        TEST_MODE -&gt; &quot;분&quot;        // 분 단위 테스트 시 표시 텍스트&#10;        else -&gt; &quot;일&quot;            // 실제 운영 시 표시 텍스트&#10;    }&#10;&#10;    val PROGRESS_TIME_UNIT_TEXT = if (PROGRESS_TEST_MODE) &quot;초&quot; else TIME_UNIT_TEXT&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#13;&#10;&#13;&#10;import android.content.Context&#13;&#10;import android.content.SharedPreferences&#13;&#10;import com.example.alcoholictimer.AlcoholicTimerApplication&#13;&#10;&#13;&#10;object Constants {&#13;&#10;    // SharedPreferences 관련 상수&#13;&#10;    const val PREFS_NAME = &quot;AlcoholicTimerPrefs&quot;&#13;&#10;    const val PREF_KEY_TEST_MODE = &quot;test_mode&quot;&#13;&#10;&#13;&#10;    // 테스트 모드 상수&#13;&#10;    const val TEST_MODE_REAL = 0    // 실제 모드 (1일 = 24시간)&#13;&#10;    const val TEST_MODE_MINUTE = 1  // 분 단위 테스트 모드 (1일 = 1분)&#13;&#10;    const val TEST_MODE_SECOND = 2  // 초 단위 테스트 모드 (1일 = 1초)&#13;&#10;&#13;&#10;    // 현재 선택된 테스트 모드 (기본값: 초 단위 테스트)&#13;&#10;    private var currentTestMode = TEST_MODE_SECOND&#13;&#10;&#13;&#10;    // 테스트 모드 상태 (런타임에 변경 가능)&#13;&#10;    val isTestMode: Boolean&#13;&#10;        get() = currentTestMode != TEST_MODE_REAL&#13;&#10;&#13;&#10;    val isSecondTestMode: Boolean&#13;&#10;        get() = currentTestMode == TEST_MODE_SECOND&#13;&#10;&#13;&#10;    val isMinuteTestMode: Boolean&#13;&#10;        get() = currentTestMode == TEST_MODE_MINUTE&#13;&#10;&#13;&#10;    // 시간 변환 상수&#13;&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#13;&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#13;&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#13;&#10;&#13;&#10;    // 사용할 시간 단위 (테스트 모드에 따라 동적으로 결정)&#13;&#10;    val TIME_UNIT_MILLIS: Long&#13;&#10;        get() = when (currentTestMode) {&#13;&#10;            TEST_MODE_SECOND -&gt; SECOND_IN_MILLIS  // 초 단위 테스트 (1초 = 1일)&#13;&#10;            TEST_MODE_MINUTE -&gt; MINUTE_IN_MILLIS  // 분 단위 테스트 (1분 = 1일)&#13;&#10;            else -&gt; DAY_IN_MILLIS                 // 실제 일 단위 (1일 = 24시간)&#13;&#10;        }&#13;&#10;&#13;&#10;    // 프로그레스바용 시간 단위 (테스트 모드와 동일하게 설정)&#13;&#10;    val PROGRESS_TIME_UNIT_MILLIS: Long&#13;&#10;        get() = TIME_UNIT_MILLIS&#13;&#10;&#13;&#10;    // 단위 텍스트&#13;&#10;    val TIME_UNIT_TEXT: String&#13;&#10;        get() = when (currentTestMode) {&#13;&#10;            TEST_MODE_SECOND -&gt; &quot;초&quot;  // 초 단위 테스트 시 표시 텍스트&#13;&#10;            TEST_MODE_MINUTE -&gt; &quot;분&quot;  // 분 단위 테스트 시 표시 텍스트&#13;&#10;            else -&gt; &quot;일&quot;              // 실제 모드 시 표시 텍스트&#13;&#10;        }&#13;&#10;&#13;&#10;    // 앱 시작 시 설정 불러오기&#13;&#10;    fun init(context: Context) {&#13;&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#13;&#10;        currentTestMode = prefs.getInt(PREF_KEY_TEST_MODE, TEST_MODE_SECOND)&#13;&#10;    }&#13;&#10;&#13;&#10;    // 테스트 모드 업데이트&#13;&#10;    fun updateTestMode(mode: Int) {&#13;&#10;        currentTestMode = mode&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_settings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_settings.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&#10;    android:tint=&quot;?attr/colorControlNormal&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;@android:color/white&quot;&#10;        android:pathData=&quot;M19.14,12.94c0.04,-0.3 0.06,-0.61 0.06,-0.94c0,-0.32 -0.02,-0.64 -0.07,-0.94l2.03,-1.58c0.18,-0.14 0.23,-0.41 0.12,-0.61l-1.92,-3.32c-0.12,-0.22 -0.37,-0.29 -0.59,-0.22l-2.39,0.96c-0.5,-0.38 -1.03,-0.7 -1.62,-0.94L14.4,2.81c-0.04,-0.24 -0.24,-0.41 -0.48,-0.41h-3.84c-0.24,0 -0.43,0.17 -0.47,0.41L9.25,5.35C8.66,5.59 8.12,5.92 7.63,6.29L5.24,5.33c-0.22,-0.08 -0.47,0 -0.59,0.22L2.74,8.87C2.62,9.08 2.66,9.34 2.86,9.48l2.03,1.58C4.84,11.36 4.8,11.69 4.8,12s0.02,0.64 0.07,0.94l-2.03,1.58c-0.18,0.14 -0.23,0.41 -0.12,0.61l1.92,3.32c0.12,0.22 0.37,0.29 0.59,0.22l2.39,-0.96c0.5,0.38 1.03,0.7 1.62,0.94l0.36,2.54c0.05,0.24 0.24,0.41 0.48,0.41h3.84c0.24,0 0.44,-0.17 0.47,-0.41l0.36,-2.54c0.59,-0.24 1.13,-0.56 1.62,-0.94l2.39,0.96c0.22,0.08 0.47,0 0.59,-0.22l1.92,-3.32c0.12,-0.22 0.07,-0.47 -0.12,-0.61L19.14,12.94zM12,15.6c-1.98,0 -3.6,-1.62 -3.6,-3.6s1.62,-3.6 3.6,-3.6s3.6,1.62 3.6,3.6S13.98,15.6 12,15.6z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_settings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_settings.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:paddingTop=&quot;32dp&quot;&#10;    android:background=&quot;@color/background_color&quot;&gt;&#10;&#10;    &lt;!-- 상단 타이틀 --&gt;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;설정&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        android:textColor=&quot;@color/text_color_primary&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;24dp&quot;/&gt;&#10;&#10;    &lt;!-- 설정 컨테이너 --&gt;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- 테스트 모드 섹션 --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;테스트 모드 설정&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textColor=&quot;@color/text_color_primary&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;            &lt;!-- 실제 모드 옵션 --&gt;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rbRealMode&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;실제 모드 (1일 = 24시간)&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:paddingStart=&quot;8dp&quot;&#10;                android:paddingEnd=&quot;16dp&quot;&#10;                android:layout_marginBottom=&quot;12dp&quot;/&gt;&#10;&#10;            &lt;!-- 분 단위 테스트 모드 옵션 --&gt;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rbMinuteMode&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;분 단위 테스트 모드 (1일 = 1분)&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:paddingStart=&quot;8dp&quot;&#10;                android:paddingEnd=&quot;16dp&quot;&#10;                android:layout_marginBottom=&quot;12dp&quot;/&gt;&#10;&#10;            &lt;!-- 초 단위 테스트 모드 옵션 --&gt;&#10;            &lt;RadioButton&#10;                android:id=&quot;@+id/rbSecondMode&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;초 단위 테스트 모드 (1일 = 1초)&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:paddingStart=&quot;8dp&quot;&#10;                android:paddingEnd=&quot;16dp&quot;&#10;                android:layout_marginBottom=&quot;12dp&quot;/&gt;&#10;&#10;            &lt;!-- 테스트 모드 설명 --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;※ 테스트 모드는 앱의 동작을 빠르게 확인하기 위한 기능입니다. 실제 사용 시에는 '실제 모드'로 설정하세요.&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;@color/text_color_secondary&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:layout_marginBottom=&quot;24dp&quot;/&gt;&#10;&#10;            &lt;!-- 구분선 --&gt;&#10;            &lt;View&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;1dp&quot;&#10;                android:background=&quot;#DDDDDD&quot;&#10;                android:layout_marginBottom=&quot;24dp&quot;/&gt;&#10;&#10;            &lt;!-- 앱 정보 섹션 --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;앱 정보&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textColor=&quot;@color/text_color_primary&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;버전: 1.0.0&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/ScrollView&gt;&#10;&#10;    &lt;!-- 하단 저장 버튼 --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnSaveSettings&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;설정 저장&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:layout_margin=&quot;16dp&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:paddingTop=&quot;32dp&quot;&#10;    android:background=&quot;@color/background_color&quot;&gt;&#10;&#10;    &lt;!-- 상단 타이틀 --&gt;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;설정&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        android:textColor=&quot;@color/text_color_primary&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;24dp&quot;/&gt;&#10;&#10;    &lt;!-- 설정 컨테이너 --&gt;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- 테스트 모드 섹션 --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;테스트 모드 설정&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textColor=&quot;@color/text_color_primary&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;            &lt;!-- 테스트 모드 라디오 그룹 --&gt;&#10;            &lt;RadioGroup&#10;                android:id=&quot;@+id/radioGroupTestMode&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&gt;&#10;&#10;                &lt;!-- 실제 모드 옵션 --&gt;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbRealMode&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;실제 모드 (1일 = 24시간)&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:paddingStart=&quot;8dp&quot;&#10;                    android:paddingEnd=&quot;16dp&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;/&gt;&#10;&#10;                &lt;!-- 분 단위 테스트 모드 옵션 --&gt;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbMinuteMode&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;분 단위 테스트 모드 (1일 = 1분)&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:paddingStart=&quot;8dp&quot;&#10;                    android:paddingEnd=&quot;16dp&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;/&gt;&#10;&#10;                &lt;!-- 초 단위 테스트 모드 옵션 --&gt;&#10;                &lt;RadioButton&#10;                    android:id=&quot;@+id/rbSecondMode&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;초 단위 테스트 모드 (1일 = 1초)&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:paddingStart=&quot;8dp&quot;&#10;                    android:paddingEnd=&quot;16dp&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot;/&gt;&#10;            &lt;/RadioGroup&gt;&#10;&#10;            &lt;!-- 테스트 모드 설명 --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;※ 테스트 모드는 앱의 동작을 빠르게 확인하기 위한 기능입니다. 실제 사용 시에는 '실제 모드'로 설정하세요.&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;@color/text_color_secondary&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;&#10;                android:layout_marginBottom=&quot;24dp&quot;/&gt;&#10;&#10;            &lt;!-- 구분선 --&gt;&#10;            &lt;View&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;1dp&quot;&#10;                android:background=&quot;#DDDDDD&quot;&#10;                android:layout_marginBottom=&quot;24dp&quot;/&gt;&#10;&#10;            &lt;!-- 앱 정보 섹션 --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;앱 정보&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textColor=&quot;@color/text_color_primary&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;버전: 1.0.0&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/ScrollView&gt;&#10;&#10;    &lt;!-- 하단 저장 버튼 --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnSaveSettings&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;설정 저장&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:padding=&quot;12dp&quot;&#10;        android:layout_margin=&quot;16dp&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>