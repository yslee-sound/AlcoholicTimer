<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.MenuItem&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.GravityCompat&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.SharedPreferencesManager&#10;import com.google.android.material.navigation.NavigationView&#10;import java.util.Date&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 최신 상태로 업데이트&#10;            updateNavigationDrawer()&#10;            drawerLayout.openDrawer(GravityCompat.START)&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener(this)&#10;&#10;        // 특정 화면에 필요한 컨텐츠 뷰 설정&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태와 헤더 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationDrawer() {&#10;        // 네비게이션 메뉴 상태 업데이트&#10;        updateNavigationMenuState()&#10;&#10;        // 네비게이션 헤더 정보 업데이트&#10;        updateNavigationHeader()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트를 '금주 상태'로 변경합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트 변경&#10;        val soberMenuItem = navigationView.menu.findItem(R.id.nav_sobriety)&#10;        soberMenuItem.isEnabled = true&#10;        if (hasStarted) {&#10;            soberMenuItem.title = &quot;금주 상태&quot;&#10;        } else {&#10;            soberMenuItem.title = &quot;금주&quot;&#10;        }&#10;&#10;        // 활동 보기 메뉴는 항상 활성화&#10;        val recordsMenuItem = navigationView.menu.findItem(R.id.nav_records)&#10;        recordsMenuItem.isEnabled = true&#10;    }&#10;&#10;    /**&#10;     * 네비게이션 헤더의 사용자 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationHeader() {&#10;        val headerView = navigationView.getHeaderView(0)&#10;        if (headerView != null) {&#10;            val tvUserNickname = headerView.findViewById&lt;TextView&gt;(R.id.tvUserNickname)&#10;            val tvUserLevelDays = headerView.findViewById&lt;TextView&gt;(R.id.tvUserLevelDays)&#10;&#10;            // 사용자 이름은 기본값으로 &quot;알중이&quot; 사용&#10;            tvUserNickname.text = &quot;알중이&quot;&#10;&#10;            // 금주 상태에 따른 레벨 및 일수 정보 업데이트&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            if (sharedPref.contains(&quot;start_time&quot;)) {&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, Date().time)&#10;                val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;                // 레벨 계산 (시간 단위에 따라 적절한 마일스톤 사용)&#10;                val adjustedMilestones = when {&#10;                    Constants.isSecondTestMode -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                    Constants.isMinuteTestMode -&gt; listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;                    else -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                }&#10;&#10;                var currentLevel = 1&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i + 1&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                tvUserLevelDays.text = &quot;Level $currentLevel · ${timePassed}${Constants.TIME_UNIT_TEXT} 금주 중&quot;&#10;            } else {&#10;                tvUserLevelDays.text = &quot;금주를 시작해보세요!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;&#10;    /**&#10;     * 액티비티가 새 인텐트로 재사용될 때 수행할 작업을 정의합니다.&#10;     * 자식 클래스에서 오버라이드할 수 있습니다.&#10;     */&#10;    open fun handleNewIntent(intent: Intent?) {&#10;        // 기본 구현은 아무 작업도 수행하지 않습니다&#10;    }&#10;&#10;    /**&#10;     * 효과 없이 액티비티 전환&#10;     */&#10;    protected fun navigateToActivity(activityClass: Class&lt;*&gt;) {&#10;        val intent = Intent(this, activityClass)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;&#10;    /**&#10;     * 액티비티 종료 시 효과 없이 전환&#10;     */&#10;    override fun finish() {&#10;        super.finish()&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;&#10;    override fun onNavigationItemSelected(item: MenuItem): Boolean {&#10;        when (item.itemId) {&#10;            R.id.nav_sobriety -&gt; {&#10;                // 금주 상태에 따라 다른 화면으로 이동&#10;                val sharedPrefs = SharedPreferencesManager.getInstance(this)&#10;                val isAbstaining = sharedPrefs.getBoolean(&quot;isAbstaining&quot;, false)&#10;&#10;                if (isAbstaining) {&#10;                    // 금주 중이면 상태 화면으로&#10;                    if (this !is StatusActivity) {&#10;                        navigateToActivity(StatusActivity::class.java)&#10;                    }&#10;                } else {&#10;                    // 금주 중이 아니면 시작 화면으로&#10;                    if (this !is StartActivity) {&#10;                        navigateToActivity(StartActivity::class.java)&#10;                    }&#10;                }&#10;            }&#10;            R.id.nav_levels -&gt; {&#10;                if (this.javaClass.simpleName != &quot;LevelActivity&quot;) {&#10;                    val intent = Intent(this, Class.forName(&quot;com.example.alcoholictimer.LevelActivity&quot;))&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                }&#10;            }&#10;            R.id.nav_records -&gt; {&#10;                if (this !is RecordsActivity) {&#10;                    navigateToActivity(RecordsActivity::class.java)&#10;                }&#10;            }&#10;            R.id.nav_challenges -&gt; {&#10;                if (this !is ChallengeActivity) {&#10;                    navigateToActivity(ChallengeActivity::class.java)&#10;                }&#10;            }&#10;            R.id.nav_messages -&gt; {&#10;                if (this !is MessageActivity) {&#10;                    navigateToActivity(MessageActivity::class.java)&#10;                }&#10;            }&#10;            R.id.nav_notifications -&gt; {&#10;                if (this !is NotificationActivity) {&#10;                    navigateToActivity(NotificationActivity::class.java)&#10;                }&#10;            }&#10;            R.id.nav_settings -&gt; {&#10;                if (this !is SettingsActivity) {&#10;                    navigateToActivity(SettingsActivity::class.java)&#10;                }&#10;            }&#10;        }&#10;        drawerLayout.closeDrawer(GravityCompat.START)&#10;        return true&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.MenuItem&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.GravityCompat&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.SharedPreferencesManager&#10;import com.google.android.material.navigation.NavigationView&#10;import java.util.Date&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 최신 상태로 업데이트&#10;            updateNavigationDrawer()&#10;            drawerLayout.openDrawer(GravityCompat.START)&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener(this)&#10;&#10;        // 특정 화면에 필요한 컨텐츠 뷰 설정&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태와 헤더 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationDrawer() {&#10;        // 네비게이션 메뉴 상태 업데이트&#10;        updateNavigationMenuState()&#10;&#10;        // 네비게이션 헤더 정보 업데이트&#10;        updateNavigationHeader()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트를 '금주 상태'로 변경합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트 변경&#10;        val soberMenuItem = navigationView.menu.findItem(R.id.nav_sobriety)&#10;        soberMenuItem.isEnabled = true&#10;        if (hasStarted) {&#10;            soberMenuItem.title = &quot;금주 상태&quot;&#10;        } else {&#10;            soberMenuItem.title = &quot;금주&quot;&#10;        }&#10;&#10;        // 활동 보기 메뉴는 항상 활성화&#10;        val recordsMenuItem = navigationView.menu.findItem(R.id.nav_records)&#10;        recordsMenuItem.isEnabled = true&#10;    }&#10;&#10;    /**&#10;     * 네비게이션 헤더의 사용자 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationHeader() {&#10;        val headerView = navigationView.getHeaderView(0)&#10;        if (headerView != null) {&#10;            val tvUserNickname = headerView.findViewById&lt;TextView&gt;(R.id.tvUserNickname)&#10;            val tvUserLevelDays = headerView.findViewById&lt;TextView&gt;(R.id.tvUserLevelDays)&#10;&#10;            // 사용자 이름은 기본값으로 &quot;알중이&quot; 사용&#10;            tvUserNickname.text = &quot;알중이&quot;&#10;&#10;            // 금주 상태에 따른 레벨 및 일수 정보 업데이트&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            if (sharedPref.contains(&quot;start_time&quot;)) {&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, Date().time)&#10;                val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;                // 레벨 계산 (시간 단위에 따라 적절한 마일스톤 사용)&#10;                val adjustedMilestones = when {&#10;                    Constants.isSecondTestMode -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                    Constants.isMinuteTestMode -&gt; listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;                    else -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                }&#10;&#10;                var currentLevel = 1&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i + 1&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                tvUserLevelDays.text = &quot;Level $currentLevel · ${timePassed}${Constants.TIME_UNIT_TEXT} 금주 중&quot;&#10;            } else {&#10;                tvUserLevelDays.text = &quot;금주를 시작해보세요!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;&#10;    /**&#10;     * 액티비티가 새 인텐트로 재사용될 때 수행할 작업을 정의합니다.&#10;     * 자식 클래스에서 오버라이드할 수 있습니다.&#10;     */&#10;    open fun handleNewIntent(intent: Intent?) {&#10;        // 기본 구현은 아무 작업도 수행하지 않습니다&#10;    }&#10;&#10;    /**&#10;     * 효과 없이 액티비티 전환&#10;     */&#10;    protected fun navigateToActivity(activityClass: Class&lt;*&gt;) {&#10;        val intent = Intent(this, activityClass)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;&#10;    /**&#10;     * 액티비티 종료 시 효과 없이 전환&#10;     */&#10;    override fun finish() {&#10;        super.finish()&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;&#10;    override fun onNavigationItemSelected(item: MenuItem): Boolean {&#10;        when (item.itemId) {&#10;            R.id.nav_sobriety -&gt; {&#10;                // 금주 상태에 따라 다른 화면으로 이동&#10;                val sharedPrefs = SharedPreferencesManager.getInstance(this)&#10;                val isAbstaining = sharedPrefs.getBoolean(&quot;isAbstaining&quot;, false)&#10;&#10;                if (isAbstaining) {&#10;                    // 금주 중이면 상태 화면으로&#10;                    if (this !is StatusActivity) {&#10;                        navigateToActivity(StatusActivity::class.java)&#10;                    }&#10;                } else {&#10;                    // 금주 중이 아니면 시작 화면으로&#10;                    if (this !is StartActivity) {&#10;                        navigateToActivity(StartActivity::class.java)&#10;                    }&#10;                }&#10;            }&#10;            R.id.nav_levels -&gt; {&#10;                if (this.javaClass.simpleName != &quot;LevelActivity&quot;) {&#10;                    val intent = Intent(this, Class.forName(&quot;com.example.alcoholictimer.LevelActivity&quot;))&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                }&#10;            }&#10;            R.id.nav_records -&gt; {&#10;                if (this !is RecordsActivity) {&#10;                    navigateToActivity(RecordsActivity::class.java)&#10;                }&#10;            }&#10;            R.id.nav_settings -&gt; {&#10;                if (this !is SettingsActivity) {&#10;                    navigateToActivity(SettingsActivity::class.java)&#10;                }&#10;            }&#10;        }&#10;        drawerLayout.closeDrawer(GravityCompat.START)&#10;        return true&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java" />
              <option name="updatedContent" value="package com.example.alcoholictimer;&#10;&#10;import android.os.Bundle;&#10;import android.widget.TextView;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import java.util.Calendar;&#10;&#10;public class RecordSummaryActivity extends AppCompatActivity {&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_record_summary);&#10;&#10;        // ...existing code...&#10;&#10;        TextView tvRecordTitle = findViewById(R.id.tvRecordTitle);&#10;        // 예시: 현재 월을 기록 종료 시점의 월로 사용합니다.&#10;        int month = Calendar.getInstance().get(Calendar.MONTH) + 1;&#10;        tvRecordTitle.setText(String.format(&quot;%d월의 금주&quot;, month));&#10;&#10;        // ...existing code...&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java" />
              <option name="originalContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}&#10;" />
              <option name="updatedContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.model.RecentActivity&#10;&#10;class RecentActivityAdapter : RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;    private val activities = ArrayList&lt;RecentActivity&gt;()&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val ivActivityIcon: ImageView = itemView.findViewById(R.id.ivActivityIcon)&#10;        val tvEndDate: TextView = itemView.findViewById(R.id.tvEndDate)&#10;        val tvActivityTitle: TextView = itemView.findViewById(R.id.tvActivityTitle)&#10;        val tvDuration: TextView = itemView.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val tvSavedMoney: TextView = itemView.findViewById(R.id.tvSavedMoney)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        &#10;        holder.tvEndDate.text = activity.endDate&#10;        holder.tvActivityTitle.text = activity.title&#10;        holder.tvDuration.text = &quot;${activity.duration}일 ${activity.hours}시간&quot;&#10;        holder.tvStatus.text = if(activity.isSuccess) &quot;성공&quot; else &quot;실패&quot;&#10;        holder.tvSavedMoney.text = &quot;${activity.savedMoney}만원 절약&quot;&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;&#10;    fun updateActivities(newActivities: List&lt;RecentActivity&gt;) {&#10;        activities.clear()&#10;        activities.addAll(newActivities.take(5)) // 최대 5개까지만 표시&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/drawer_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/drawer_menu.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;!-- 메뉴 섹션 --&gt;&#10;    &lt;group android:id=&quot;@+id/group_main_menu&quot;&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_start&quot;&#10;            android:icon=&quot;@drawable/ic_flag&quot;&#10;            android:title=&quot;금주&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_records&quot;&#10;            android:icon=&quot;@drawable/ic_calendar&quot;&#10;            android:title=&quot;활동 보기&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_challenge&quot;&#10;            android:icon=&quot;@drawable/ic_trophy&quot;&#10;            android:title=&quot;챌린지&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_messages&quot;&#10;            android:icon=&quot;@drawable/ic_message&quot;&#10;            android:title=&quot;응원 메시지&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_notifications&quot;&#10;            android:icon=&quot;@drawable/ic_notification&quot;&#10;            android:title=&quot;알림함&quot;&#10;            android:enabled=&quot;false&quot; /&gt;&#10;    &lt;/group&gt;&#10;&#10;    &lt;!-- 설정 섹션 --&gt;&#10;    &lt;group android:id=&quot;@+id/group_settings&quot;&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_settings&quot;&#10;            android:icon=&quot;@drawable/ic_settings&quot;&#10;            android:title=&quot;설정&quot; /&gt;&#10;    &lt;/group&gt;&#10;&lt;/menu&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#13;&#10;    &lt;!-- 메뉴 섹션 --&gt;&#13;&#10;    &lt;group android:id=&quot;@+id/group_main_menu&quot;&gt;&#13;&#10;        &lt;item&#13;&#10;            android:id=&quot;@+id/nav_start&quot;&#13;&#10;            android:icon=&quot;@drawable/ic_flag&quot;&#13;&#10;            android:title=&quot;금주&quot; /&gt;&#13;&#10;        &lt;item&#13;&#10;            android:id=&quot;@+id/nav_records&quot;&#13;&#10;            android:icon=&quot;@drawable/ic_calendar&quot;&#13;&#10;            android:title=&quot;활동 보기&quot; /&gt;&#13;&#10;    &lt;/group&gt;&#13;&#10;&#13;&#10;    &lt;!-- 설정 섹션 --&gt;&#13;&#10;    &lt;group android:id=&quot;@+id/group_settings&quot;&gt;&#13;&#10;        &lt;item&#13;&#10;            android:id=&quot;@+id/nav_settings&quot;&#13;&#10;            android:icon=&quot;@drawable/ic_settings&quot;&#13;&#10;            android:title=&quot;설정&quot; /&gt;&#13;&#10;    &lt;/group&gt;&#13;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/nav_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/nav_menu.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_sobriety&quot;&#10;        android:title=&quot;금주&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_levels&quot;&#10;        android:title=&quot;금주 레벨&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_records&quot;&#10;        android:title=&quot;활동 보기&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_challenges&quot;&#10;        android:title=&quot;챌린지&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_messages&quot;&#10;        android:title=&quot;응원 메시지&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_notifications&quot;&#10;        android:title=&quot;알림함&quot; /&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_settings&quot;&#10;        android:title=&quot;설정&quot; /&gt;&#10;&lt;/menu&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/nav_sobriety&quot;&#13;&#10;        android:title=&quot;금주&quot; /&gt;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/nav_levels&quot;&#13;&#10;        android:title=&quot;금주 레벨&quot; /&gt;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/nav_records&quot;&#13;&#10;        android:title=&quot;활동 보기&quot; /&gt;&#13;&#10;    &lt;item&#13;&#10;        android:id=&quot;@+id/nav_settings&quot;&#13;&#10;        android:title=&quot;설정&quot; /&gt;&#13;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/local.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/local.properties" />
              <option name="originalContent" value="sdk.dir=C:\Users\&lt;사용자명&gt;\AppData\Local\Android\Sdk&#10;&#10;" />
              <option name="updatedContent" value="sdk.dir=C:/Users/&lt;사용자명&gt;/AppData/Local/Android/Sdk" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>