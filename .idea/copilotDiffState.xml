<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Material3.DayNight&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;!-- 메인 액티비티 (시작 화면) --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StartActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;!-- 금주 진행 상황 화면 --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StatusActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#10;&#10;        &lt;!-- 기록 화면 --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RecordsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#10;&#10;        &lt;!-- 레벨 화면 --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LevelActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#10;&#10;        &lt;!-- 설정/테스트 화면 --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.TestActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#10;&#10;        &lt;!-- 세부 기록 화면 --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.DetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#10;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.Material3.DayNight&quot;&#13;&#10;        tools:targetApi=&quot;31&quot;&gt;&#13;&#10;&#13;&#10;        &lt;!-- 메인 액티비티 (시작 화면) --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StartActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;&#13;&#10;        &lt;!-- 금주 진행 상황 화면 --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StatusActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- 기록 화면 --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.RecordsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- 레벨 화면 --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.LevelActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- 설정 화면 --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.SettingsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- 설정/테스트 화면 --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.TestActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- 세부 기록 화면 --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.DetailActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/assets/design_guide.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/assets/design_guide.md" />
              <option name="originalContent" value="### ✅ 제목: **알중시계 앱에 어울리는 디자인 컨셉 정의**&#10;- Jetpack Compose 기반으로 구현하며, 미니멀하고 직관적인 UX를 제공합니다.&#10;&#10;---&#10;&#10;##  1. 디자인 컨셉 키워드&#10;&#10;| 항목          | 설명                               |&#10;| ----------- | -------------------------------- |&#10;| **전체 톤**    | **극도로 절제된 미니멀 디자인**              |&#10;| **감정 전달**   | 중독/회복을 돕는 **집중과 절제**             |&#10;| **UI 철학**   | 사용자 방해 없이 **본질에 집중하는** 단순함      |&#10;| **동기부여 요소** | 배지, 레벨, 응원 메시지를 **선의 굵기와 형태**로 표현 |&#10;&#10;---&#10;&#10;##  2. 컬러 팔레트 제안&#10;&#10;| 용도      | 색상                     | 느낌                |&#10;| ------- | ---------------------- | ----------------- |&#10;| 배경      | `#FFFFFF` (순수한 흰색)     | 깨끗하고 비어있는 캔버스    |&#10;| 기본 텍스트  | `#000000`              | 명확하고 읽기 쉬운 검은색   |&#10;| 강조 요소   | 검은색 선 (`#000000`)      | 선의 두께와 형태로 강조점 표현 |&#10;| 레벨 배지   | 흰색 배경에 검은색 테두리        | 레벨별로 테두리 두께로 구분   |&#10;| 버튼      | 투명 배경에 검은색 테두리        | 절제된 느낌의 아웃라인 버튼  |&#10;&#10;---&#10;&#10;## ‍ 3. UI 스타일 가이드&#10;&#10;| 요소         | 디자인 가이드                               |&#10;| ---------- | ------------------------------------- |&#10;| 버튼         | 투명 배경 + 검은색 테두리, 검은색 텍스트              |&#10;| 타이머, 일수 표시 | 큰 텍스트, 가운데 정렬, 검은색 bold               |&#10;| 메시지 카드     | 흰 배경 + 얇은 검은색 테두리                     |&#10;| 배지 아이콘     | 원형 + 레벨별 테두리 두께로 구분                   |&#10;| 네비게이션      | 선으로만 표현된 간결한 아이콘                      |&#10;| 글꼴         | 기본 sans-serif (깔끔함과 가독성 강조)           |&#10;&#10;---&#10;&#10;## ✨ 4. 사용자가 느끼게 될 감정 컨셉&#10;&#10;| 시점           | 감정 유도                |&#10;| ------------ | -------------------- |&#10;| 앱을 처음 열었을 때  | &quot;깨끗하고 정돈된 공간에서의 마음 정리&quot; |&#10;| 금주일 수를 확인할 때 | &quot;단순함 속에서 더 명확하게 보이는 성과&quot; |&#10;| 레벨을 볼 때      | &quot;기하학적 형태로 표현되는 진전감&quot;   |&#10;| 응원 메시지를 볼 때  | &quot;절제된 디자인에 담긴 진정성&quot;     |&#10;&#10;---&#10;&#10;## ️ 5. 기본 레이아웃 컨셉 예시 (텍스트 구조)&#10;&#10;```plaintext&#10;[MainActivity]&#10;------------------------------&#10;알중시계&#10;[금주] [활동]&#10;------------------------------&#10;&#10;[StatusActivity]&#10;------------------------------&#10;오늘로 금주 27일째&#10;✨ 당신은 잘하고 있어요!&#10;[현재 레벨: 3단계 ◯]&#10;[다음 레벨까지: 3일 남음]&#10;------------------------------&#10;```&#10;&#10;---&#10;&#10;## ✅ 디자인 컨셉 요약&#10;&#10;* 앱의 핵심 감정은 **집중과 절제를 통한 회복**입니다.&#10;* 디자인은 **흰 바탕에 검은색 선만으로 표현된 극도의 미니멀 스타일**입니다.&#10;* 사용자에게 **본질에 집중하는 단순함과 선명함**을 전달하는 UI가 가장 중요합니다.&#10;&#10;---&#10;&#10;##  공부하면 좋은 것&#10;&#10;| 개념                | 이유                            |&#10;| ----------------- | ----------------------------- |&#10;| 미니멀리즘 디자인        | 불필요한 요소를 제거하여 본질에 집중하는 디자인 철학 |&#10;| 일본식 '마' 개념        | 여백과 공간 활용을 통한 심리적 안정감 표현      |&#10;| 타이포그래피 중심의 레이아웃   | 색상 없이도 정보 계층을 효과적으로 표현하는 방법  |&#10;&#10;---&#10;" />
              <option name="updatedContent" value="### ✅ 제목: **알중시계 앱 디자인 가이드 완전판**&#10;- Jetpack Compose 기반으로 구현하며, 미니멀하고 직관적인 UX를 제공합니다.&#10;- 금주 설정 화면에서 검증된 디자인 철학을 전체 앱에 적용합니다.&#10;&#10;---&#10;&#10;##  1. 디자인 철학 &amp; 핵심 컨셉&#10;&#10;### **핵심 키워드: &quot;절제된 완벽함&quot;**&#10;&#10;| 항목          | 설명                                    |&#10;| ----------- | ------------------------------------- |&#10;| **디자인 철학**  | **극도로 절제된 미니멀 디자인 + 기능적 완성도**        |&#10;| **감정 전달**   | 중독 회복을 돕는 **집중력과 평온함**               |&#10;| **UI 철학**   | 불필요한 요소 제거, **본질에만 집중하는 단순함**        |&#10;| **상호작용**   | 직관적이고 예측 가능한 인터페이스                   |&#10;| **정보 전달**   | 타이포그래피와 여백을 통한 **명확한 정보 계층 구조**     |&#10;&#10;---&#10;&#10;##  2. 컬러 시스템 (완성판)&#10;&#10;### **기본 컬러 팔레트**&#10;| 용도        | 색상 코드              | 사용 예시                  | 느낌           |&#10;| --------- | ------------------ | ---------------------- | ------------ |&#10;| **Primary** | `#FFFFFF`          | 전체 배경, 카드 배경          | 깨끗함, 순수함    |&#10;| **Text**    | `#000000`          | 제목, 본문, 버튼 텍스트        | 명확함, 가독성    |&#10;| **Border**  | `#000000` (두께 조절)  | 버튼 테두리, 카드 테두리, 구분선   | 절제됨, 구조화    |&#10;| **Accent**  | `#EEEEEE`          | 비활성화 상태, 미달성 레벨       | 차분함, 대기 상태  |&#10;&#10;### **상태별 컬러 적용**&#10;| 상태      | 색상 조합                    | 적용 요소           |&#10;| ------- | ------------------------ | --------------- |&#10;| 활성화     | 검은 텍스트 + 검은 테두리         | 현재 선택된 옵션      |&#10;| 비활성화    | 회색 텍스트 + 연한 회색 테두리     | 미선택/미달성 옵션    |&#10;| 강조      | 굵은 검은 텍스트 + 두꺼운 테두리    | 중요한 정보, 레벨 표시 |&#10;&#10;---&#10;&#10;##  3. 타이포그래피 시스템&#10;&#10;### **폰트 계층 구조**&#10;| 레벨       | 크기    | 굵기      | 용도                    | 예시               |&#10;| -------- | ----- | ------- | --------------------- | ---------------- |&#10;| **H1**   | 24sp  | Bold    | 화면 제목                | &quot;금주 설정&quot;          |&#10;| **H2**   | 20sp  | Bold    | 섹션 제목                | &quot;음주 비용&quot;          |&#10;| **H3**   | 18sp  | Bold    | 서브 제목, 현재 상태         | &quot;현재 진행도&quot;         |&#10;| **Body1** | 16sp  | Regular | 기본 본문, 옵션 텍스트        | &quot;저(1만원 이하)&quot;      |&#10;| **Body2** | 14sp  | Regular | 보조 설명, 부가 정보         | &quot;다음 레벨까지 12일 남음&quot; |&#10;| **Caption** | 12sp  | Regular | 캡션, 힌트 텍스트          | &quot;예: 30&quot;          |&#10;&#10;### **텍스트 정렬 규칙**&#10;- **제목**: 중앙 정렬&#10;- **본문/옵션**: 좌측 정렬&#10;- **상태 정보**: 중앙 정렬&#10;&#10;---&#10;&#10;##  4. 컴포넌트 디자인 가이드&#10;&#10;### **버튼 디자인**&#10;```kotlin&#10;// 기본 버튼 스타일&#10;OutlinedButton(&#10;    border = BorderStroke(1.dp, Color.Black),&#10;    colors = ButtonDefaults.outlinedButtonColors(&#10;        containerColor = Color.Transparent,&#10;        contentColor = Color.Black&#10;    )&#10;)&#10;```&#10;&#10;### **라디오 버튼 그룹**&#10;```kotlin&#10;// 옵션 선택 UI (금주 설정 화면 스타일)&#10;Row(horizontalArrangement = Arrangement.spacedBy(8.dp)) {&#10;    RadioButton(selected = isSelected, onClick = { })&#10;    Text(&quot;옵션명&quot;, fontSize = 16.sp)&#10;}&#10;```&#10;&#10;### **카드/컨테이너**&#10;```kotlin&#10;// 정보 표시 카드&#10;Card(&#10;    colors = CardDefaults.cardColors(containerColor = Color.White),&#10;    border = BorderStroke(1.dp, Color.Black),&#10;    elevation = CardDefaults.cardElevation(0.dp)&#10;)&#10;```&#10;&#10;### **구분선**&#10;```kotlin&#10;// 섹션 구분&#10;HorizontalDivider(&#10;    modifier = Modifier.padding(vertical = 16.dp),&#10;    thickness = 1.dp,&#10;    color = Color.Black&#10;)&#10;```&#10;&#10;---&#10;&#10;##  5. 간격 및 레이아웃 시스템&#10;&#10;### **여백 시스템**&#10;| 크기       | 값     | 용도                        |&#10;| -------- | ----- | ------------------------- |&#10;| **XXS**  | 4dp   | 아이콘과 텍스트 사이              |&#10;| **XS**   | 8dp   | 라디오 버튼과 라벨 사이            |&#10;| **S**    | 12dp  | 관련 요소들 사이                |&#10;| **M**    | 16dp  | 화면 기본 패딩, 섹션 사이          |&#10;| **L**    | 24dp  | 큰 섹션 구분                  |&#10;| **XL**   | 32dp  | 화면 상단/하단 여백             |&#10;&#10;### **컨테이너 패딩**&#10;```kotlin&#10;modifier = Modifier&#10;    .fillMaxSize()&#10;    .padding(16.dp)  // 기본 화면 패딩&#10;```&#10;&#10;---&#10;&#10;##  6. 화면별 UI 패턴&#10;&#10;### **1. 설정 화면 패턴**&#10;```plaintext&#10;[제목 - 중앙 정렬, 24sp, Bold]&#10;&#10;[섹션명 - 좌측 정렬, 20sp, Bold]&#10;○ 옵션1  ○ 옵션2  ○ 옵션3&#10;&#10;[구분선]&#10;&#10;[섹션명]&#10;○ 옵션1  ○ 옵션2  ○ 옵션3&#10;&#10;[중앙 정렬 버튼]&#10;```&#10;&#10;### **2. 상태 표시 패턴**&#10;```plaintext&#10;[큰 숫자 - 중앙 정렬, Bold]&#10;[상태 메시지 - 중앙 정렬]&#10;[진행도 표시]&#10;[액션 버튼]&#10;```&#10;&#10;### **3. 목록 표시 패턴**&#10;```plaintext&#10;[아이템1 - 카드 형태]&#10;[아이템2 - 카드 형태]&#10;[아이템3 - 카드 형태]&#10;```&#10;&#10;---&#10;&#10;##  7. 레벨 시스템 디자인&#10;&#10;### **레벨 배지 디자인 (테두리 기반)**&#10;| 레벨          | 테두리 스타일        | 색상         | 달성 조건    |&#10;| ----------- | -------------- | ---------- | -------- |&#10;| **새싹**      | 1dp 실선        | 검은색       | 1주 (7일)  |&#10;| **도전자**     | 2dp 실선        | 검은색       | 2주 (14일) |&#10;| **작심삼십일**   | 3dp 실선        | 검은색       | 1달 (30일) |&#10;| **철의 의지**   | 4dp 실선        | 검은색       | 2달 (60일) |&#10;| **수행자**     | 5dp 실선        | 검은색       | 4달 (120일) |&#10;| **달인**      | 6dp 실선        | 검은색       | 8달 (240일) |&#10;| **절제의 레전드** | 3dp 점선        | 검은색       | 1년 (365일) |&#10;&#10;### **레벨 표시 컴포넌트**&#10;```kotlin&#10;// 현재 레벨 표시&#10;Surface(&#10;    shape = CircleShape,&#10;    border = BorderStroke(levelThickness.dp, Color.Black),&#10;    color = if (achieved) Color.White else Color(0xFFEEEEEE)&#10;) {&#10;    Text(levelNumber, modifier = Modifier.padding(16.dp))&#10;}&#10;```&#10;&#10;---&#10;&#10;##  8. 애니메이션 &amp; 인터랙션&#10;&#10;### **애니메이션 원칙**&#10;- **없음**: 화면 전환 효과 제거 (즉시 전환)&#10;- **미세함**: 버튼 클릭 시 미세한 스케일 변화만&#10;- **자연스러움**: 상태 변화는 fade in/out으로 부드럽게&#10;&#10;### **인터랙션 피드백**&#10;```kotlin&#10;// 버튼 클릭 피드백&#10;modifier = Modifier.clickable(&#10;    indication = rememberRipple(color = Color.Black, radius = 24.dp),&#10;    interactionSource = remember { MutableInteractionSource() }&#10;)&#10;```&#10;&#10;---&#10;&#10;##  9. 반응형 디자인 규칙&#10;&#10;### **화면 크기 대응**&#10;- **모든 요소**: 화면 크기에 관계없이 동일한 비율 유지&#10;- **텍스트**: sp 단위 사용으로 사용자 설정 반영&#10;- **패딩**: dp 단위로 일관된 간격 유지&#10;&#10;---&#10;&#10;## ✅ 10. 구현 체크리스트&#10;&#10;### **기본 설정**&#10;- [ ] 전체 배경색: `Color.White`&#10;- [ ] 기본 텍스트색: `Color.Black`&#10;- [ ] 모든 elevation: `0.dp` (그림자 없음)&#10;&#10;### **컴포넌트**&#10;- [ ] 버튼: OutlinedButton with 1dp black border&#10;- [ ] 카드: White background with 1dp black border&#10;- [ ] 구분선: 1dp black HorizontalDivider&#10;&#10;### **타이포그래피**&#10;- [ ] 제목: 24sp Bold, 중앙 정렬&#10;- [ ] 섹션: 20sp Bold, 좌측 정렬&#10;- [ ] 본문: 16sp Regular&#10;&#10;### **간격**&#10;- [ ] 화면 패딩: 16dp&#10;- [ ] 섹션 간격: 16dp&#10;- [ ] 요소 간격: 8dp&#10;&#10;---&#10;&#10;##  디자인 컨셉 최종 요약&#10;&#10;**&quot;절제된 완벽함으로 본질에 집중하는 금주 도우미 앱&quot;**&#10;&#10;1. **시각적 단순함**: 흰색 배경 + 검은색 요소만 사용&#10;2. **기능적 명확함**: 모든 인터페이스가 직관적이고 예측 가능&#10;3. **감정적 안정감**: 여백과 정렬을 통한 심리적 평온함 제공&#10;4. **진전감 표현**: 테두리 두께로 성장과 발전을 시각화&#10;&#10;이 가이드를 따라 구현하면 사용자에게 **&quot;깨끗하고 집중된 환경에서 차분하게 회복해 나가는&quot;** 경험을 제공할 수 있습니다." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/assets/drink_level.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/assets/drink_level.md" />
              <option name="updatedContent" value="# 금주 레벨 화면 상세 기획서&#10;&#10;본 기획서는 사용자의 금주 성공 기록을 기반으로, 금주 레벨을 시각적으로 표시하는 화면을 설계합니다.&#10;Jetpack Compose 기반으로 구현하며, 최소 기능 제품(MVP) 기준으로 작성되었습니다.&#10;&#10;---&#10;&#10;## 1. 금주 레벨 정의&#10;&#10;| 레벨명           | 기간 (연속 금주 일수) | 색상                 | 표시 방법           |&#10;|-----------------|---------------------|---------------------|-------------------|&#10;| 작심 7일         | 0~6일               | Gray (#BDBDBD)      | 0~6일             |&#10;| 의지의 2주        | 7~13일              | Yellow (#FFEB3B)    | 7~13일            |&#10;| 한달의 기적       | 14~29일             | Orange (#FF9800)    | 14~29일           |&#10;| 습관의 탄생       | 30~59일             | Green (#4CAF50)     | 30~59일           |&#10;| 계속되는 도전     | 60~119일            | Blue (#2196F3)      | 60~119일          |&#10;| 거의 1년         | 120~239일           | Purple (#9C27B0)    | 120~239일         |&#10;| 금주 마스터       | 240~364일           | Black (#212121)     | 240~364일         |&#10;| 절제의 레전드     | 365일 이상          | Gold (#FFD700)      | 1년 이상          |&#10;&#10;**특별 표시 규칙:**&#10;- &quot;절제의 레전드&quot; 레벨의 날짜는 &quot;1년 이상&quot;으로 표시&#10;- 각 레벨은 해당 색상의 카드로 표현&#10;- 달성한 레벨은 100% 투명도, 미달성 레벨은 20% 투명도(연하게 표시)&#10;&#10;---&#10;&#10;## 2. 화면 구성&#10;&#10;### (1) 상단바 (BaseActivity 공통)&#10;- **햄버거 메뉴**: 좌측 상단 (기존 네비게이션 패턴 유지)&#10;- **화면 제목**: &quot;금주 레벨&quot; (중앙 정렬)&#10;- **배경색**: 흰색 (#FFFFFF)&#10;- **구분선**: 하단에 연한 회색 구분선&#10;&#10;### (2) 현재 진행 영역 (상단 1/3)&#10;- **배경색**: 흰색 (#FFFFFF)&#10;- **레이아웃**: 중앙 정렬 세로 배치&#10;- **구성 요소**:&#10;  ```&#10;  [현재 레벨명]&#10;  24sp, Bold, 검은색&#10;  &#10;  [진행도 바]&#10;  - 가로 70% 너비, 높이 10dp&#10;  - 현재 레벨 색상으로 표시&#10;  - 둥근 모서리&#10;  &#10;  [남은 일수 텍스트]&#10;  16sp, 검은색&#10;  &quot;다음 레벨까지 X일 남음&quot; 또는 &quot;최고 레벨입니다!&quot;&#10;  ```&#10;&#10;### (3) 구분선&#10;- **두께**: 2dp&#10;- **색상**: 연한 회색 (#E0E0E0)&#10;- **위치**: 현재 진행 영역과 레벨 리스트 사이&#10;&#10;### (4) 전체 레벨 리스트 (하단 2/3)&#10;- **스크롤**: 세로 스크롤 가능&#10;- **패딩**: 상단 16dp 여백&#10;- **카드 간격**: 12dp&#10;&#10;#### 레벨 카드 디자인&#10;```&#10;┌─────────────────────────────────┐&#10;│ [레벨명]                        │ ← 18sp, 현재 레벨이면 Bold&#10;│ [기간]                          │ ← 14sp, 회색&#10;└─────────────────────────────────┘&#10;```&#10;&#10;**카드 속성**:&#10;- **모서리**: 16dp 둥근 모서리&#10;- **패딩**: 내부 16dp, 좌우 여백 16dp&#10;- **배경색**: 각 레벨의 지정 색상&#10;- **투명도**: 달성 레벨 100%, 미달성 레벨 20%&#10;- **텍스트 색상**: 달성 시 검은색, 미달성 시 회색&#10;&#10;---&#10;&#10;## 3. 데이터 연동 규칙&#10;&#10;### (1) 현재 일수 계산&#10;```kotlin&#10;val currentDays = 15 // 예시값, 실제로는 SharedPreferences에서 계산&#10;```&#10;&#10;### (2) 현재 레벨 판정&#10;```kotlin&#10;val currentLevelIndex = levels.indexOfFirst { currentDays in it.start..it.end }.coerceAtLeast(0)&#10;```&#10;&#10;### (3) 진행도 계산&#10;```kotlin&#10;val progress = when {&#10;    currentDays &lt; currentLevel.start -&gt; 0f&#10;    currentDays &gt; currentLevel.end -&gt; 1f&#10;    else -&gt; (currentDays - currentLevel.start + 1).toFloat() / (currentLevel.end - currentLevel.start + 1)&#10;}&#10;```&#10;&#10;### (4) 다음 레벨까지 일수&#10;```kotlin&#10;val daysToNext = if (nextLevel != null) nextLevel.start - currentDays else 0&#10;```&#10;&#10;---&#10;&#10;## 4. UI 상태 및 동작&#10;&#10;### (1) 달성 상태 표시&#10;- **달성된 레벨**: 원래 색상으로 선명하게 표시&#10;- **미달성 레벨**: 20% 투명도로 연하게 표시&#10;- **현재 레벨**: Bold 텍스트로 강조&#10;&#10;### (2) 특별 케이스&#10;- **최고 레벨 달성**: &quot;최고 레벨입니다!&quot; 메시지 표시&#10;- **절제의 레전드**: 날짜를 &quot;1년 이상&quot;으로 표시&#10;&#10;### (3) 반응형 디자인&#10;- **세로 스크롤**: 레벨이 많을 때 스크롤 가능&#10;- **카드 레이아웃**: 화면 너비에 맞춰 자동 조정&#10;- **패딩**: 좌우 16dp 일관된 여백&#10;&#10;---&#10;&#10;## 5. 구현 시 주의사항&#10;&#10;### (1) Jetpack Compose 컴포넌트&#10;```kotlin&#10;// BaseActivity 상속으로 공통 네비게이션 제공&#10;class LevelActivity : BaseActivity()&#10;&#10;// 메인 화면 구성&#10;@Composable&#10;fun LevelScreen(currentDays: Int, onBack: (() -&gt; Unit)? = null)&#10;&#10;// 레벨 카드 컴포넌트&#10;@Composable&#10;fun LevelCard(level: LevelInfo, currentDays: Int, enabled: Boolean)&#10;&#10;// 데이터 클래스&#10;data class LevelInfo(val name: String, val start: Int, val end: Int, val color: Color)&#10;```&#10;&#10;### (2) 색상 일관성&#10;- Material3 테마 기반&#10;- 각 레벨별 고유 색상 유지&#10;- 흰색 배경으로 통일&#10;&#10;### (3) 접근성&#10;- 충분한 색상 대비&#10;- 의미 있는 contentDescription&#10;- 텍스트 크기 가독성 확보&#10;&#10;### (4) 성능 최적화&#10;- remember를 통한 상태 관리&#10;- LazyColumn 대신 일반 Column + Scroll (레벨 수가 적음)&#10;- 불필요한 리컴포지션 방지&#10;&#10;---&#10;&#10;## 6. 프리뷰 및 테스트&#10;&#10;### (1) Compose 프리뷰&#10;```kotlin&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewLevelScreen() {&#10;    LevelActivity().LevelScreen(currentDays = 15)&#10;}&#10;```&#10;&#10;### (2) 테스트 케이스&#10;- 각 레벨 구간별 표시 확인&#10;- 진행도 바 정확성 검증&#10;- 최고 레벨 달성 시 UI 확인&#10;- 스크롤 동작 테스트&#10;&#10;---&#10;&#10;이 기획서는 실제 구현된 코드를 바탕으로 작성되었으며, 동일한 화면을 재구현할 때 참고 문서로 활용할 수 있습니다." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/assets/hamburger_view.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/assets/hamburger_view.md" />
              <option name="originalContent" value="#  햄버거 메뉴 상세 기획서 (MVP, Jetpack Compose)&#10;&#10;금주 타이머 앱의 사이드(햄버거) 메뉴 상세 기획서입니다.  &#10;Jetpack Compose 기반으로 구현하며, 최소 기능 제품(MVP) 기준으로 작성되었습니다.&#10;&#10;---&#10;&#10;## 1. 메뉴 구조 및 구성 요소&#10;&#10;### [상단 프로필 영역]&#10;- **동그란 원형 프로필(아바타)**&#10;    - 원형 배경 위에 중앙에 술병 모양 SVG 또는 PNG 아바타 이미지 표시&#10;    - 아바타 이미지는 앱 내 기본 제공 (커스텀/변경 기능은 MVP 범위 외)&#10;- **이름(별명)**&#10;    - 기본값: &quot;알중이1&quot;&#10;    - 사용자 이름(별명) 텍스트 표시&#10;    - 이름(별명) 클릭 시 이름 변경 다이얼로그 표시&#10;    - 변경된 별명은 SharedPreferences에 저장 및 불러오기&#10;&#10;### [구분선]&#10;- 얇은 회색 Divider로 시각적 구분  &#10;  (Jetpack Compose의 Divider 컴포넌트 사용)&#10;&#10;### [메뉴 목록]&#10;- **금주**&#10;    - 메뉴명: &quot;금주&quot;&#10;    - 클릭 시 동작:&#10;        - 금주 진행전: 금주 설정 화면(StartActivity)으로 이동&#10;        - 금주 진행중: 금주 상태 화면(StatusActivity)으로 이동&#10;    - 아이콘: 시작/진행 상태를 나타내는 아이콘(예: ▶️)&#10;- **기록**&#10;    - 메뉴명: &quot;기록&quot;&#10;    - 클릭 시 금주 기록/통계 화면(RecordsActivity)으로 이동&#10;    - 아이콘: 통계/차트 아이콘(예: )&#10;&#10;- **레벨**&#10;    - 메뉴명: &quot;레벨&quot;&#10;    - 클릭 시 레벨 화면(LevelActivity)으로 이동&#10;    - 아이콘: 레벨 아이콘(예: )&#10;&#10;- **구분선**&#10;    - 동일한 스타일의 Divider로 시각적 구분&#10;&#10;- **설정**&#10;    - 메뉴명: &quot;설정&quot;&#10;    - 클릭 시 앱 설정 화면(SettingsActivity)으로 이동&#10;    - 아이콘: 톱니바퀴(⚙️)&#10;&#10;- **테스트 (개발자용)**&#10;    - 메뉴명: &quot;테스트&quot;&#10;    - 클릭 시 테스트 화면(TestActivity)으로 이동&#10;    - 아이콘: 실험/테스트 아이콘(예: )&#10;    - 일반 사용자에게는 메뉴가 표시되지 않음 (빌드시 개발자 플래그로 제어)&#10;&#10;---&#10;&#10;## 2. UI/UX 상세&#10;&#10;### [레이아웃 예시]&#10;```&#10;┌─────────────────────────────┐&#10;│   ●                        │ ← 동그란 원(술병 아바타)&#10;│   알중이1                  │ ← 사용자 이름(클릭 가능, 변경 다이얼로그)&#10;├─────────────────────────────┤ ← 구분선&#10;│ ▶️ 금주                    │ ← 진입 화면: Start/StatusActivity&#10;│  기록                    │ ← 기록/통계 화면 진입&#10;├─────────────────────────────┤ ← 구분선&#10;│ ⚙️ 설정                    │ ← 설정 화면 진입&#10;│  테스트                  │ ← 테스트 화면(개발자 모드)&#10;└─────────────────────────────┘&#10;```&#10;&#10;### [상호작용]&#10;- 아바타/이름 클릭 → 이름 변경 다이얼로그&#10;- 메뉴 클릭 → 각 해당 화면으로 네비게이션&#10;    - 금주: 금주 설정(StartActivity) 또는 금주 상태(StatusActivity)&#10;    - 기록: RecordsActivity&#10;    - 설정: SettingsActivity&#10;    - 테스트: TestActivity (개발자 플래그 true일 때만 표시)&#10;&#10;---&#10;&#10;## 3. 데이터 연동&#10;&#10;- **SharedPreferences Key**&#10;    - `nickname`: 사용자 별명(예시: &quot;알중이1&quot;)&#10;- 금주 진행 상태 판단 로직:&#10;    - `start_date` 존재 여부로 판단&#10;    - 진행중: `start_date` 값 있음&#10;    - 진행전: `start_date` 값 없음&#10;&#10;---&#10;&#10;## 4. 구현 고려사항 (MVP 기준)&#10;&#10;- Jetpack Compose에서 Drawer/ModalDrawer를 사용&#10;- 메뉴 항목은 Column으로 고정 배치&#10;- 아이콘은 VectorDrawable, PNG, 또는 Emoji 활용(빠른 MVP 구현)&#10;- 각 메뉴 클릭 시 Navigation 처리&#10;- 구분선(Divider) 스타일 통일&#10;- 테스트 메뉴는 개발자 플래그로 conditionally 렌더링&#10;- 별명 변경은 AlertDialog 사용 (입력/저장/적용)&#10;&#10;---&#10;&#10;## 5. 개발 TODO&#10;&#10;- [ ] Drawer 메뉴 레이아웃 설계 및 Compose 구현&#10;- [ ] 아바타 &amp; 별명 표시, 별명 변경 다이얼로그 구현&#10;- [ ] 메뉴 클릭 시 네비게이션 처리 및 화면 연결&#10;- [ ] SharedPreferences 연동&#10;- [ ] 테스트 메뉴 개발자 플래그 처리&#10;&#10;---&#10;&#10;**이 기획서를 토대로 Jetpack Compose 코드 작성을 시작하세요.**" />
              <option name="updatedContent" value="#  햄버거 메뉴 상세 기획서 (Jetpack Compose 구현)&#10;&#10;금주 타이머 앱의 사이드(햄버거) 메뉴 상세 기획서입니다.  &#10;Jetpack Compose 기반으로 구현하며, 실제 구현된 UI를 반영한 완전한 문서입니다.&#10;&#10;---&#10;&#10;## 1. 메뉴 구조 및 구성 요소&#10;&#10;### [상단 프로필 영역]&#10;- **동그란 원형 아바타**&#10;    - **크기**: 80dp(가로) × 72dp(세로) Box 컨테이너&#10;    - **모양**: CircleShape로 완전한 원형&#10;    - **배경색**: Color(0xFF888888) - 진한 회색 톤&#10;    - **아이콘**: Icons.Default.Person (사람 모양)&#10;    - **아이콘 색상**: Color.White (밝은 흰색)&#10;    - **아이콘 크기**: 40dp&#10;    - **위치**: 좌측 시작점에서 8dp 패딩&#10;    - **정렬**: wrapContentSize(Alignment.Center)로 중앙 배치&#10;&#10;- **사용자 별명**&#10;    - **기본값**: &quot;알중이1&quot;&#10;    - **크기**: 18sp&#10;    - **스타일**: FontWeight.Bold&#10;    - **위치**: 아바타 아래 8dp 간격, 좌측 시작점에서 8dp 패딩&#10;    - **클릭 가능**: clickable { onNicknameClick() }&#10;    - **기능**: 클릭 시 별명 변경 기능 (현재 구현에서는 빈 함수)&#10;&#10;### [구분선]&#10;- **타입**: HorizontalDivider (Material3)&#10;- **여백**: 상하 12dp 패딩&#10;- **색상**: Material3 기본 색상&#10;&#10;### [메인 메뉴 목록]&#10;**메뉴 구성**:&#10;```kotlin&#10;val menuItems = listOf(&#10;    &quot;금주&quot; to Icons.Default.PlayArrow,&#10;    &quot;기록&quot; to Icons.Default.List,&#10;    &quot;레벨&quot; to Icons.Default.Star&#10;)&#10;```&#10;&#10;1. **금주**&#10;   - **아이콘**: Icons.Default.PlayArrow (▶️)&#10;   - **네비게이션 로직**: &#10;     - 금주 미시작/완료: StartActivity (목표 설정)&#10;     - 금주 진행중: StatusActivity (진행 상황)&#10;   - **판단 기준**: SharedPreferences의 &quot;start_time&quot;, &quot;timer_completed&quot; 값&#10;&#10;2. **기록**&#10;   - **아이콘**: Icons.Default.List (목록)&#10;   - **이동**: RecordsActivity&#10;&#10;3. **레벨**&#10;   - **아이콘**: Icons.Default.Star (별)&#10;   - **이동**: LevelActivity&#10;&#10;### [설정 구분선]&#10;- **타입**: HorizontalDivider&#10;- **여백**: 상하 8dp 패딩&#10;&#10;### [설정 메뉴 목록]&#10;**설정 구성**:&#10;```kotlin&#10;val settingsItems = listOf(&#10;    &quot;설정&quot; to Icons.Default.Settings,&#10;    &quot;테스트&quot; to Icons.Default.Build&#10;)&#10;```&#10;&#10;1. **설정**&#10;   - **아이콘**: Icons.Default.Settings (⚙️)&#10;   - **이동**: TestActivity&#10;&#10;2. **테스트**&#10;   - **아이콘**: Icons.Default.Build ()&#10;   - **이동**: TestActivity&#10;   - **용도**: 개발자/테스트용 기능&#10;&#10;---&#10;&#10;## 2. 상세 UI 스펙&#10;&#10;### (1) 전체 레이아웃&#10;```kotlin&#10;Column(&#10;    modifier = Modifier&#10;        .fillMaxWidth()&#10;        .padding(16.dp),&#10;    horizontalAlignment = Alignment.Start&#10;)&#10;```&#10;&#10;### (2) 아바타 영역&#10;```kotlin&#10;Box(&#10;    modifier = Modifier&#10;        .width(80.dp)&#10;        .height(72.dp)&#10;        .align(Alignment.Start)&#10;        .padding(start = 8.dp)&#10;) {&#10;    Surface(&#10;        shape = CircleShape,&#10;        color = Color(0xFF888888),&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Person,&#10;            contentDescription = &quot;아바타&quot;,&#10;            tint = Color.White,&#10;            modifier = Modifier.size(40.dp).wrapContentSize(Alignment.Center)&#10;        )&#10;    }&#10;}&#10;```&#10;&#10;### (3) 메뉴 아이템 구조&#10;```kotlin&#10;Row(&#10;    modifier = Modifier&#10;        .fillMaxWidth()&#10;        .clickable { onItemSelected(title) }&#10;        .padding(vertical = 12.dp, horizontal = 8.dp),&#10;    verticalAlignment = Alignment.CenterVertically&#10;) {&#10;    Icon(&#10;        imageVector = icon,&#10;        contentDescription = title,&#10;        modifier = Modifier.size(24.dp)&#10;    )&#10;    Spacer(modifier = Modifier.width(16.dp))&#10;    Text(&#10;        text = title,&#10;        fontSize = 16.sp&#10;    )&#10;}&#10;```&#10;&#10;---&#10;&#10;## 3. 색상 시스템&#10;&#10;### (1) 전체 색상 팔레트&#10;```kotlin&#10;// 메뉴 배경&#10;drawerContainerColor = Color.White&#10;modifier = Modifier.background(Color.White)&#10;&#10;// 아바타&#10;아바타 배경: Color(0xFF888888) // 진한 회색&#10;아바타 아이콘: Color.White // 흰색&#10;&#10;// 텍스트&#10;별명: Color.Black (기본값)&#10;메뉴 텍스트: Color.Black (기본값)&#10;&#10;// 아이콘&#10;메뉴 아이콘: Color.Black (기본값)&#10;&#10;// 구분선&#10;구분선: Material3 기본 색상 (연한 회색)&#10;```&#10;&#10;---&#10;&#10;## 4. 상호작용 및 네비게이션&#10;&#10;### (1) 메뉴 클릭 처리&#10;```kotlin&#10;private fun handleMenuSelection(menuItem: String) {&#10;    when (menuItem) {&#10;        &quot;금주&quot; -&gt; {&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            val startTime = sharedPref.getLong(&quot;start_time&quot;, 0L)&#10;            val timerCompleted = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;            if (startTime == 0L || timerCompleted) {&#10;                // StartActivity로 이동 (목표 설정)&#10;                if (this !is StartActivity) {&#10;                    navigateToActivity(StartActivity::class.java)&#10;                }&#10;            } else {&#10;                // StatusActivity로 이동 (진행 상황)&#10;                if (this !is StatusActivity) {&#10;                    navigateToActivity(StatusActivity::class.java)&#10;                }&#10;            }&#10;        }&#10;        &quot;기록&quot; -&gt; RecordsActivity&#10;        &quot;레벨&quot; -&gt; LevelActivity  &#10;        &quot;설정&quot; -&gt; TestActivity&#10;        &quot;테스트&quot; -&gt; TestActivity&#10;    }&#10;}&#10;```&#10;&#10;### (2) 화면 전환&#10;- **방식**: Intent를 통한 Activity 전환&#10;- **효과**: 전환 애니메이션 없음 (즉시 전환)&#10;- **중복 방지**: 현재 Activity와 동일한 경우 이동하지 않음&#10;&#10;---&#10;&#10;## 5. 레이아웃 구조도&#10;&#10;### 시각적 레이아웃&#10;```&#10;┌─────────────────────────────────┐&#10;│                                 │&#10;│    ●  알중이1                   │ ← 80×72dp 원형 + 18sp Bold&#10;│                                 │&#10;├─────────────────────────────────┤ ← HorizontalDivider (12dp 여백)&#10;│                                 │&#10;│ ▶️ 금주                        │ ← 24dp 아이콘 + 16sp 텍스트&#10;│  기록                        │&#10;│ ⭐ 레벨                        │&#10;│                                 │&#10;├─────────────────────────────────┤ ← HorizontalDivider (8dp 여백)&#10;│                                 │&#10;│ ⚙️ 설정                        │&#10;│  테스트                      │&#10;│                                 │&#10;└─────────────────────────────────┘&#10;```&#10;&#10;### 컴포넌트 계층&#10;```kotlin&#10;ModalNavigationDrawer {&#10;    ModalDrawerSheet(Color.White) {&#10;        DrawerMenu(&#10;            nickname = &quot;알중이1&quot;,&#10;            onNicknameClick = {},&#10;            onItemSelected = { handleMenuSelection(it) }&#10;        ) {&#10;            Column(16dp padding) {&#10;                // 아바타 + 별명 영역&#10;                Box(80×72dp) { CircleShape Surface + Person Icon }&#10;                Text(&quot;알중이1&quot;, 18sp Bold)&#10;                &#10;                // 첫 번째 구분선&#10;                HorizontalDivider(12dp vertical padding)&#10;                &#10;                // 메인 메뉴&#10;                forEach(menuItems) { &#10;                    Row { Icon(24dp) + Text(16sp) }&#10;                }&#10;                &#10;                // 두 번째 구분선  &#10;                HorizontalDivider(8dp vertical padding)&#10;                &#10;                // 설정 메뉴&#10;                forEach(settingsItems) {&#10;                    Row { Icon(24dp) + Text(16sp) }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;```&#10;&#10;---&#10;&#10;## 6. 데이터 연동&#10;&#10;### (1) SharedPreferences 키&#10;```kotlin&#10;// 금주 상태 판단용&#10;&quot;start_time&quot;: Long (금주 시작 시간, 0L이면 미시작)&#10;&quot;timer_completed&quot;: Boolean (금주 완료 여부)&#10;&#10;// 사용자 설정 (미래 확장용)&#10;&quot;nickname&quot;: String (사용자 별명, 기본값: &quot;알중이1&quot;)&#10;```&#10;&#10;### (2) 상태 판단 로직&#10;```kotlin&#10;val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;val startTime = sharedPref.getLong(&quot;start_time&quot;, 0L)&#10;val timerCompleted = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;// 금주 미시작 또는 완료 상태&#10;if (startTime == 0L || timerCompleted) {&#10;    // StartActivity (목표 설정 화면)&#10;} else {&#10;    // StatusActivity (진행 상황 화면)  &#10;}&#10;```&#10;&#10;---&#10;&#10;## 7. 구현 시 주의사항&#10;&#10;### (1) Material3 컴포넌트 사용&#10;- **ModalNavigationDrawer**: 최신 Material3 권장 방식&#10;- **HorizontalDivider**: Divider 대신 사용 (deprecated 방지)&#10;- **Icons.Default.***: Material Icons 활용&#10;&#10;### (2) 상태 관리&#10;```kotlin&#10;val drawerState = rememberDrawerState(DrawerValue.Closed)&#10;val scope = rememberCoroutineScope()&#10;&#10;// 메뉴 클릭 시 Drawer 자동 닫기&#10;scope.launch { drawerState.close() }&#10;```&#10;&#10;### (3) 접근성&#10;- **contentDescription**: 모든 아이콘에 의미 있는 설명 추가&#10;- **클릭 영역**: 충분한 터치 영역 확보 (vertical 12dp, horizontal 8dp 패딩)&#10;- **색상 대비**: 흰색 배경 + 검은색 텍스트로 높은 가독성&#10;&#10;---&#10;&#10;## 8. 프리뷰 코드&#10;&#10;### Compose 프리뷰&#10;```kotlin&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewDrawerMenu() {&#10;    MaterialTheme {&#10;        ModalNavigationDrawer(&#10;            drawerState = rememberDrawerState(DrawerValue.Open),&#10;            drawerContent = {&#10;                ModalDrawerSheet {&#10;                    DrawerMenu(&#10;                        nickname = &quot;알중이1&quot;,&#10;                        onNicknameClick = {},&#10;                        onItemSelected = {}&#10;                    )&#10;                }&#10;            }&#10;        ) {&#10;            Box(modifier = Modifier.fillMaxSize()) {}&#10;        }&#10;    }&#10;}&#10;```&#10;&#10;---&#10;&#10;## 9. 향후 확장 가능성&#10;&#10;### (1) 별명 변경 기능&#10;- AlertDialog + TextField로 별명 입력 받기&#10;- SharedPreferences에 저장 후 UI 업데이트&#10;&#10;### (2) 아바타 커스터마이징  &#10;- 여러 아바타 이미지 선택 기능&#10;- 색상 테마 변경 기능&#10;&#10;### (3) 메뉴 개인화&#10;- 자주 사용하는 메뉴 상단 고정&#10;- 메뉴 순서 커스터마이징&#10;&#10;---&#10;&#10;이 기획서는 실제 구현된 BaseActivity.kt의 DrawerMenu 코드를 정확히 분석하여 작성되었으며, 동일한 햄버거 메뉴를 재구현할 때 완벽한 참고 문서로 활용할 수 있습니다." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/assets/start_activity.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/assets/start_activity.md" />
              <option name="updatedContent" value="# 금주 목표 설정 화면 상세 기획서&#10;&#10;본 기획서는 사용자가 금주 목표 일수를 설정하는 시작 화면을 설계합니다.&#10;Jetpack Compose 기반으로 구현하며, 미니멀하고 직관적인 UX를 제공합니다.&#10;&#10;---&#10;&#10;## 1. 화면 개요&#10;&#10;### 목적&#10;- 사용자가 금주 목표 일수를 간단하게 설정&#10;- 설정 완료 후 금주 타이머 시작&#10;- 최소한의 텍스트와 직관적인 인터페이션으로 사용 편의성 극대화&#10;&#10;### 화면 진입 조건&#10;- 앱 최초 실행 시&#10;- 햄버거 메뉴에서 &quot;금주&quot; 선택 시 (금주가 시작되지 않았거나 완료된 경우)&#10;- 기존 금주가 완료된 후 새로운 목표 설정 시&#10;&#10;---&#10;&#10;## 2. 화면 구성&#10;&#10;### (1) 상단바 (BaseActivity 공통)&#10;- **햄버거 메뉴**: 좌측 상단&#10;- **화면 제목**: &quot;금주 설정&quot;&#10;- **배경색**: 흰색 (#FFFFFF)&#10;- **구분선**: 하단에 연한 회색 1dp 라인&#10;&#10;### (2) 메인 컨텐츠 영역&#10;**전체 레이아웃**:&#10;- **배경색**: 흰색 (#FFFFFF)&#10;- **패딩**: 좌우 32dp&#10;- **정렬**: 세로 중앙 정렬 (verticalArrangement = Arrangement.Top)&#10;- **상단 여백**: 80dp (상단바 아래)&#10;&#10;#### A. 상단 아이콘 영역&#10;```&#10; (잎사귀 이모지)&#10;- 크기: 100sp&#10;- 위치: 중앙 정렬&#10;- 하단 여백: 60dp&#10;```&#10;&#10;#### B. 목표 설정 영역&#10;**&quot;목표 설정&quot; 라벨**:&#10;- **텍스트**: &quot;목표 설정&quot;&#10;- **크기**: 24sp&#10;- **색상**: 회색 (Color.Gray)&#10;- **하단 여백**: 24dp&#10;&#10;**숫자 입력 필드**:&#10;- **기본값**: &quot;0&quot; (사용자가 터치하면 자동으로 새 숫자로 교체)&#10;- **크기**: 48sp, Bold, 중앙 정렬&#10;- **너비**: 150dp (3자리 숫자에 적합한 크기)&#10;- **색상**: 유효한 값(1 이상)이면 MaterialTheme.colorScheme.primary, 그 외 검은색&#10;- **키보드**: 숫자 키패드만 표시&#10;- **하단 여백**: 8dp&#10;&#10;**입력 검증 로직**:&#10;```kotlin&#10;onValueChange = { newValue -&gt;&#10;    val filteredValue = newValue.filter { it.isDigit() }&#10;    inputText = if (filteredValue.length &gt; 1 &amp;&amp; filteredValue.startsWith(&quot;0&quot;)) {&#10;        filteredValue.substring(1) // &quot;02&quot; → &quot;2&quot;&#10;    } else {&#10;        filteredValue&#10;    }&#10;}&#10;```&#10;&#10;**밑줄**:&#10;- **두께**: 2dp&#10;- **색상**: 검은색 (Color.Black)&#10;- **스타일**: 직선 (StrokeCap.Square)&#10;- **너비**: 입력 필드와 동일 (150dp)&#10;&#10;**단위 표시**:&#10;- **텍스트**: &quot;일&quot;&#10;- **크기**: 20sp&#10;- **색상**: 회색 (Color.Gray)&#10;- **위치**: 밑줄 아래 16dp&#10;- **정렬**: 중앙&#10;&#10;#### C. 시작 버튼 영역&#10;**FloatingActionButton**:&#10;- **크기**: 100dp (직경)&#10;- **모양**: 완전한 원형 (CircleShape)&#10;- **아이콘**: PlayArrow (▶️)&#10;- **아이콘 크기**: 50dp&#10;- **아이콘 색상**: 흰색&#10;- **배경색**: &#10;  - 유효한 값(1 이상): MaterialTheme.colorScheme.primary&#10;  - 무효한 값: 회색 (Color.Gray)&#10;- **상단 여백**: 60dp&#10;&#10;---&#10;&#10;## 3. 상세 UI 스펙&#10;&#10;### (1) 색상 시스템&#10;```kotlin&#10;// 주요 색상&#10;- 배경: Color.White (#FFFFFF)&#10;- 텍스트 라벨: Color.Gray&#10;- 입력 숫자 (유효): MaterialTheme.colorScheme.primary&#10;- 입력 숫자 (무효): Color.Black&#10;- 밑줄: Color.Black&#10;- 버튼 (활성): MaterialTheme.colorScheme.primary&#10;- 버튼 (비활성): Color.Gray&#10;```&#10;&#10;### (2) 타이포그래피&#10;```kotlin&#10;// 텍스트 크기 및 스타일&#10;- 아이콘: 100sp&#10;- &quot;목표 설정&quot;: 24sp, Normal&#10;- 입력 숫자: 48sp, Bold, Center&#10;- 단위 &quot;일&quot;: 20sp, Normal&#10;```&#10;&#10;### (3) 여백 및 간격&#10;```kotlin&#10;// 주요 spacing 값&#10;- 화면 좌우 패딩: 32dp&#10;- 상단 여백: 80dp (상단바 제외)&#10;- 아이콘 하단: 60dp&#10;- 라벨 하단: 24dp&#10;- 입력 필드 하단: 8dp&#10;- 단위 상단: 16dp&#10;- 버튼 상단: 60dp&#10;```&#10;&#10;### (4) 컴포넌트 크기&#10;```kotlin&#10;// 주요 컴포넌트 크기&#10;- 입력 필드 너비: 150dp&#10;- 밑줄 두께: 2dp&#10;- 시작 버튼: 100dp (직경)&#10;- 버튼 아이콘: 50dp&#10;```&#10;&#10;---&#10;&#10;## 4. 사용자 상호작용&#10;&#10;### (1) 입력 동작&#10;**초기 상태**: &quot;0&quot; 표시&#10;**사용자가 숫자 입력 시**:&#10;- &quot;0&quot; + &quot;2&quot; → &quot;2&quot; (앞의 0 자동 제거)&#10;- &quot;1&quot; + &quot;5&quot; → &quot;15&quot; (정상 연결)&#10;- 숫자가 아닌 문자는 자동 필터링&#10;&#10;### (2) 시각적 피드백&#10;**유효한 값(1 이상)**:&#10;- 입력 숫자가 파란색으로 변경&#10;- 시작 버튼이 파란색으로 활성화&#10;- 밑줄은 항상 검은색 유지&#10;&#10;**무효한 값(0 또는 빈값)**:&#10;- 입력 숫자가 검은색&#10;- 시작 버튼이 회색으로 비활성화&#10;&#10;### (3) 버튼 동작&#10;**시작 버튼 클릭 시**:&#10;```kotlin&#10;onClick = {&#10;    val targetTime = inputText.toIntOrNull() ?: 0&#10;    if (targetTime &gt; 0) {&#10;        // SharedPreferences에 저장&#10;        val sharedPref = context.getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        sharedPref.edit().apply {&#10;            putInt(&quot;target_days&quot;, targetTime)&#10;            putLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;            putBoolean(&quot;timer_completed&quot;, false)&#10;            apply()&#10;        }&#10;        // StatusActivity로 이동&#10;        val intent = Intent(context, StatusActivity::class.java)&#10;        context.startActivity(intent)&#10;    }&#10;}&#10;```&#10;&#10;---&#10;&#10;## 5. 레이아웃 구조&#10;&#10;### Jetpack Compose 컴포넌트 계층&#10;```kotlin&#10;BaseScreen { // 공통 네비게이션 제공&#10;    Column( // 메인 컨테이너&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(32.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally,&#10;        verticalArrangement = Arrangement.Top&#10;    ) {&#10;        Spacer(80.dp) // 상단 여백&#10;        &#10;        Text(&quot;&quot;, 100.sp) // 아이콘&#10;        &#10;        Column { // 입력 영역&#10;            Text(&quot;목표 설정&quot;, 24.sp)&#10;            Box(150.dp width) {&#10;                Column {&#10;                    BasicTextField(...) // 숫자 입력&#10;                    Canvas { drawLine(...) } // 밑줄&#10;                }&#10;            }&#10;            Text(&quot;일&quot;, 20.sp) // 단위&#10;        }&#10;        &#10;        Spacer(60.dp) // 버튼 위 여백&#10;        &#10;        FloatingActionButton(...) // 시작 버튼&#10;    }&#10;}&#10;```&#10;&#10;---&#10;&#10;## 6. 기술 구현 요구사항&#10;&#10;### (1) Jetpack Compose 컴포넌트&#10;- **BaseActivity**: 공통 네비게이션 제공&#10;- **BasicTextField**: 커스텀 숫자 입력 필드&#10;- **Canvas**: 밑줄 그리기&#10;- **FloatingActionButton**: 원형 시작 버튼&#10;&#10;### (2) 상태 관리&#10;```kotlin&#10;var inputText by remember { mutableStateOf(&quot;0&quot;) }&#10;val isValid = inputText.toIntOrNull()?.let { it &gt; 0 } ?: false&#10;```&#10;&#10;### (3) 데이터 저장&#10;- **SharedPreferences**: &quot;user_settings&quot;&#10;- **저장 항목**:&#10;  - `target_days`: 목표 일수 (Int)&#10;  - `start_time`: 시작 시간 (Long, currentTimeMillis)&#10;  - `timer_completed`: 완료 여부 (Boolean, false)&#10;&#10;### (4) 네비게이션&#10;- **완료 후 이동**: StatusActivity (금주 진행 화면)&#10;- **전환 효과**: 없음 (즉시 전환)&#10;&#10;---&#10;&#10;## 7. UI 예시 레이아웃&#10;&#10;```&#10;┌─────────────────────────────────┐&#10;│ ☰  금주 설정                     │ ← 상단바&#10;├─────────────────────────────────┤&#10;│                                 │&#10;│                                 │&#10;│                               │ ← 100sp 아이콘&#10;│                                 │&#10;│                                 │&#10;│         목표 설정               │ ← 24sp 라벨&#10;│                                 │&#10;│           30                    │ ← 48sp Bold 숫자&#10;│         ──────                  │ ← 검은색 밑줄&#10;│           일                    │ ← 20sp 단위&#10;│                                 │&#10;│                                 │&#10;│           ● ▶                   │ ← 100dp 원형 버튼&#10;│                                 │&#10;│                                 │&#10;└─────────────────────────────────┘&#10;```&#10;&#10;---&#10;&#10;## 8. 프리뷰 및 테스트&#10;&#10;### (1) Compose 프리뷰&#10;```kotlin&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewStartScreen() {&#10;    BaseScreen {&#10;        StartScreen()&#10;    }&#10;}&#10;```&#10;&#10;### (2) 테스트 케이스&#10;- [ ] 초기값 &quot;0&quot; 표시 확인&#10;- [ ] 숫자 입력 시 앞의 0 제거 동작&#10;- [ ] 유효/무효값에 따른 색상 변화&#10;- [ ] 버튼 활성화/비활성화 상태&#10;- [ ] SharedPreferences 저장 확인&#10;- [ ] StatusActivity 전환 확인&#10;&#10;---&#10;&#10;## 9. 접근성 고려사항&#10;&#10;### (1) 시각적 접근성&#10;- **충분한 색상 대비**: 검은색 텍스트 + 흰색 배경&#10;- **큰 터치 영역**: 100dp 버튼으로 터치하기 쉬움&#10;- **명확한 시각적 피드백**: 색상 변화로 상태 표시&#10;&#10;### (2) 사용성&#10;- **직관적인 플레이 버튼**: 보편적인 ▶️ 아이콘 사용&#10;- **최소한의 텍스트**: &quot;목표 설정&quot;, &quot;일&quot;만 표시&#10;- **자동 입력 개선**: 앞의 0 자동 제거로 자연스러운 입력&#10;&#10;---&#10;&#10;이 기획서는 실제 구현된 StartActivity.kt 코드를 바탕으로 작성되었으며, 동일한 화면을 재구현할 때 완벽한 참고 문서로 활용할 수 있습니다." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import androidx.activity.ComponentActivity&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : ComponentActivity() {&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    @Composable&#10;    protected fun BaseScreen(content: @Composable () -&gt; Unit) {&#10;        val drawerState = rememberDrawerState(DrawerValue.Closed)&#10;        val scope = rememberCoroutineScope()&#10;&#10;        ModalNavigationDrawer(&#10;            drawerState = drawerState,&#10;            drawerContent = {&#10;                ModalDrawerSheet(&#10;                    modifier = Modifier.background(Color.White),&#10;                    drawerContainerColor = Color.White&#10;                ) {&#10;                    DrawerMenu(&#10;                        nickname = &quot;알중이1&quot;,&#10;                        onNicknameClick = {},&#10;                        onItemSelected = { menuItem -&gt;&#10;                            scope.launch { drawerState.close() }&#10;                            handleMenuSelection(menuItem)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        ) {&#10;            Scaffold(&#10;                topBar = {&#10;                    Column {&#10;                        TopAppBar(&#10;                            title = { Text(getScreenTitle(), color = Color.Black) },&#10;                            colors = TopAppBarDefaults.topAppBarColors(&#10;                                containerColor = Color.White,&#10;                                titleContentColor = Color.Black,&#10;                                navigationIconContentColor = Color.Black,&#10;                                actionIconContentColor = Color.Black&#10;                            ),&#10;                            navigationIcon = {&#10;                                IconButton(&#10;                                    onClick = {&#10;                                        scope.launch {&#10;                                            drawerState.open()&#10;                                        }&#10;                                    }&#10;                                ) {&#10;                                    Icon(&#10;                                        imageVector = Icons.Default.Menu,&#10;                                        contentDescription = &quot;메뉴&quot;,&#10;                                        tint = Color.Black&#10;                                    )&#10;                                }&#10;                            }&#10;                        )&#10;                        HorizontalDivider(&#10;                            modifier = Modifier.fillMaxWidth().height(1.dp),&#10;                            color = Color.LightGray&#10;                        )&#10;                    }&#10;                }&#10;            ) { paddingValues -&gt;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .background(Color.White)&#10;                        .padding(paddingValues)&#10;                ) {&#10;                    content()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun handleMenuSelection(menuItem: String) {&#10;        when (menuItem) {&#10;            &quot;금주&quot; -&gt; {&#10;                val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, 0L)&#10;                val timerCompleted = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;                if (startTime == 0L || timerCompleted) {&#10;                    // 금주가 시작되지 않았거나 완료된 경우 StartActivity로 이동&#10;                    if (this !is StartActivity) {&#10;                        navigateToActivity(StartActivity::class.java)&#10;                    }&#10;                } else {&#10;                    // 금주 진행 중인 경우 StatusActivity로 이동&#10;                    if (this !is StatusActivity) {&#10;                        navigateToActivity(StatusActivity::class.java)&#10;                    }&#10;                }&#10;            }&#10;            &quot;기록&quot; -&gt; {&#10;                if (this !is RecordsActivity) {&#10;                    navigateToActivity(RecordsActivity::class.java)&#10;                }&#10;            }&#10;            &quot;레벨&quot; -&gt; {&#10;                if (this !is LevelActivity) {&#10;                    navigateToActivity(LevelActivity::class.java)&#10;                }&#10;            }&#10;            &quot;설정&quot; -&gt; {&#10;                if (this !is TestActivity) {&#10;                    navigateToActivity(TestActivity::class.java)&#10;                }&#10;            }&#10;            &quot;테스트&quot; -&gt; {&#10;                if (this !is TestActivity) {&#10;                    navigateToActivity(TestActivity::class.java)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 효과 없이 액티비티 전환&#10;     */&#10;    private fun navigateToActivity(activityClass: Class&lt;*&gt;) {&#10;        val intent = Intent(this, activityClass)&#10;        startActivity(intent)&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현해야 할 화면 제목&#10;     */&#10;    protected abstract fun getScreenTitle(): String&#10;}&#10;&#10;@Composable&#10;fun DrawerMenu(&#10;    nickname: String,&#10;    onNicknameClick: () -&gt; Unit,&#10;    onItemSelected: (String) -&gt; Unit&#10;) {&#10;    val menuItems = listOf(&#10;        &quot;금주&quot; to Icons.Default.PlayArrow,&#10;        &quot;기록&quot; to Icons.Default.List,&#10;        &quot;레벨&quot; to Icons.Default.Star&#10;    )&#10;    val settingsItems = listOf(&#10;        &quot;설정&quot; to Icons.Default.Settings,&#10;        &quot;테스트&quot; to Icons.Default.Build&#10;    )&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.Start&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .width(80.dp)&#10;                .height(72.dp)&#10;                .align(Alignment.Start)&#10;                .padding(start = 8.dp)&#10;        ) {&#10;            Surface(&#10;                shape = CircleShape,&#10;                color = Color(0xFF888888),&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Person,&#10;                    contentDescription = &quot;아바타&quot;,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(40.dp).wrapContentSize(Alignment.Center)&#10;                )&#10;            }&#10;        }&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        Text(&#10;            text = nickname,&#10;            fontSize = 18.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier&#10;                .align(Alignment.Start)&#10;                .padding(start = 8.dp)&#10;                .clickable { onNicknameClick() }&#10;        )&#10;        HorizontalDivider(modifier = Modifier.padding(vertical = 12.dp))&#10;        menuItems.forEach { (title, icon) -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { onItemSelected(title) }&#10;                    .padding(vertical = 12.dp, horizontal = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;        HorizontalDivider(modifier = Modifier.padding(vertical = 8.dp))&#10;        settingsItems.forEach { (title, icon) -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { onItemSelected(title) }&#10;                    .padding(vertical = 12.dp, horizontal = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewDrawerMenu() {&#10;    MaterialTheme {&#10;        ModalNavigationDrawer(&#10;            drawerState = rememberDrawerState(DrawerValue.Open),&#10;            drawerContent = {&#10;                ModalDrawerSheet {&#10;                    DrawerMenu(&#10;                        nickname = &quot;알중이1&quot;,&#10;                        onNicknameClick = {},&#10;                        onItemSelected = {}&#10;                    )&#10;                }&#10;            }&#10;        ) {&#10;            Box(modifier = Modifier.fillMaxSize()) {}&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#13;&#10;&#13;&#10;import android.content.Intent&#13;&#10;import androidx.activity.ComponentActivity&#13;&#10;import androidx.compose.foundation.background&#13;&#10;import androidx.compose.foundation.clickable&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.foundation.shape.CircleShape&#13;&#10;import androidx.compose.material.icons.Icons&#13;&#10;import androidx.compose.material.icons.filled.*&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.*&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.graphics.Color&#13;&#10;import androidx.compose.ui.platform.LocalContext&#13;&#10;import androidx.compose.ui.text.font.FontWeight&#13;&#10;import androidx.compose.ui.tooling.preview.Preview&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.compose.ui.unit.sp&#13;&#10;import kotlinx.coroutines.launch&#13;&#10;&#13;&#10;/**&#13;&#10; * 모든 액티비티의 베이스 클래스&#13;&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#13;&#10; */&#13;&#10;abstract class BaseActivity : ComponentActivity() {&#13;&#10;&#13;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#13;&#10;    @Composable&#13;&#10;    protected fun BaseScreen(content: @Composable () -&gt; Unit) {&#13;&#10;        val drawerState = rememberDrawerState(DrawerValue.Closed)&#13;&#10;        val scope = rememberCoroutineScope()&#13;&#10;&#13;&#10;        ModalNavigationDrawer(&#13;&#10;            drawerState = drawerState,&#13;&#10;            drawerContent = {&#13;&#10;                ModalDrawerSheet(&#13;&#10;                    modifier = Modifier.background(Color.White),&#13;&#10;                    drawerContainerColor = Color.White&#13;&#10;                ) {&#13;&#10;                    DrawerMenu(&#13;&#10;                        nickname = &quot;알중이1&quot;,&#13;&#10;                        onNicknameClick = {},&#13;&#10;                        onItemSelected = { menuItem -&gt;&#13;&#10;                            scope.launch { drawerState.close() }&#13;&#10;                            handleMenuSelection(menuItem)&#13;&#10;                        }&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        ) {&#13;&#10;            Scaffold(&#13;&#10;                topBar = {&#13;&#10;                    Column {&#13;&#10;                        TopAppBar(&#13;&#10;                            title = { Text(getScreenTitle(), color = Color.Black) },&#13;&#10;                            colors = TopAppBarDefaults.topAppBarColors(&#13;&#10;                                containerColor = Color.White,&#13;&#10;                                titleContentColor = Color.Black,&#13;&#10;                                navigationIconContentColor = Color.Black,&#13;&#10;                                actionIconContentColor = Color.Black&#13;&#10;                            ),&#13;&#10;                            navigationIcon = {&#13;&#10;                                IconButton(&#13;&#10;                                    onClick = {&#13;&#10;                                        scope.launch {&#13;&#10;                                            drawerState.open()&#13;&#10;                                        }&#13;&#10;                                    }&#13;&#10;                                ) {&#13;&#10;                                    Icon(&#13;&#10;                                        imageVector = Icons.Default.Menu,&#13;&#10;                                        contentDescription = &quot;메뉴&quot;,&#13;&#10;                                        tint = Color.Black&#13;&#10;                                    )&#13;&#10;                                }&#13;&#10;                            }&#13;&#10;                        )&#13;&#10;                        HorizontalDivider(&#13;&#10;                            modifier = Modifier.fillMaxWidth().height(1.dp),&#13;&#10;                            color = Color.LightGray&#13;&#10;                        )&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            ) { paddingValues -&gt;&#13;&#10;                Box(&#13;&#10;                    modifier = Modifier&#13;&#10;                        .fillMaxSize()&#13;&#10;                        .background(Color.White)&#13;&#10;                        .padding(paddingValues)&#13;&#10;                ) {&#13;&#10;                    content()&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun handleMenuSelection(menuItem: String) {&#13;&#10;        when (menuItem) {&#13;&#10;            &quot;금주&quot; -&gt; {&#13;&#10;                val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#13;&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, 0L)&#13;&#10;                val timerCompleted = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#13;&#10;                if (startTime == 0L || timerCompleted) {&#13;&#10;                    // 금주가 시작되지 않았거나 완료된 경우 StartActivity로 이동&#13;&#10;                    if (this !is StartActivity) {&#13;&#10;                        navigateToActivity(StartActivity::class.java)&#13;&#10;                    }&#13;&#10;                } else {&#13;&#10;                    // 금주 진행 중인 경우 StatusActivity로 이동&#13;&#10;                    if (this !is StatusActivity) {&#13;&#10;                        navigateToActivity(StatusActivity::class.java)&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;            &quot;기록&quot; -&gt; {&#13;&#10;                if (this !is RecordsActivity) {&#13;&#10;                    navigateToActivity(RecordsActivity::class.java)&#13;&#10;                }&#13;&#10;            }&#13;&#10;            &quot;레벨&quot; -&gt; {&#13;&#10;                if (this !is LevelActivity) {&#13;&#10;                    navigateToActivity(LevelActivity::class.java)&#13;&#10;                }&#13;&#10;            }&#13;&#10;            &quot;설정&quot; -&gt; {&#13;&#10;                if (this !is SettingsActivity) {&#13;&#10;                    navigateToActivity(SettingsActivity::class.java)&#13;&#10;                }&#13;&#10;            }&#13;&#10;            &quot;테스트&quot; -&gt; {&#13;&#10;                if (this !is SettingsActivity) {&#13;&#10;                    navigateToActivity(SettingsActivity::class.java)&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 효과 없이 액티비티 전환&#13;&#10;     */&#13;&#10;    private fun navigateToActivity(activityClass: Class&lt;*&gt;) {&#13;&#10;        val intent = Intent(this, activityClass)&#13;&#10;        startActivity(intent)&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 각 액티비티에서 구현해야 할 화면 제목&#13;&#10;     */&#13;&#10;    protected abstract fun getScreenTitle(): String&#13;&#10;}&#13;&#10;&#13;&#10;@Composable&#13;&#10;fun DrawerMenu(&#13;&#10;    nickname: String,&#13;&#10;    onNicknameClick: () -&gt; Unit,&#13;&#10;    onItemSelected: (String) -&gt; Unit&#13;&#10;) {&#13;&#10;    val menuItems = listOf(&#13;&#10;        &quot;금주&quot; to Icons.Default.PlayArrow,&#13;&#10;        &quot;기록&quot; to Icons.Default.List,&#13;&#10;        &quot;레벨&quot; to Icons.Default.Star&#13;&#10;    )&#13;&#10;    val settingsItems = listOf(&#13;&#10;        &quot;설정&quot; to Icons.Default.Settings,&#13;&#10;        &quot;테스트&quot; to Icons.Default.Build&#13;&#10;    )&#13;&#10;&#13;&#10;    Column(&#13;&#10;        modifier = Modifier&#13;&#10;            .fillMaxWidth()&#13;&#10;            .padding(16.dp),&#13;&#10;        horizontalAlignment = Alignment.Start&#13;&#10;    ) {&#13;&#10;        Box(&#13;&#10;            modifier = Modifier&#13;&#10;                .width(80.dp)&#13;&#10;                .height(72.dp)&#13;&#10;                .align(Alignment.Start)&#13;&#10;                .padding(start = 8.dp)&#13;&#10;        ) {&#13;&#10;            Surface(&#13;&#10;                shape = CircleShape,&#13;&#10;                color = Color(0xFF888888),&#13;&#10;                modifier = Modifier.fillMaxSize()&#13;&#10;            ) {&#13;&#10;                Icon(&#13;&#10;                    imageVector = Icons.Default.Person,&#13;&#10;                    contentDescription = &quot;아바타&quot;,&#13;&#10;                    tint = Color.White,&#13;&#10;                    modifier = Modifier.size(40.dp).wrapContentSize(Alignment.Center)&#13;&#10;                )&#13;&#10;            }&#13;&#10;        }&#13;&#10;        Spacer(modifier = Modifier.height(8.dp))&#13;&#10;        Text(&#13;&#10;            text = nickname,&#13;&#10;            fontSize = 18.sp,&#13;&#10;            fontWeight = FontWeight.Bold,&#13;&#10;            modifier = Modifier&#13;&#10;                .align(Alignment.Start)&#13;&#10;                .padding(start = 8.dp)&#13;&#10;                .clickable { onNicknameClick() }&#13;&#10;        )&#13;&#10;        HorizontalDivider(modifier = Modifier.padding(vertical = 12.dp))&#13;&#10;        menuItems.forEach { (title, icon) -&gt;&#13;&#10;            Row(&#13;&#10;                modifier = Modifier&#13;&#10;                    .fillMaxWidth()&#13;&#10;                    .clickable { onItemSelected(title) }&#13;&#10;                    .padding(vertical = 12.dp, horizontal = 8.dp),&#13;&#10;                verticalAlignment = Alignment.CenterVertically&#13;&#10;            ) {&#13;&#10;                Icon(&#13;&#10;                    imageVector = icon,&#13;&#10;                    contentDescription = title,&#13;&#10;                    modifier = Modifier.size(24.dp)&#13;&#10;                )&#13;&#10;                Spacer(modifier = Modifier.width(16.dp))&#13;&#10;                Text(&#13;&#10;                    text = title,&#13;&#10;                    fontSize = 16.sp&#13;&#10;                )&#13;&#10;            }&#13;&#10;        }&#13;&#10;        HorizontalDivider(modifier = Modifier.padding(vertical = 8.dp))&#13;&#10;        settingsItems.forEach { (title, icon) -&gt;&#13;&#10;            Row(&#13;&#10;                modifier = Modifier&#13;&#10;                    .fillMaxWidth()&#13;&#10;                    .clickable { onItemSelected(title) }&#13;&#10;                    .padding(vertical = 12.dp, horizontal = 8.dp),&#13;&#10;                verticalAlignment = Alignment.CenterVertically&#13;&#10;            ) {&#13;&#10;                Icon(&#13;&#10;                    imageVector = icon,&#13;&#10;                    contentDescription = title,&#13;&#10;                    modifier = Modifier.size(24.dp)&#13;&#10;                )&#13;&#10;                Spacer(modifier = Modifier.width(16.dp))&#13;&#10;                Text(&#13;&#10;                    text = title,&#13;&#10;                    fontSize = 16.sp&#13;&#10;                )&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;@Preview(showBackground = true)&#13;&#10;@Composable&#13;&#10;fun PreviewDrawerMenu() {&#13;&#10;    MaterialTheme {&#13;&#10;        ModalNavigationDrawer(&#13;&#10;            drawerState = rememberDrawerState(DrawerValue.Open),&#13;&#10;            drawerContent = {&#13;&#10;                ModalDrawerSheet {&#13;&#10;                    DrawerMenu(&#13;&#10;                        nickname = &quot;알중이1&quot;,&#13;&#10;                        onNicknameClick = {},&#13;&#10;                        onItemSelected = {}&#13;&#10;                    )&#13;&#10;                }&#13;&#10;            }&#13;&#10;        ) {&#13;&#10;            Box(modifier = Modifier.fillMaxSize()) {}&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/NoPasteEditText.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/NoPasteEditText.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.ClipboardManager&#10;import android.content.Context&#10;import android.util.AttributeSet&#10;import android.view.ActionMode&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import android.view.inputmethod.EditorInfo&#10;import android.view.inputmethod.InputConnection&#10;import android.widget.EditText&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;/**&#10; * 붙여넣기 기능이 비활성화된 커스텀 EditText&#10; */&#10;class NoPasteEditText : EditText {&#10;    constructor(context: Context) : super(context) {&#10;        init()&#10;    }&#10;&#10;    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs) {&#10;        init()&#10;    }&#10;&#10;    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {&#10;        init()&#10;    }&#10;&#10;    private fun init() {&#10;        // 길게 누르기 비활성화&#10;        isLongClickable = false&#10;&#10;        // 텍스트 선택 비활성화&#10;        setTextIsSelectable(false)&#10;&#10;        // 컨텍스트 메뉴 비활성화&#10;        customSelectionActionModeCallback = object : ActionMode.Callback {&#10;            override fun onCreateActionMode(mode: ActionMode?, menu: Menu?): Boolean = false&#10;            override fun onPrepareActionMode(mode: ActionMode?, menu: Menu?): Boolean = false&#10;            override fun onActionItemClicked(mode: ActionMode?, item: MenuItem?): Boolean = false&#10;            override fun onDestroyActionMode(mode: ActionMode?) {}&#10;        }&#10;    }&#10;&#10;    override fun onTextContextMenuItem(id: Int): Boolean {&#10;        // 모든 컨텍스트 메뉴 항목(붙여넣기, 복사 등) 차단&#10;        return false&#10;    }&#10;&#10;    override fun onCreateInputConnection(outAttrs: EditorInfo): InputConnection {&#10;        val connection = super.onCreateInputConnection(outAttrs)&#10;&#10;        // IME 옵션 설정&#10;        outAttrs.imeOptions = outAttrs.imeOptions or&#10;                EditorInfo.IME_FLAG_NO_EXTRACT_UI or&#10;                EditorInfo.IME_FLAG_NO_FULLSCREEN&#10;&#10;        return connection&#10;    }&#10;&#10;    // 붙여넣기 방지를 위해 모든 입력 시도를 추가로 검사&#10;    override fun onTextChanged(text: CharSequence?, start: Int, lengthBefore: Int, lengthAfter: Int) {&#10;        super.onTextChanged(text, start, lengthBefore, lengthAfter)&#10;&#10;        // 텍스트가 한 번에 여러 자리 추가되는 경우 (붙여넣기로 추정)&#10;        if (lengthAfter &gt; 1 &amp;&amp; lengthBefore == 0) {&#10;            val currentText = this.text.toString()&#10;            if (start == 0 &amp;&amp; currentText.length &gt; 1) {&#10;                // 마지막 숫자만 유지&#10;                setText(currentText.substring(currentText.length - 1))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Jetpack Compose 기반으로 UI를 완전히 전환한 경우, 이 파일은 더 이상 필요하지 않으므로 삭제해도 됩니다.&#10;// 만약 붙여넣기 방지 기능이 Compose에서 필요하다면, Compose용 커스텀 TextField를 별도로 구현해야 합니다.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java" />
              <option name="updatedContent" value="package com.example.alcoholictimer;&#10;&#10;import android.os.Bundle;&#10;import android.widget.TextView;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import java.util.Calendar;&#10;&#10;public class RecordSummaryActivity extends AppCompatActivity {&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_record_summary);&#10;&#10;        // ...existing code...&#10;&#10;        TextView tvRecordTitle = findViewById(R.id.tvRecordTitle);&#10;        // 예시: 현재 월을 기록 종료 시점의 월로 사용합니다.&#10;        int month = Calendar.getInstance().get(Calendar.MONTH) + 1;&#10;        tvRecordTitle.setText(String.format(&quot;%d월의 금주&quot;, month));&#10;&#10;        // ...existing code...&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SettingsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SettingsActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;class SettingsActivity : BaseActivity() {&#10;&#10;    override fun getScreenTitle(): String = &quot;설정&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                SettingsScreen()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SettingsScreen() {&#10;    var selectedCost by remember { mutableStateOf(&quot;저&quot;) }&#10;    var selectedFrequency by remember { mutableStateOf(&quot;주 1회 이하&quot;) }&#10;    var selectedDuration by remember { mutableStateOf(&quot;짧음&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // 음주 비용 설정&#10;        Text(&quot;음주 비용&quot;, fontSize = 20.sp)&#10;        Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedCost == &quot;저&quot;, onClick = { selectedCost = &quot;저&quot; })&#10;                Text(&quot;저(1만원 이하)&quot;, fontSize = 16.sp)&#10;            }&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedCost == &quot;중&quot;, onClick = { selectedCost = &quot;중&quot; })&#10;                Text(&quot;중(1~5만원)&quot;, fontSize = 16.sp)&#10;            }&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedCost == &quot;고&quot;, onClick = { selectedCost = &quot;고&quot; })&#10;                Text(&quot;고(5만원 이상)&quot;, fontSize = 16.sp)&#10;            }&#10;        }&#10;&#10;        HorizontalDivider(&#10;            modifier = Modifier.padding(vertical = 8.dp),&#10;            thickness = 1.dp,&#10;            color = Color.Black&#10;        )&#10;&#10;        // 음주 빈도 설정&#10;        Text(&quot;음주 빈도&quot;, fontSize = 20.sp)&#10;        Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedFrequency == &quot;주 1회 이하&quot;, onClick = { selectedFrequency = &quot;주 1회 이하&quot; })&#10;                Text(&quot;주 1회 이하&quot;, fontSize = 16.sp)&#10;            }&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedFrequency == &quot;주 2~3회&quot;, onClick = { selectedFrequency = &quot;주 2~3회&quot; })&#10;                Text(&quot;주 2~3회&quot;, fontSize = 16.sp)&#10;            }&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedFrequency == &quot;주 4회 이상&quot;, onClick = { selectedFrequency = &quot;주 4회 이상&quot; })&#10;                Text(&quot;주 4회 이상&quot;, fontSize = 16.sp)&#10;            }&#10;        }&#10;&#10;        HorizontalDivider(&#10;            modifier = Modifier.padding(vertical = 8.dp),&#10;            thickness = 1.dp,&#10;            color = Color.Black&#10;        )&#10;&#10;        // 음주 시간 설정&#10;        Text(&quot;음주 시간&quot;, fontSize = 20.sp)&#10;        Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedDuration == &quot;짧음&quot;, onClick = { selectedDuration = &quot;짧음&quot; })&#10;                Text(&quot;짧음(2시간 이하)&quot;, fontSize = 16.sp)&#10;            }&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedDuration == &quot;보통&quot;, onClick = { selectedDuration = &quot;보통&quot; })&#10;                Text(&quot;보통(3~5시간)&quot;, fontSize = 16.sp)&#10;            }&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedDuration == &quot;김&quot;, onClick = { selectedDuration = &quot;김&quot; })&#10;                Text(&quot;김(6시간 이상)&quot;, fontSize = 16.sp)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // 버튼들&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp, Alignment.CenterHorizontally)&#10;        ) {&#10;            // 저장 버튼&#10;            OutlinedButton(&#10;                onClick = {&#10;                    // TODO: SharedPreferences에 설정값 저장 로직 추가&#10;                    // 예: saveSettings(selectedCost, selectedFrequency, selectedDuration)&#10;                },&#10;                border = BorderStroke(1.dp, Color.Black),&#10;                colors = ButtonDefaults.outlinedButtonColors(&#10;                    containerColor = Color.Transparent,&#10;                    contentColor = Color.Black&#10;                )&#10;            ) {&#10;                Text(&quot;저장&quot;, fontSize = 16.sp)&#10;            }&#10;&#10;            // 리셋 버튼&#10;            OutlinedButton(&#10;                onClick = {&#10;                    selectedCost = &quot;저&quot;&#10;                    selectedFrequency = &quot;주 1회 이하&quot;&#10;                    selectedDuration = &quot;짧음&quot;&#10;                },&#10;                border = BorderStroke(1.dp, Color.Black),&#10;                colors = ButtonDefaults.outlinedButtonColors(&#10;                    containerColor = Color.Transparent,&#10;                    contentColor = Color.Black&#10;                )&#10;            ) {&#10;                Text(&quot;리셋&quot;, fontSize = 16.sp)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewSettingsScreen() {&#10;    SettingsScreen()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.BorderStroke&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;class SettingsActivity : BaseActivity() {&#10;&#10;    override fun getScreenTitle(): String = &quot;설정&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                SettingsScreen()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SettingsScreen() {&#10;    var selectedCost by remember { mutableStateOf(&quot;저&quot;) }&#10;    var selectedFrequency by remember { mutableStateOf(&quot;주 1회 이하&quot;) }&#10;    var selectedDuration by remember { mutableStateOf(&quot;짧음&quot;) }&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp)&#10;            .verticalScroll(rememberScrollState()),&#10;        verticalArrangement = Arrangement.spacedBy(16.dp)&#10;    ) {&#10;        // 음주 비용 설정&#10;        Text(&quot;음주 비용&quot;, fontSize = 20.sp)&#10;        Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedCost == &quot;저&quot;, onClick = { selectedCost = &quot;저&quot; })&#10;                Text(&quot;저(1만원 이하)&quot;, fontSize = 16.sp)&#10;            }&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedCost == &quot;중&quot;, onClick = { selectedCost = &quot;중&quot; })&#10;                Text(&quot;중(1~5만원)&quot;, fontSize = 16.sp)&#10;            }&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedCost == &quot;고&quot;, onClick = { selectedCost = &quot;고&quot; })&#10;                Text(&quot;고(5만원 이상)&quot;, fontSize = 16.sp)&#10;            }&#10;        }&#10;&#10;        HorizontalDivider(&#10;            modifier = Modifier.padding(vertical = 8.dp),&#10;            thickness = 1.dp,&#10;            color = Color.Black&#10;        )&#10;&#10;        // 음주 빈도 설정&#10;        Text(&quot;음주 빈도&quot;, fontSize = 20.sp)&#10;        Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedFrequency == &quot;주 1회 이하&quot;, onClick = { selectedFrequency = &quot;주 1회 이하&quot; })&#10;                Text(&quot;주 1회 이하&quot;, fontSize = 16.sp)&#10;            }&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedFrequency == &quot;주 2~3회&quot;, onClick = { selectedFrequency = &quot;주 2~3회&quot; })&#10;                Text(&quot;주 2~3회&quot;, fontSize = 16.sp)&#10;            }&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedFrequency == &quot;주 4회 이상&quot;, onClick = { selectedFrequency = &quot;주 4회 이상&quot; })&#10;                Text(&quot;주 4회 이상&quot;, fontSize = 16.sp)&#10;            }&#10;        }&#10;&#10;        HorizontalDivider(&#10;            modifier = Modifier.padding(vertical = 8.dp),&#10;            thickness = 1.dp,&#10;            color = Color.Black&#10;        )&#10;&#10;        // 음주 시간 설정&#10;        Text(&quot;음주 시간&quot;, fontSize = 20.sp)&#10;        Column(verticalArrangement = Arrangement.spacedBy(8.dp)) {&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedDuration == &quot;짧음&quot;, onClick = { selectedDuration = &quot;짧음&quot; })&#10;                Text(&quot;짧음(2시간 이하)&quot;, fontSize = 16.sp)&#10;            }&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedDuration == &quot;보통&quot;, onClick = { selectedDuration = &quot;보통&quot; })&#10;                Text(&quot;보통(3~5시간)&quot;, fontSize = 16.sp)&#10;            }&#10;            Row(verticalAlignment = Alignment.CenterVertically) {&#10;                RadioButton(selected = selectedDuration == &quot;김&quot;, onClick = { selectedDuration = &quot;김&quot; })&#10;                Text(&quot;김(6시간 이상)&quot;, fontSize = 16.sp)&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // 버튼들&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(16.dp, Alignment.CenterHorizontally)&#10;        ) {&#10;            // 저장 버튼&#10;            OutlinedButton(&#10;                onClick = {&#10;                    // TODO: SharedPreferences에 설정값 저장 로직 추가&#10;                    // 예: saveSettings(selectedCost, selectedFrequency, selectedDuration)&#10;                },&#10;                border = BorderStroke(1.dp, Color.Black),&#10;                colors = ButtonDefaults.outlinedButtonColors(&#10;                    containerColor = Color.Transparent,&#10;                    contentColor = Color.Black&#10;                )&#10;            ) {&#10;                Text(&quot;저장&quot;, fontSize = 16.sp)&#10;            }&#10;&#10;            // 리셋 버튼&#10;            OutlinedButton(&#10;                onClick = {&#10;                    selectedCost = &quot;저&quot;&#10;                    selectedFrequency = &quot;주 1회 이하&quot;&#10;                    selectedDuration = &quot;짧음&quot;&#10;                },&#10;                border = BorderStroke(1.dp, Color.Black),&#10;                colors = ButtonDefaults.outlinedButtonColors(&#10;                    containerColor = Color.Transparent,&#10;                    contentColor = Color.Black&#10;                )&#10;            ) {&#10;                Text(&quot;리셋&quot;, fontSize = 16.sp)&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewSettingsScreen() {&#10;    SettingsScreen()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java" />
              <option name="originalContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}&#10;" />
              <option name="updatedContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StartActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StartActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.text.BasicTextField&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.PlayArrow&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.SolidColor&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.graphics.StrokeCap&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.alcoholictimer.utils.Constants&#10;&#10;class StartActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                StartScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 설정&quot;&#10;&#10;    @Composable&#10;    private fun StartScreen() {&#10;        val context = LocalContext.current&#10;        var inputText by remember { mutableStateOf(&quot;0&quot;) }&#10;        var errorText by remember { mutableStateOf(&quot;&quot;) }&#10;        val timeUnitText = Constants.TIME_UNIT_TEXT&#10;        val isValid = inputText.toIntOrNull()?.let { it &gt; 0 } ?: false&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Top&#10;        ) {&#10;            Spacer(modifier = Modifier.height(0.dp))&#10;&#10;            // 상단 아이콘&#10;            Text(&#10;                text = &quot;&quot;,&#10;                fontSize = 150.sp,&#10;                modifier = Modifier.padding(bottom = 60.dp)&#10;            )&#10;&#10;            // 입력 영역&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // 목표 입력 텍스트&#10;                Text(&#10;                    text = &quot;목표 설정&quot;,&#10;                    fontSize = 24.sp,&#10;                    color = Color.Gray,&#10;                    modifier = Modifier.padding(bottom = 24.dp)&#10;                )&#10;&#10;                // 커스텀 입력 필드 (3자리 숫자 넓이)&#10;                Box(&#10;                    modifier = Modifier.width(150.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column {&#10;                        BasicTextField(&#10;                            value = inputText,&#10;                            onValueChange = {&#10;                                inputText = it&#10;                                errorText = &quot;&quot;&#10;                            },&#10;                            textStyle = LocalTextStyle.current.copy(&#10;                                fontSize = 48.sp,&#10;                                fontWeight = FontWeight.Bold,&#10;                                textAlign = TextAlign.Center,&#10;                                color = if (isValid) MaterialTheme.colorScheme.primary else Color.Black&#10;                            ),&#10;                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                            singleLine = true,&#10;                            cursorBrush = SolidColor(MaterialTheme.colorScheme.primary),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(bottom = 8.dp)&#10;                        )&#10;&#10;                        // 밑줄 (얇고 검은색)&#10;                        Canvas(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(1.dp)&#10;                        ) {&#10;                            drawLine(&#10;                                color = Color.Black,&#10;                                start = Offset(0f, 0f),&#10;                                end = Offset(size.width, 0f),&#10;                                strokeWidth = 2.dp.toPx(),&#10;                                cap = StrokeCap.Square&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // 단위 표시&#10;                Text(&#10;                    text = &quot;일&quot;,&#10;                    fontSize = 20.sp,&#10;                    color = Color.Gray,&#10;                    modifier = Modifier.padding(top = 16.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(60.dp))&#10;&#10;            // 플레이 버튼&#10;            FloatingActionButton(&#10;                onClick = {&#10;                    val targetTime = inputText.toIntOrNull() ?: 0&#10;                    if (targetTime &gt; 0) {&#10;                        val sharedPref = context.getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                        sharedPref.edit().apply {&#10;                            putInt(&quot;target_days&quot;, targetTime)&#10;                            putLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;                            putBoolean(&quot;timer_completed&quot;, false)&#10;                            apply()&#10;                        }&#10;                        val intent = Intent(context, StatusActivity::class.java)&#10;                        context.startActivity(intent)&#10;                    }&#10;                },&#10;                modifier = Modifier.size(100.dp),&#10;                shape = CircleShape,&#10;                containerColor = if (isValid) MaterialTheme.colorScheme.primary else Color.Gray&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.PlayArrow,&#10;                    contentDescription = &quot;시작&quot;,&#10;                    modifier = Modifier.size(50.dp),&#10;                    tint = Color.White&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        updateTimeModeDisplay()&#10;    }&#10;&#10;    private fun updateTimeModeDisplay() {&#10;        // SharedPreferences에서 현재 테스트 모드를 읽어옴&#10;        val sharedPref = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;        val currentTestMode = sharedPref.getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        // Constants의 현재 테스트 모드를 업데이트&#10;        Constants.updateTestMode(currentTestMode)&#10;&#10;        val timeUnitText = when (currentTestMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; &quot;금주 목표 초수&quot;&#10;            Constants.TEST_MODE_MINUTE -&gt; &quot;금주 목표 분수&quot;&#10;            else -&gt; &quot;금주 목표 일수&quot;&#10;        }&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewStartScreen() {&#10;        BaseScreen {&#10;            StartScreen()&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.text.BasicTextField&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.PlayArrow&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.SolidColor&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.graphics.StrokeCap&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.alcoholictimer.utils.Constants&#10;&#10;class StartActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                StartScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 설정&quot;&#10;&#10;    @Composable&#10;    private fun StartScreen() {&#10;        val context = LocalContext.current&#10;        var inputText by remember { mutableStateOf(&quot;0&quot;) }&#10;        var errorText by remember { mutableStateOf(&quot;&quot;) }&#10;        val timeUnitText = Constants.TIME_UNIT_TEXT&#10;        val isValid = inputText.toIntOrNull()?.let { it &gt; 0 } ?: false&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Top&#10;        ) {&#10;            Spacer(modifier = Modifier.height(0.dp))&#10;&#10;            // 상단 아이콘&#10;            Text(&#10;                text = &quot;&quot;,&#10;                fontSize = 150.sp,&#10;                modifier = Modifier.padding(bottom = 60.dp)&#10;            )&#10;&#10;            // 입력 영역&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // 목표 입력 텍스트&#10;                Text(&#10;                    text = &quot;목표 설정&quot;,&#10;                    fontSize = 24.sp,&#10;                    color = Color.Gray,&#10;                    modifier = Modifier.padding(bottom = 24.dp)&#10;                )&#10;&#10;                // 커스텀 입력 필드 (3자리 숫자 넓이)&#10;                Box(&#10;                    modifier = Modifier.width(150.dp),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Column {&#10;                        BasicTextField(&#10;                            value = inputText,&#10;                            onValueChange = { newValue -&gt;&#10;                                // 숫자만 허용하고, 첫 번째 문자가 0이면서 길이가 1보다 크면 0을 제거&#10;                                val filteredValue = newValue.filter { it.isDigit() }&#10;                                inputText = if (filteredValue.length &gt; 1 &amp;&amp; filteredValue.startsWith(&quot;0&quot;)) {&#10;                                    filteredValue.substring(1)&#10;                                } else {&#10;                                    filteredValue&#10;                                }&#10;                                errorText = &quot;&quot;&#10;                            },&#10;                            textStyle = LocalTextStyle.current.copy(&#10;                                fontSize = 48.sp,&#10;                                fontWeight = FontWeight.Bold,&#10;                                textAlign = TextAlign.Center,&#10;                                color = if (isValid) MaterialTheme.colorScheme.primary else Color.Black&#10;                            ),&#10;                            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                            singleLine = true,&#10;                            cursorBrush = SolidColor(MaterialTheme.colorScheme.primary),&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(bottom = 8.dp)&#10;                        )&#10;&#10;                        // 밑줄 (얇고 검은색)&#10;                        Canvas(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(1.dp)&#10;                        ) {&#10;                            drawLine(&#10;                                color = Color.Black,&#10;                                start = Offset(0f, 0f),&#10;                                end = Offset(size.width, 0f),&#10;                                strokeWidth = 2.dp.toPx(),&#10;                                cap = StrokeCap.Square&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // 단위 표시&#10;                Text(&#10;                    text = &quot;일&quot;,&#10;                    fontSize = 20.sp,&#10;                    color = Color.Gray,&#10;                    modifier = Modifier.padding(top = 16.dp)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(60.dp))&#10;&#10;            // 플레이 버튼&#10;            FloatingActionButton(&#10;                onClick = {&#10;                    val targetTime = inputText.toIntOrNull() ?: 0&#10;                    if (targetTime &gt; 0) {&#10;                        val sharedPref = context.getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                        sharedPref.edit().apply {&#10;                            putInt(&quot;target_days&quot;, targetTime)&#10;                            putLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;                            putBoolean(&quot;timer_completed&quot;, false)&#10;                            apply()&#10;                        }&#10;                        val intent = Intent(context, StatusActivity::class.java)&#10;                        context.startActivity(intent)&#10;                    }&#10;                },&#10;                modifier = Modifier.size(100.dp),&#10;                shape = CircleShape,&#10;                containerColor = if (isValid) MaterialTheme.colorScheme.primary else Color.Gray&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.PlayArrow,&#10;                    contentDescription = &quot;시작&quot;,&#10;                    modifier = Modifier.size(50.dp),&#10;                    tint = Color.White&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        updateTimeModeDisplay()&#10;    }&#10;&#10;    private fun updateTimeModeDisplay() {&#10;        // SharedPreferences에서 현재 테스트 모드를 읽어옴&#10;        val sharedPref = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;        val currentTestMode = sharedPref.getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        // Constants의 현재 테스트 모드를 업데이트&#10;        Constants.updateTestMode(currentTestMode)&#10;&#10;        val timeUnitText = when (currentTestMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; &quot;금주 목표 초수&quot;&#10;            Constants.TEST_MODE_MINUTE -&gt; &quot;금주 목표 분수&quot;&#10;            else -&gt; &quot;금주 목표 일수&quot;&#10;        }&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewStartScreen() {&#10;        BaseScreen {&#10;            StartScreen()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/TestActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/TestActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.alcoholictimer.utils.Constants&#10;&#10;class TestActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                SettingsScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;설정&quot;&#10;&#10;    @Composable&#10;    private fun SettingsScreen() {&#10;        val context = LocalContext.current&#10;        var selectedMode by remember { mutableStateOf(Constants.TEST_MODE_REAL) }&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(top = 60.dp, start = 32.dp, end = 32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;설정&quot;,&#10;                fontSize = 32.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;            HorizontalDivider(modifier = Modifier.fillMaxWidth().height(2.dp), color = Color.LightGray)&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;            Text(&#10;                text = &quot;테스트 모드 선택&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                ModeButton(&#10;                    label = &quot;실제 시간&quot;,&#10;                    selected = selectedMode == Constants.TEST_MODE_REAL,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_REAL }&#10;                )&#10;                ModeButton(&#10;                    label = &quot;분 단위&quot;,&#10;                    selected = selectedMode == Constants.TEST_MODE_MINUTE,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_MINUTE }&#10;                )&#10;                ModeButton(&#10;                    label = &quot;초 단위&quot;,&#10;                    selected = selectedMode == Constants.TEST_MODE_SECOND,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_SECOND }&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(40.dp))&#10;            Button(&#10;                onClick = {&#10;                    try {&#10;                        val sharedPref = context.getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;                        sharedPref.edit().putInt(Constants.PREF_TEST_MODE, selectedMode).apply()&#10;                        Toast.makeText(context, &quot;설정이 저장되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;                    } catch (e: Exception) {&#10;                        Toast.makeText(context, &quot;설정 저장 중 오류 발생&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(56.dp)&#10;            ) {&#10;                Text(&quot;저장&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        }&#10;    }&#10;&#10;    @Composable&#10;    private fun ModeButton(label: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;        Button(&#10;            onClick = onClick,&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = if (selected) MaterialTheme.colorScheme.primary else Color.LightGray,&#10;                contentColor = if (selected) Color.White else Color.Black&#10;            ),&#10;            modifier = Modifier.height(48.dp)&#10;        ) {&#10;            Text(label, fontSize = 16.sp, fontWeight = FontWeight.Medium)&#10;        }&#10;    }&#10;&#10;    private fun saveSettings(selectedMode: Int) {&#10;        val preferences = getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;        val editor = preferences.edit()&#10;        editor.putInt(Constants.PREF_KEY_TEST_MODE, selectedMode)&#10;        val success = editor.commit()&#10;        Log.d(&quot;TestActivity&quot;, &quot;Settings saved. Mode: $selectedMode, Success: $success&quot;)&#10;&#10;        // Constants 클래스의 동적 설정 업데이트&#10;        Constants.updateTestMode(selectedMode)&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewSettingsScreen() {&#10;        BaseScreen {&#10;            SettingsScreen()&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.alcoholictimer.utils.Constants&#10;&#10;class TestActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                SettingsScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;설정&quot;&#10;&#10;    @Composable&#10;    private fun SettingsScreen() {&#10;        val context = LocalContext.current&#10;        var selectedMode by remember { mutableStateOf(Constants.TEST_MODE_REAL) }&#10;&#10;        // 현재 저장된 설정 로드&#10;        LaunchedEffect(Unit) {&#10;            val sharedPref = context.getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;            selectedMode = sharedPref.getInt(Constants.PREF_KEY_TEST_MODE, Constants.TEST_MODE_REAL)&#10;        }&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(top = 60.dp, start = 32.dp, end = 32.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;설정&quot;,&#10;                fontSize = 32.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 32.dp)&#10;            )&#10;            HorizontalDivider(&#10;                modifier = Modifier.fillMaxWidth().height(2.dp), &#10;                color = Color.LightGray&#10;            )&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;            Text(&#10;                text = &quot;테스트 모드 선택&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                ModeButton(&#10;                    label = &quot;실제 시간&quot;,&#10;                    selected = selectedMode == Constants.TEST_MODE_REAL,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_REAL }&#10;                )&#10;                ModeButton(&#10;                    label = &quot;분 단위&quot;,&#10;                    selected = selectedMode == Constants.TEST_MODE_MINUTE,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_MINUTE }&#10;                )&#10;                ModeButton(&#10;                    label = &quot;초 단위&quot;,&#10;                    selected = selectedMode == Constants.TEST_MODE_SECOND,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_SECOND }&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(40.dp))&#10;            Button(&#10;                onClick = {&#10;                    try {&#10;                        val sharedPref = context.getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;                        with(sharedPref.edit()) {&#10;                            putInt(Constants.PREF_KEY_TEST_MODE, selectedMode)&#10;                            apply()&#10;                        }&#10;                        // Constants 업데이트&#10;                        Constants.updateTestMode(selectedMode)&#10;                        Toast.makeText(context, &quot;설정이 저장되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;                    } catch (e: Exception) {&#10;                        Toast.makeText(context, &quot;설정 저장 중 오류가 발생했습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;                    }&#10;                },&#10;                modifier = Modifier.fillMaxWidth().height(56.dp)&#10;            ) {&#10;                Text(&quot;저장&quot;, fontSize = 20.sp, fontWeight = FontWeight.Bold)&#10;            }&#10;        }&#10;    }&#10;&#10;    @Composable&#10;    private fun ModeButton(label: String, selected: Boolean, onClick: () -&gt; Unit) {&#10;        Button(&#10;            onClick = onClick,&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = if (selected) MaterialTheme.colorScheme.primary else Color.LightGray,&#10;                contentColor = if (selected) Color.White else Color.Black&#10;            ),&#10;            modifier = Modifier.height(48.dp)&#10;        ) {&#10;            Text(label, fontSize = 16.sp, fontWeight = FontWeight.Medium)&#10;        }&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewSettingsScreen() {&#10;        BaseScreen {&#10;            SettingsScreen()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.model.RecentActivity&#10;&#10;class RecentActivityAdapter : RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;    private val activities = ArrayList&lt;RecentActivity&gt;()&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val ivActivityIcon: ImageView = itemView.findViewById(R.id.ivActivityIcon)&#10;        val tvEndDate: TextView = itemView.findViewById(R.id.tvEndDate)&#10;        val tvActivityTitle: TextView = itemView.findViewById(R.id.tvActivityTitle)&#10;        val tvDuration: TextView = itemView.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val tvSavedMoney: TextView = itemView.findViewById(R.id.tvSavedMoney)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        &#10;        holder.tvEndDate.text = activity.endDate&#10;        holder.tvActivityTitle.text = activity.title&#10;        holder.tvDuration.text = &quot;${activity.duration}일 ${activity.hours}시간&quot;&#10;        holder.tvStatus.text = if(activity.isSuccess) &quot;성공&quot; else &quot;실패&quot;&#10;        holder.tvSavedMoney.text = &quot;${activity.savedMoney}만원 절약&quot;&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;&#10;    fun updateActivities(newActivities: List&lt;RecentActivity&gt;) {&#10;        activities.clear()&#10;        activities.addAll(newActivities.take(5)) // 최대 5개까지만 표시&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>