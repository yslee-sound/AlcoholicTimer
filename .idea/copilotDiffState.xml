<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java" />
              <option name="updatedContent" value="package com.example.alcoholictimer;&#10;&#10;import android.os.Bundle;&#10;import android.widget.TextView;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import java.util.Calendar;&#10;&#10;public class RecordSummaryActivity extends AppCompatActivity {&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_record_summary);&#10;&#10;        // ...existing code...&#10;&#10;        TextView tvRecordTitle = findViewById(R.id.tvRecordTitle);&#10;        // 예시: 현재 월을 기록 종료 시점의 월로 사용합니다.&#10;        int month = Calendar.getInstance().get(Calendar.MONTH) + 1;&#10;        tvRecordTitle.setText(String.format(&quot;%d월의 금주&quot;, month));&#10;&#10;        // ...existing code...&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * 금주 완료 후 결과 요약을 보여주는 액티비티&#10; */&#10;class RecordSummaryActivity : AppCompatActivity() {&#10;&#10;    private var record: SobrietyRecord? = null&#10;    private val TAG = &quot;RecordSummaryActivity&quot;&#10;&#10;    // UI 요소들&#10;    private lateinit var tvDuration: TextView&#10;    private lateinit var tvPeriod: TextView&#10;    private lateinit var tvAchievementRate: TextView&#10;    private lateinit var tvSavedMoney: TextView&#10;    private lateinit var btnConfirm: Button&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_record_summary)&#10;&#10;        Log.d(TAG, &quot;onCreate: 기록화면 시작&quot;)&#10;&#10;        // UI 요소 초기화&#10;        tvDuration = findViewById(R.id.tvDuration)&#10;        tvPeriod = findViewById(R.id.tvPeriod)&#10;        tvAchievementRate = findViewById(R.id.tvAchievementRate)&#10;        tvSavedMoney = findViewById(R.id.tvSavedMoney)&#10;        btnConfirm = findViewById(R.id.btnConfirm)&#10;&#10;        // 뒤로가기 버튼 설정&#10;        val btnBack = findViewById&lt;android.widget.ImageButton&gt;(R.id.btnBack)&#10;        btnBack.setOnClickListener {&#10;            // 메인 화면으로 이동 (앱 종료 방지)&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        // 확인 버튼 클릭 시 메인 화면으로 이동&#10;        btnConfirm.setOnClickListener {&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        // 이전 화면에서 전달받은 기록 ID 가져오기&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1L)&#10;        Log.d(TAG, &quot;onCreate: recordId=$recordId&quot;)&#10;&#10;        if (recordId == -1L) {&#10;            // ID가 없으면 메인 화면으로 이동&#10;            Toast.makeText(this, &quot;기록 정보를 찾을 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Record ID not found in intent&quot;)&#10;            finish()&#10;            return&#10;        }&#10;&#10;        // 해당 ID의 기록 데이터 불러오기&#10;        record = loadRecord(recordId)&#10;&#10;        if (record == null) {&#10;            Toast.makeText(this, &quot;해당 기록을 불러올 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Failed to load record with id: $recordId&quot;)&#10;        } else {&#10;            Log.d(TAG, &quot;Record loaded successfully: ${record?.startDate} to ${record?.endDate}, completed=${record?.isCompleted}, duration=${record?.duration}&quot;)&#10;            // 기록 데이터를 화면에 표시&#10;            displayRecordData()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 기록 데이터를 화면에 표시&#10;     */&#10;    private fun displayRecordData() {&#10;        val currentRecord = record ?: return&#10;&#10;        // 테스트 모드인지 확인&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val isTestMode = testMode == Constants.TEST_MODE_SECOND || testMode == Constants.TEST_MODE_MINUTE&#10;&#10;        // 금주 기간 표시 - 테스트 모드에서는 설정된 목표 기간을 표시&#10;        val durationValue = if (isTestMode) {&#10;            // 테스트 모드에서는 설정한 목표 시간(targetDays)을 사용&#10;            currentRecord.duration.toLong()&#10;        } else {&#10;            // 실제 모드에서는 달성한 기간 사용&#10;            currentRecord.achievedDays.toLong()&#10;        }&#10;&#10;        Log.d(TAG, &quot;displayRecordData: 테스트 모드=$isTestMode, 목표 기간=${currentRecord.duration}, 달성 기간=${currentRecord.achievedDays}, 표시할 값=$durationValue&quot;)&#10;&#10;        val duration = formatDuration(durationValue)&#10;        tvDuration.text = duration&#10;&#10;        // 금주 일정 표시&#10;        tvPeriod.text = &quot;${currentRecord.startDate} ~ ${currentRecord.endDate}&quot;&#10;&#10;        // 달성률 표시&#10;        val achievementRate = if (currentRecord.isCompleted) &quot;100%&quot; else {&#10;            val percentage = (currentRecord.achievedDays.toDouble() / currentRecord.duration.toDouble() * 100).toInt()&#10;            &quot;$percentage%&quot;&#10;        }&#10;        tvAchievementRate.text = achievementRate&#10;        tvAchievementRate.setTextColor(&#10;            if (currentRecord.isCompleted)&#10;                resources.getColor(android.R.color.holo_green_dark, null)&#10;            else&#10;                resources.getColor(android.R.color.holo_orange_dark, null)&#10;        )&#10;&#10;        // 절약 금액 계산 및 표시&#10;        val savedMoney = calculateSavedMoney(currentRecord.duration.toLong())&#10;        tvSavedMoney.text = savedMoney&#10;    }&#10;&#10;    /**&#10;     * 지속 시간을 포맷팅 (테스트 모드에 따라)&#10;     */&#10;    private fun formatDuration(durationValue: Long): String {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        return when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; {&#10;                // 초 단위 테스트 모드: 0분 00초 형식&#10;                val totalSeconds = durationValue&#10;                val minutes = totalSeconds / 60&#10;                val seconds = totalSeconds % 60&#10;                &quot;${minutes}분 ${String.format(&quot;%02d&quot;, seconds)}초&quot;&#10;            }&#10;            Constants.TEST_MODE_MINUTE -&gt; {&#10;                // 분 단위 테스트 모드: 0시간 00분 형식&#10;                val totalMinutes = durationValue&#10;                val hours = totalMinutes / 60&#10;                val minutes = totalMinutes % 60&#10;                &quot;${hours}시간 ${String.format(&quot;%02d&quot;, minutes)}분&quot;&#10;            }&#10;            else -&gt; {&#10;                // 실제 모드 (일 단위): 0일 형식&#10;                val totalDays = durationValue&#10;                &quot;${totalDays}일&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 절약 금액 계산 (임시로 1일당 10,000원으로 계산)&#10;     */&#10;    private fun calculateSavedMoney(durationValue: Long): String {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val dailyAmount = 10000 // 1일당 10,000원&#10;&#10;        val days = when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; durationValue // 초 단위 테스트: 1초 = 1일로 계산&#10;            Constants.TEST_MODE_MINUTE -&gt; durationValue // 분 단위 테스트: 1분 = 1일로 계산&#10;            else -&gt; durationValue // 실제 모드: 실제 일수&#10;        }&#10;&#10;        val totalAmount = days * dailyAmount&#10;        return when {&#10;            totalAmount &gt;= 10000 -&gt; &quot;${totalAmount / 10000}만원&quot;&#10;            totalAmount &gt;= 1000 -&gt; &quot;${totalAmount / 1000}천원&quot;&#10;            else -&gt; &quot;${totalAmount}원&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 기록 데이터를 SharedPreferences에서 불러오기&#10;     */&#10;    private fun loadRecord(recordId: Long): SobrietyRecord? {&#10;        Log.d(TAG, &quot;loadRecord: 기록 ID $recordId 불러오기 시도&quot;)&#10;&#10;        try {&#10;            // 기록 저장용 SharedPreferences에서 모든 기록 불러오기&#10;            val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;            val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;            Log.d(TAG, &quot;로드된 기록 JSON: $recordsJson&quot;)&#10;&#10;            // JSON 배열을 SobrietyRecord 객체 리스트로 변환&#10;            val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;            Log.d(TAG, &quot;파싱된 기록 수: ${records.size}&quot;)&#10;&#10;            // 해당 ID를 가진 기록 찾기&#10;            val foundRecord = records.find { it.id == recordId }&#10;&#10;            if (foundRecord != null) {&#10;                Log.d(TAG, &quot;기록 찾음: $foundRecord&quot;)&#10;                return foundRecord&#10;            } else {&#10;                Log.e(TAG, &quot;ID가 ${recordId}인 기록을 찾을 수 없음&quot;)&#10;&#10;                // 디버깅을 위해 모든 기록의 ID 출력&#10;                records.forEach {&#10;                    Log.d(TAG, &quot;기존 기록 ID: ${it.id}, 달성일수: ${it.achievedDays}&quot;)&#10;                }&#10;&#10;                // 기록을 찾을 수 없으면 테스트용 기록 생성&#10;                // 이는 디버깅용으로만 사용하고, 실제 앱에서는 제거해야 함&#10;                val testRecord = createHardcodedTestRecord(recordId, 3) // 3초로 고정&#10;                Log.d(TAG, &quot;테스트용 기록 생성: $testRecord&quot;)&#10;                return testRecord&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;기록 로딩 중 오류 발생&quot;, e)&#10;            return null&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 테스트용 하드코딩된 기록 생성 (임시 디버깅용)&#10;     */&#10;    private fun createHardcodedTestRecord(recordId: Long, targetDays: Int): SobrietyRecord {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDateStr = dateFormat.format(Date(System.currentTimeMillis() - 10000))&#10;        val endDateStr = dateFormat.format(Date(System.currentTimeMillis()))&#10;&#10;        return SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDateStr,&#10;            endDate = endDateStr,&#10;            duration = targetDays, // 설정 목표일 (3초)&#10;            achievedDays = targetDays, // 달성일도 목표일과 동일하게&#10;            achievedLevel = 1,&#10;            levelTitle = &quot;첫걸음&quot;,&#10;            isCompleted = true&#10;        )&#10;    }&#10;&#10;    /**&#10;     * 실제 지속 시간 계산 (테스트 모드에 따라)&#10;     */&#10;    private fun calculateActualDuration(startTime: Long, endTime: Long): Long {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val durationMs = endTime - startTime&#10;        Log.d(TAG, &quot;calculateActualDuration - testMode: $testMode, durationMs: $durationMs&quot;)&#10;&#10;        return when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; {&#10;                // 초 단위 테스트: 경과한 실제 초 수를 반환&#10;                val seconds = durationMs / 1000&#10;                Log.d(TAG, &quot;TEST_MODE_SECOND - returning $seconds seconds&quot;)&#10;                seconds&#10;            }&#10;            Constants.TEST_MODE_MINUTE -&gt; {&#10;                // 분 단위 테스트: 경과한 실제 분 수를 반환&#10;                val minutes = durationMs / (1000 * 60)&#10;                Log.d(TAG, &quot;TEST_MODE_MINUTE - returning $minutes minutes&quot;)&#10;                minutes&#10;            }&#10;            else -&gt; {&#10;                // 실제 모드: 경과한 실제 일 수를 반환&#10;                val days = durationMs / (1000 * 60 * 60 * 24)&#10;                Log.d(TAG, &quot;TEST_MODE_REAL - returning $days days&quot;)&#10;                days&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.content.ContextCompat&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * 금주 완료 후 결과 요약을 보여주는 액티비티&#10; */&#10;class RecordSummaryActivity : AppCompatActivity() {&#10;&#10;    private var record: SobrietyRecord? = null&#10;    private val TAG = &quot;RecordSummaryActivity&quot;&#10;&#10;    // UI 요소들&#10;    private lateinit var tvDuration: TextView&#10;    private lateinit var tvPeriod: TextView&#10;    private lateinit var tvAchievementRate: TextView&#10;    private lateinit var tvSavedMoney: TextView&#10;    private lateinit var btnConfirm: Button&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_record_summary)&#10;&#10;        Log.d(TAG, &quot;onCreate: 기록화면 시작&quot;)&#10;&#10;        // UI 요소 초기화&#10;        tvDuration = findViewById(R.id.tvDuration)&#10;        tvPeriod = findViewById(R.id.tvPeriod)&#10;        tvAchievementRate = findViewById(R.id.tvAchievementRate)&#10;        tvSavedMoney = findViewById(R.id.tvSavedMoney)&#10;        btnConfirm = findViewById(R.id.btnConfirm)&#10;&#10;        // 뒤로가기 버튼 설정&#10;        val btnBack = findViewById&lt;android.widget.ImageButton&gt;(R.id.btnBack)&#10;        btnBack.setOnClickListener {&#10;            // 메인 화면으로 이동 (앱 종료 방지)&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        // 확인 버튼 클릭 시 메인 화면으로 이동&#10;        btnConfirm.setOnClickListener {&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        // 이전 화면에서 전달받은 기록 ID 가져오기&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1L)&#10;        Log.d(TAG, &quot;onCreate: recordId=$recordId&quot;)&#10;&#10;        if (recordId == -1L) {&#10;            // ID가 없으면 메인 화면으로 이동&#10;            Toast.makeText(this, &quot;기록 정보를 찾을 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Record ID not found in intent&quot;)&#10;            finish()&#10;            return&#10;        }&#10;&#10;        // 해당 ID의 기록 데이터 불러오기&#10;        record = loadRecord(recordId)&#10;&#10;        if (record == null) {&#10;            Toast.makeText(this, &quot;해당 기록을 불러올 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Failed to load record with id: $recordId&quot;)&#10;        } else {&#10;            Log.d(TAG, &quot;Record loaded successfully: ${record?.startDate} to ${record?.endDate}, completed=${record?.isCompleted}, duration=${record?.duration}&quot;)&#10;            // 기록 데이터를 화면에 표시&#10;            displayRecordData()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 기록 데이터를 화면에 표시&#10;     */&#10;    private fun displayRecordData() {&#10;        val currentRecord = record ?: return&#10;&#10;        // 테스트 모드인지 확인&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val isTestMode = testMode == Constants.TEST_MODE_SECOND || testMode == Constants.TEST_MODE_MINUTE&#10;&#10;        // 금주 기간 표시 - 테스트 모드에서는 설정된 목표 기간을 표시&#10;        val durationValue = if (isTestMode) {&#10;            // 테스트 모드에서는 설정한 목표 시간(targetDays)을 사용&#10;            currentRecord.duration.toLong()&#10;        } else {&#10;            // 실제 모드에서는 달성한 기간 사용&#10;            currentRecord.achievedDays.toLong()&#10;        }&#10;&#10;        Log.d(TAG, &quot;displayRecordData: 테스트 모드=$isTestMode, 목표 기간=${currentRecord.duration}, 달성 기간=${currentRecord.achievedDays}, 표시할 값=$durationValue&quot;)&#10;&#10;        val duration = formatDuration(durationValue)&#10;        tvDuration.text = duration&#10;&#10;        // 금주 일정 표시&#10;        tvPeriod.text = &quot;${currentRecord.startDate} ~ ${currentRecord.endDate}&quot;&#10;&#10;        // 달성률 표시&#10;        val achievementRate = &quot;${currentRecord.achievedPercentage}%&quot;&#10;        tvAchievementRate.text = achievementRate&#10;        tvAchievementRate.setTextColor(&#10;            if (currentRecord.isCompleted)&#10;                ContextCompat.getColor(this, android.R.color.holo_green_dark)&#10;            else&#10;                ContextCompat.getColor(this, android.R.color.holo_orange_dark)&#10;        )&#10;&#10;        // 절약 금액 계산 및 표시&#10;        val savedMoney = calculateSavedMoney(currentRecord.duration.toLong())&#10;        tvSavedMoney.text = savedMoney&#10;    }&#10;&#10;    /**&#10;     * 지속 시간을 포맷팅 (테스트 모드에 따라)&#10;     */&#10;    private fun formatDuration(durationValue: Long): String {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        return when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; {&#10;                // 초 단위 테스트 모드: 0분 00초 형식&#10;                val totalSeconds = durationValue&#10;                val minutes = totalSeconds / 60&#10;                val seconds = totalSeconds % 60&#10;                &quot;${minutes}분 ${String.format(Locale.getDefault(), &quot;%02d&quot;, seconds)}초&quot;&#10;            }&#10;            Constants.TEST_MODE_MINUTE -&gt; {&#10;                // 분 단위 테스트 모드: 0시간 00분 형식&#10;                val totalMinutes = durationValue&#10;                val hours = totalMinutes / 60&#10;                val minutes = totalMinutes % 60&#10;                &quot;${hours}시간 ${String.format(Locale.getDefault(), &quot;%02d&quot;, minutes)}분&quot;&#10;            }&#10;            else -&gt; {&#10;                // 실제 모드 (일 단위): 0일 형식&#10;                val totalDays = durationValue&#10;                &quot;${totalDays}일&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 절약 금액 계산 (임시로 1일당 10,000원으로 계산)&#10;     */&#10;    private fun calculateSavedMoney(durationValue: Long): String {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val dailyAmount = 10000 // 1일당 10,000원&#10;&#10;        val days = when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; durationValue // 초 단위 테스트: 1초 = 1일로 계산&#10;            Constants.TEST_MODE_MINUTE -&gt; durationValue // 분 단위 테스트: 1분 = 1일로 계산&#10;            else -&gt; durationValue // 실제 모드: 실제 일수&#10;        }&#10;&#10;        val totalAmount = days * dailyAmount&#10;        return when {&#10;            totalAmount &gt;= 10000 -&gt; &quot;${totalAmount / 10000}만원&quot;&#10;            totalAmount &gt;= 1000 -&gt; &quot;${totalAmount / 1000}천원&quot;&#10;            else -&gt; &quot;${totalAmount}원&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 기록 데이터를 SharedPreferences에서 불러오기&#10;     */&#10;    private fun loadRecord(recordId: Long): SobrietyRecord? {&#10;        Log.d(TAG, &quot;loadRecord: 기록 ID $recordId 불러오기 시도&quot;)&#10;&#10;        try {&#10;            // 기록 저장용 SharedPreferences에서 모든 기록 불러오기&#10;            val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;            val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;            Log.d(TAG, &quot;로드된 기록 JSON: $recordsJson&quot;)&#10;&#10;            // JSON 배열을 SobrietyRecord 객체 리스트로 변환&#10;            val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;            Log.d(TAG, &quot;파싱된 기록 수: ${records.size}&quot;)&#10;&#10;            // 해당 ID를 가진 기록 찾기&#10;            val foundRecord = records.find { it.id == recordId }&#10;&#10;            if (foundRecord != null) {&#10;                Log.d(TAG, &quot;기록 찾음: $foundRecord&quot;)&#10;                return foundRecord&#10;            } else {&#10;                Log.e(TAG, &quot;ID가 ${recordId}인 기록을 찾을 수 없음&quot;)&#10;&#10;                // 디버깅을 위해 모든 기록의 ID 출력&#10;                records.forEach {&#10;                    Log.d(TAG, &quot;기존 기록 ID: ${it.id}, 달성일수: ${it.achievedDays}&quot;)&#10;                }&#10;&#10;                // 기록을 찾을 수 없으면 테스트용 기록 생성&#10;                // 이는 디버깅용으로만 사용하고, 실제 앱에서는 제거해야 함&#10;                val testRecord = createHardcodedTestRecord(recordId, 3) // 3초로 고정&#10;                Log.d(TAG, &quot;테스트용 기록 생성: $testRecord&quot;)&#10;                return testRecord&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;기록 로딩 중 오류 발생&quot;, e)&#10;            return null&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 테스트용 하드코딩된 기록 생성 (임시 디버깅용)&#10;     */&#10;    private fun createHardcodedTestRecord(recordId: Long, targetDays: Int): SobrietyRecord {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDateStr = dateFormat.format(Date(System.currentTimeMillis() - 10000))&#10;        val endDateStr = dateFormat.format(Date(System.currentTimeMillis()))&#10;&#10;        return SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDateStr,&#10;            endDate = endDateStr,&#10;            duration = targetDays, // 설정 목표일 (3초)&#10;            achievedDays = targetDays, // 달성일도 목표일과 동일하게&#10;            achievedLevel = 1,&#10;            levelTitle = &quot;첫걸음&quot;,&#10;            isCompleted = true&#10;        )&#10;    }&#10;&#10;    /**&#10;     * 실제 지속 시간 계산 (테스트 모드에 따라)&#10;     */&#10;    private fun calculateActualDuration(startTime: Long, endTime: Long): Long {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val durationMs = endTime - startTime&#10;        Log.d(TAG, &quot;calculateActualDuration - testMode: $testMode, durationMs: $durationMs&quot;)&#10;&#10;        return when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; {&#10;                // 초 단위 테스트: 경과한 실제 초 수를 반환&#10;                val seconds = durationMs / 1000&#10;                Log.d(TAG, &quot;TEST_MODE_SECOND - returning $seconds seconds&quot;)&#10;                seconds&#10;            }&#10;            Constants.TEST_MODE_MINUTE -&gt; {&#10;                // 분 단위 테스트: 경과한 실제 분 수를 반환&#10;                val minutes = durationMs / (1000 * 60)&#10;                Log.d(TAG, &quot;TEST_MODE_MINUTE - returning $minutes minutes&quot;)&#10;                minutes&#10;            }&#10;            else -&gt; {&#10;                // 실제 모드: 경과한 실제 일 수를 반환&#10;                val days = durationMs / (1000 * 60 * 60 * 24)&#10;                Log.d(TAG, &quot;TEST_MODE_REAL - returning $days days&quot;)&#10;                days&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java" />
              <option name="originalContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}&#10;" />
              <option name="updatedContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.model.RecentActivity&#10;&#10;class RecentActivityAdapter : RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;    private val activities = ArrayList&lt;RecentActivity&gt;()&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val ivActivityIcon: ImageView = itemView.findViewById(R.id.ivActivityIcon)&#10;        val tvEndDate: TextView = itemView.findViewById(R.id.tvEndDate)&#10;        val tvActivityTitle: TextView = itemView.findViewById(R.id.tvActivityTitle)&#10;        val tvDuration: TextView = itemView.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val tvSavedMoney: TextView = itemView.findViewById(R.id.tvSavedMoney)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        &#10;        holder.tvEndDate.text = activity.endDate&#10;        holder.tvActivityTitle.text = activity.title&#10;        holder.tvDuration.text = &quot;${activity.duration}일 ${activity.hours}시간&quot;&#10;        holder.tvStatus.text = if(activity.isSuccess) &quot;성공&quot; else &quot;실패&quot;&#10;        holder.tvSavedMoney.text = &quot;${activity.savedMoney}만원 절약&quot;&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;&#10;    fun updateActivities(newActivities: List&lt;RecentActivity&gt;) {&#10;        activities.clear()&#10;        activities.addAll(newActivities.take(5)) // 최대 5개까지만 표시&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer.utils&#10;&#10;import android.content.Context&#10;&#10;object Constants {&#10;    // SharedPreferences 관련 상수&#10;    const val PREFS_NAME = &quot;AlcoholicTimerPrefs&quot;&#10;    const val PREF_KEY_TEST_MODE = &quot;test_mode&quot;&#10;    // const val PREF_TEST_MODE = &quot;test_mode&quot; // 중복 상수 제거&#10;    const val PREF_START_TIME = &quot;start_time&quot;&#10;    const val PREF_TARGET_DAYS = &quot;target_days&quot;&#10;    const val PREF_RECORDS = &quot;records&quot;&#10;&#10;    // 테스트 모드 상수&#10;    const val TEST_MODE_REAL = 0    // 실제 모드 (1일 = 24시간)&#10;    const val TEST_MODE_MINUTE = 1  // 분 단위 테스트 모드 (1일 = 1분)&#10;    const val TEST_MODE_SECOND = 2  // 초 단위 테스트 모드 (1일 = 1초)&#10;&#10;    // 현재 선택된 테스트 모드 (기본값: 실제 모드)&#10;    var currentTestMode = TEST_MODE_REAL&#10;&#10;    // 테스트 모드 상태 (런타임에 변경 가능)&#10;    val isTestMode: Boolean&#10;        get() = currentTestMode != TEST_MODE_REAL&#10;&#10;    val isSecondTestMode: Boolean&#10;        get() = currentTestMode == TEST_MODE_SECOND&#10;&#10;    val isMinuteTestMode: Boolean&#10;        get() = currentTestMode == TEST_MODE_MINUTE&#10;&#10;    // 시간 변환 상수&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#10;&#10;    // UI 관련 상수&#10;    const val RESULT_SCREEN_DELAY = 2000             // 결과 화면 전환 지연 시간 (2초)&#10;&#10;    // 기타 상수&#10;    const val DEFAULT_VALUE = 2000                   // 기본값 2000&#10;&#10;    // 사용할 시간 단위 (테스트 모드에 따라 동적으로 결정)&#10;    val TIME_UNIT_MILLIS: Long&#10;        get() = when (currentTestMode) {&#10;            TEST_MODE_SECOND -&gt; SECOND_IN_MILLIS  // 초 단위 테스트 (1초 = 1일)&#10;            TEST_MODE_MINUTE -&gt; MINUTE_IN_MILLIS  // 분 단위 테스트 (1분 = 1일)&#10;            else -&gt; DAY_IN_MILLIS                 // 실제 일 단위 (1일 = 24시간)&#10;        }&#10;&#10;    // 프로그레스바용 시간 단위 (테스트 모드와 동일하게 설정)&#10;    val PROGRESS_TIME_UNIT_MILLIS: Long&#10;        get() = TIME_UNIT_MILLIS&#10;&#10;    // 단위 텍스트&#10;    val TIME_UNIT_TEXT: String&#10;        get() = when (currentTestMode) {&#10;            TEST_MODE_SECOND -&gt; &quot;초&quot;  // 초 단위 테스트 시 표시 텍스트&#10;            TEST_MODE_MINUTE -&gt; &quot;분&quot;  // 분 단위 테스트 시 표시 텍스트&#10;            else -&gt; &quot;일&quot;              // 실제 모드 시 표시 텍스트&#10;        }&#10;&#10;    // 앱 시작 시 설정 불러오기&#10;    fun init(context: Context) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        currentTestMode = prefs.getInt(PREF_KEY_TEST_MODE, TEST_MODE_REAL)&#10;    }&#10;&#10;    // 테스트 모드 업데이트&#10;    fun updateTestMode(mode: Int) {&#10;        currentTestMode = mode&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#13;&#10;&#13;&#10;import android.content.Context&#13;&#10;&#13;&#10;object Constants {&#13;&#10;    // SharedPreferences 관련 상수&#13;&#10;    const val PREFS_NAME = &quot;AlcoholicTimerPrefs&quot;&#13;&#10;    const val PREF_KEY_TEST_MODE = &quot;test_mode&quot;&#13;&#10;    const val PREF_TEST_MODE = &quot;test_mode&quot;  // 호환성을 위해 추가&#13;&#10;    const val PREF_START_TIME = &quot;start_time&quot;&#13;&#10;    const val PREF_TARGET_DAYS = &quot;target_days&quot;&#13;&#10;    const val PREF_RECORDS = &quot;records&quot;&#13;&#10;&#13;&#10;    // 테스트 모드 상수&#13;&#10;    const val TEST_MODE_REAL = 0    // 실제 모드 (1일 = 24시간)&#13;&#10;    const val TEST_MODE_MINUTE = 1  // 분 단위 테스트 모드 (1일 = 1분)&#13;&#10;    const val TEST_MODE_SECOND = 2  // 초 단위 테스트 모드 (1일 = 1초)&#13;&#10;&#13;&#10;    // 현재 선택된 테스트 모드 (기본값: 실제 모드)&#13;&#10;    var currentTestMode = TEST_MODE_REAL&#13;&#10;&#13;&#10;    // 테스트 모드 상태 (런타임에 변경 가능)&#13;&#10;    val isTestMode: Boolean&#13;&#10;        get() = currentTestMode != TEST_MODE_REAL&#13;&#10;&#13;&#10;    val isSecondTestMode: Boolean&#13;&#10;        get() = currentTestMode == TEST_MODE_SECOND&#13;&#10;&#13;&#10;    val isMinuteTestMode: Boolean&#13;&#10;        get() = currentTestMode == TEST_MODE_MINUTE&#13;&#10;&#13;&#10;    // 시간 변환 상수&#13;&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#13;&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#13;&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#13;&#10;&#13;&#10;    // UI 관련 상수&#13;&#10;    const val RESULT_SCREEN_DELAY = 2000             // 결과 화면 전환 지연 시간 (2초)&#13;&#10;&#13;&#10;    // 기타 상수&#13;&#10;    const val DEFAULT_VALUE = 2000                   // 기본값 2000&#13;&#10;&#13;&#10;    // 사용할 시간 단위 (테스트 모드에 따라 동적으로 결정)&#13;&#10;    val TIME_UNIT_MILLIS: Long&#13;&#10;        get() = when (currentTestMode) {&#13;&#10;            TEST_MODE_SECOND -&gt; SECOND_IN_MILLIS  // 초 단위 테스트 (1초 = 1일)&#13;&#10;            TEST_MODE_MINUTE -&gt; MINUTE_IN_MILLIS  // 분 단위 테스트 (1분 = 1일)&#13;&#10;            else -&gt; DAY_IN_MILLIS                 // 실제 일 단위 (1일 = 24시간)&#13;&#10;        }&#13;&#10;&#13;&#10;    // 프로그레스바용 시간 단위 (테스트 모드와 동일하게 설정)&#13;&#10;    val PROGRESS_TIME_UNIT_MILLIS: Long&#13;&#10;        get() = TIME_UNIT_MILLIS&#13;&#10;&#13;&#10;    // 단위 텍스트&#13;&#10;    val TIME_UNIT_TEXT: String&#13;&#10;        get() = when (currentTestMode) {&#13;&#10;            TEST_MODE_SECOND -&gt; &quot;초&quot;  // 초 단위 테스트 시 표시 텍스트&#13;&#10;            TEST_MODE_MINUTE -&gt; &quot;분&quot;  // 분 단위 테스트 시 표시 텍스트&#13;&#10;            else -&gt; &quot;일&quot;              // 실제 모드 시 표시 텍스트&#13;&#10;        }&#13;&#10;&#13;&#10;    // 앱 시작 시 설정 불러오기&#13;&#10;    fun init(context: Context) {&#13;&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#13;&#10;        currentTestMode = prefs.getInt(PREF_KEY_TEST_MODE, TEST_MODE_REAL)&#13;&#10;    }&#13;&#10;&#13;&#10;    // 테스트 모드 업데이트&#13;&#10;    fun updateTestMode(mode: Int) {&#13;&#10;        currentTestMode = mode&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/SobrietyRecord.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/SobrietyRecord.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer.utils&#10;&#10;import org.json.JSONArray&#10;import org.json.JSONObject&#10;&#10;/**&#10; * 금주 기록을 저장하는 데이터 클래스&#10; *&#10; * @property id 고유 ID (저장 시간 기반)&#10; * @property startDate 금주 시작 날짜 (문자열 형식: &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10; * @property endDate 금주 종료 날짜 (문자열 형식: &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10; * @property duration 목표 기간 (일 또는 분 단위)&#10; * @property achievedDays 실제 달성한 기간 (일 또는 분 단위, 완료 시 duration과 동일)&#10; * @property achievedLevel 달성한 레벨&#10; * @property levelTitle 달성한 레벨 타이틀&#10; * @property isCompleted 목표를 완료했는지 여부 (true: 완료, false: 중도 포기)&#10; */&#10;data class SobrietyRecord(&#10;    val id: Long,&#10;    val startDate: String,&#10;    val endDate: String,&#10;    val duration: Int,&#10;    val achievedDays: Int = duration, // 완료된 경우 기본값은 전체 기간&#10;    val achievedLevel: Int,&#10;    val levelTitle: String,&#10;    val isCompleted: Boolean&#10;) {&#10;    /**&#10;     * 기록을 JSONObject로 변환&#10;     */&#10;    fun toJson(): JSONObject {&#10;        val json = JSONObject()&#10;        json.put(&quot;id&quot;, id)&#10;        json.put(&quot;startDate&quot;, startDate)&#10;        json.put(&quot;endDate&quot;, endDate)&#10;        json.put(&quot;duration&quot;, duration)&#10;        json.put(&quot;achievedDays&quot;, achievedDays)&#10;        json.put(&quot;achievedLevel&quot;, achievedLevel)&#10;        json.put(&quot;levelTitle&quot;, levelTitle)&#10;        json.put(&quot;isCompleted&quot;, isCompleted)&#10;        return json&#10;    }&#10;&#10;    companion object {&#10;        /**&#10;         * JSONObject에서 기록 객체 생성&#10;         */&#10;        fun fromJson(json: JSONObject): SobrietyRecord {&#10;            return SobrietyRecord(&#10;                id = json.getLong(&quot;id&quot;),&#10;                startDate = json.getString(&quot;startDate&quot;),&#10;                endDate = json.getString(&quot;endDate&quot;),&#10;                duration = json.getInt(&quot;duration&quot;),&#10;                achievedDays = json.getInt(&quot;achievedDays&quot;),&#10;                achievedLevel = json.getInt(&quot;achievedLevel&quot;),&#10;                levelTitle = json.getString(&quot;levelTitle&quot;),&#10;                isCompleted = json.getBoolean(&quot;isCompleted&quot;)&#10;            )&#10;        }&#10;&#10;        /**&#10;         * 기록 목록을 JSON 문자열로 변환&#10;         */&#10;        fun toJsonArray(records: List&lt;SobrietyRecord&gt;): String {&#10;            val jsonArray = JSONArray()&#10;            records.forEach { record -&gt;&#10;                jsonArray.put(record.toJson())&#10;            }&#10;            return jsonArray.toString()&#10;        }&#10;&#10;        /**&#10;         * JSON 문자열에서 기록 목록 생성&#10;         */&#10;        fun fromJsonArray(jsonString: String): List&lt;SobrietyRecord&gt; {&#10;            val records = mutableListOf&lt;SobrietyRecord&gt;()&#10;            try {&#10;                val jsonArray = JSONArray(jsonString)&#10;                for (i in 0 until jsonArray.length()) {&#10;                    val jsonObject = jsonArray.getJSONObject(i)&#10;                    records.add(fromJson(jsonObject))&#10;                }&#10;            } catch (e: Exception) {&#10;                // JSON 파싱 오류 시 빈 목록 반환&#10;                e.printStackTrace()&#10;            }&#10;            return records&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#13;&#10;&#13;&#10;import org.json.JSONArray&#13;&#10;import org.json.JSONObject&#13;&#10;&#13;&#10;/**&#13;&#10; * 금주 기록을 저장하는 데이터 클래스&#13;&#10; *&#13;&#10; * @property id 고유 ID (저장 시간 기반)&#13;&#10; * @property startDate 금주 시작 날짜 (문자열 형식: &quot;yyyy-MM-dd HH:mm:ss&quot;)&#13;&#10; * @property endDate 금주 종료 날짜 (문자열 형식: &quot;yyyy-MM-dd HH:mm:ss&quot;)&#13;&#10; * @property duration 목표 기간 (일 또는 분 단위)&#13;&#10; * @property achievedDays 실제 달성한 기간 (일 또는 분 단위, 완료 시 duration과 동일)&#13;&#10; * @property achievedLevel 달성한 레벨&#13;&#10; * @property levelTitle 달성한 레벨 타이틀&#13;&#10; * @property isCompleted 목표를 완료했는지 여부 (true: 완료, false: 중도 포기)&#13;&#10; */&#13;&#10;data class SobrietyRecord(&#13;&#10;    val id: Long,&#13;&#10;    val startDate: String,&#13;&#10;    val endDate: String,&#13;&#10;    val duration: Int,&#13;&#10;    val achievedDays: Int = duration, // 완료된 경우 기본값은 전체 기간&#13;&#10;    val achievedLevel: Int,&#13;&#10;    val levelTitle: String,&#13;&#10;    val isCompleted: Boolean&#13;&#10;) {&#13;&#10;    /**&#13;&#10;     * 달성률 계산 (백분율)&#13;&#10;     */&#13;&#10;    val achievedPercentage: Int&#13;&#10;        get() = if (duration &gt; 0) {&#13;&#10;            ((achievedDays.toFloat() / duration.toFloat()) * 100).toInt()&#13;&#10;        } else {&#13;&#10;            0&#13;&#10;        }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 기록을 JSONObject로 변환&#13;&#10;     */&#13;&#10;    fun toJson(): JSONObject {&#13;&#10;        val json = JSONObject()&#13;&#10;        json.put(&quot;id&quot;, id)&#13;&#10;        json.put(&quot;startDate&quot;, startDate)&#13;&#10;        json.put(&quot;endDate&quot;, endDate)&#13;&#10;        json.put(&quot;duration&quot;, duration)&#13;&#10;        json.put(&quot;achievedDays&quot;, achievedDays)&#13;&#10;        json.put(&quot;achievedLevel&quot;, achievedLevel)&#13;&#10;        json.put(&quot;levelTitle&quot;, levelTitle)&#13;&#10;        json.put(&quot;isCompleted&quot;, isCompleted)&#13;&#10;        return json&#13;&#10;    }&#13;&#10;&#13;&#10;    companion object {&#13;&#10;        /**&#13;&#10;         * JSONObject에서 기록 객체 생성&#13;&#10;         */&#13;&#10;        fun fromJson(json: JSONObject): SobrietyRecord {&#13;&#10;            return SobrietyRecord(&#13;&#10;                id = json.getLong(&quot;id&quot;),&#13;&#10;                startDate = json.getString(&quot;startDate&quot;),&#13;&#10;                endDate = json.getString(&quot;endDate&quot;),&#13;&#10;                duration = json.getInt(&quot;duration&quot;),&#13;&#10;                achievedDays = json.getInt(&quot;achievedDays&quot;),&#13;&#10;                achievedLevel = json.getInt(&quot;achievedLevel&quot;),&#13;&#10;                levelTitle = json.getString(&quot;levelTitle&quot;),&#13;&#10;                isCompleted = json.getBoolean(&quot;isCompleted&quot;)&#13;&#10;            )&#13;&#10;        }&#13;&#10;&#13;&#10;        /**&#13;&#10;         * 기록 목록을 JSON 문자열로 변환&#13;&#10;         */&#13;&#10;        fun toJsonArray(records: List&lt;SobrietyRecord&gt;): String {&#13;&#10;            val jsonArray = JSONArray()&#13;&#10;            records.forEach { record -&gt;&#13;&#10;                jsonArray.put(record.toJson())&#13;&#10;            }&#13;&#10;            return jsonArray.toString()&#13;&#10;        }&#13;&#10;&#13;&#10;        /**&#13;&#10;         * JSON 문자열에서 기록 목록 생성&#13;&#10;         */&#13;&#10;        fun fromJsonArray(jsonString: String): List&lt;SobrietyRecord&gt; {&#13;&#10;            val records = mutableListOf&lt;SobrietyRecord&gt;()&#13;&#10;            try {&#13;&#10;                val jsonArray = JSONArray(jsonString)&#13;&#10;                for (i in 0 until jsonArray.length()) {&#13;&#10;                    val jsonObject = jsonArray.getJSONObject(i)&#13;&#10;                    records.add(fromJson(jsonObject))&#13;&#10;                }&#13;&#10;            } catch (e: Exception) {&#13;&#10;                // JSON 파싱 오류 시 빈 목록 반환&#13;&#10;                e.printStackTrace()&#13;&#10;            }&#13;&#10;            return records&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>