<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.AlcoholicTimerApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StartActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StatusActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RecordsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RecordSummaryActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ChallengeActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MessageActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SettingsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:label=&quot;설정&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.NotificationsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:name=&quot;.AlcoholicTimerApplication&quot;&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:launchMode=&quot;singleTask&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StartActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:launchMode=&quot;singleTop&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StatusActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:launchMode=&quot;singleTop&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.RecordsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.RecordSummaryActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ChallengeActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MessageActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.SettingsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:label=&quot;설정&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.NotificationsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.google.android.material.navigation.NavigationView&#10;import java.util.Date&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity() {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 최신 상태로 업데이트&#10;            updateNavigationDrawer()&#10;            drawerLayout.open()&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener { menuItem -&gt;&#10;            when (menuItem.itemId) {&#10;                R.id.nav_start -&gt; {&#10;                    val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                    val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;                    if (hasStarted) {&#10;                        // 금주 중일 때는 상태 화면으로 이동&#10;                        if (this !is StatusActivity) {&#10;                            val intent = Intent(this, StatusActivity::class.java)&#10;                            // 기존 StatusActivity를 재사용하기 위한 플래그 설정&#10;                            intent.flags = Intent.FLAG_ACTIVITY_REORDER_TO_FRONT&#10;                            startActivity(intent)&#10;                            if (this !is MainActivity) {&#10;                                finish()&#10;                            }&#10;                        }&#10;                    } else {&#10;                        // 금주 중이 아닐 때는 시작 화면으로 이동&#10;                        if (this !is StartActivity) {&#10;                            val intent = Intent(this, StartActivity::class.java)&#10;                            startActivity(intent)&#10;                            if (this !is MainActivity) {&#10;                                finish()&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_records -&gt; {&#10;                    // 활동 보기 화면으로 이동&#10;                    Toast.makeText(this, &quot;활동 보기로 이동합니다&quot;, Toast.LENGTH_SHORT).show()&#10;                    if (this !is RecordsActivity) {&#10;                        val intent = Intent(this, RecordsActivity::class.java)&#10;                        startActivity(intent)&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_challenge -&gt; {&#10;                    // 챌린지 화면으로 이동&#10;                    if (this !is ChallengeActivity) {&#10;                        val intent = Intent(this, ChallengeActivity::class.java)&#10;                        startActivity(intent)&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_messages -&gt; {&#10;                    // 응원 메시지 화면으로 이동&#10;                    if (this !is MessageActivity) {&#10;                        val intent = Intent(this, MessageActivity::class.java)&#10;                        startActivity(intent)&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    // 알림함 화면으로 이동&#10;                    if (this !is NotificationsActivity) {&#10;                        val intent = Intent(this, NotificationsActivity::class.java)&#10;                        startActivity(intent)&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_settings -&gt; {&#10;                    // 설정 화면으로 이동&#10;                    val intent = Intent(this, SettingsActivity::class.java)&#10;                    startActivity(intent)&#10;                    // 설정 화면에서는 현재 화면을 유지&#10;                }&#10;            }&#10;            // 메뉴 선택 후 드로어 닫기&#10;            drawerLayout.close()&#10;            true&#10;        }&#10;&#10;        // 특정 화면에 필요한 컨텐츠 뷰 설정&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태와 헤더 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationDrawer() {&#10;        // 네비게이션 메뉴 상태 업데이트&#10;        updateNavigationMenuState()&#10;&#10;        // 네비게이션 헤더 정보 업데이트&#10;        updateNavigationHeader()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트를 '금주 상태'로 변경합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트 변경&#10;        val startMenuItem = navigationView.menu.findItem(R.id.nav_start)&#10;        startMenuItem.isEnabled = true&#10;        if (hasStarted) {&#10;            startMenuItem.title = &quot;금주 상태&quot;&#10;        } else {&#10;            startMenuItem.title = &quot;금주&quot;&#10;        }&#10;&#10;        // 활동 보기 메뉴는 항상 활성화&#10;        val recordsMenuItem = navigationView.menu.findItem(R.id.nav_records)&#10;        recordsMenuItem.isEnabled = true&#10;    }&#10;&#10;    /**&#10;     * 네비게이션 헤더의 사용자 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationHeader() {&#10;        val headerView = navigationView.getHeaderView(0)&#10;        if (headerView != null) {&#10;            val tvUserNickname = headerView.findViewById&lt;TextView&gt;(R.id.tvUserNickname)&#10;            val tvUserLevelDays = headerView.findViewById&lt;TextView&gt;(R.id.tvUserLevelDays)&#10;&#10;            // 사용자 이름은 기본값으로 &quot;알중이&quot; 사용&#10;            tvUserNickname.text = &quot;알중이&quot;&#10;&#10;            // 금주 상태에 따른 레벨 및 일수 정보 업데이트&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            if (sharedPref.contains(&quot;start_time&quot;)) {&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, Date().time)&#10;                val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;                // 레벨 계산 (시간 단위에 따라 적절한 마일스톤 사용)&#10;                val adjustedMilestones = when {&#10;                    Constants.isSecondTestMode -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                    Constants.isMinuteTestMode -&gt; listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;                    else -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                }&#10;&#10;                var currentLevel = 1&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i + 1&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                tvUserLevelDays.text = &quot;Level $currentLevel · ${timePassed}${Constants.TIME_UNIT_TEXT} 금주 중&quot;&#10;            } else {&#10;                tvUserLevelDays.text = &quot;금주를 시작해보세요!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;&#10;    /**&#10;     * 액티비티가 새 인텐트로 재사용될 때 수행할 작업을 정의합니다.&#10;     * 자식 클래스에서 오버라이드할 수 있습니다.&#10;     */&#10;    open fun handleNewIntent(intent: Intent?) {&#10;        // 기본 구현은 아무 작업도 수행하지 않습니다&#10;    }&#10;&#10;    /**&#10;     * 효과 없이 액티비티 전환&#10;     */&#10;    protected fun navigateToActivity(activityClass: Class&lt;*&gt;) {&#10;        val intent = Intent(this, activityClass)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;&#10;    /**&#10;     * 액티비티 종료 시 효과 없이 전환&#10;     */&#10;    override fun finish() {&#10;        super.finish()&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.google.android.material.navigation.NavigationView&#10;import java.util.Date&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity() {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 최신 상태로 업데이트&#10;            updateNavigationDrawer()&#10;            drawerLayout.open()&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener { menuItem -&gt;&#10;            when (menuItem.itemId) {&#10;                R.id.nav_start -&gt; {&#10;                    val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                    val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;                    if (hasStarted) {&#10;                        // 금주 중일 때는 상태 화면으로 이동&#10;                        if (this !is StatusActivity) {&#10;                            val intent = Intent(this, StatusActivity::class.java)&#10;                            // 기존 StatusActivity를 재사용하기 위한 플래그 설정&#10;                            intent.flags = Intent.FLAG_ACTIVITY_REORDER_TO_FRONT&#10;                            startActivity(intent)&#10;                            if (this !is MainActivity) {&#10;                                finish()&#10;                            }&#10;                        }&#10;                    } else {&#10;                        // 금주 중이 아닐 때는 시작 화면으로 이동&#10;                        if (this !is StartActivity) {&#10;                            val intent = Intent(this, StartActivity::class.java)&#10;                            startActivity(intent)&#10;                            if (this !is MainActivity) {&#10;                                finish()&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_records -&gt; {&#10;                    // 활동 보기 화면으로 이동&#10;                    if (this !is RecordsActivity) {&#10;                        val intent = Intent(this, RecordsActivity::class.java)&#10;                        startActivity(intent)&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_challenge -&gt; {&#10;                    // 챌린지 화면으로 이동&#10;                    if (this !is ChallengeActivity) {&#10;                        val intent = Intent(this, ChallengeActivity::class.java)&#10;                        startActivity(intent)&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_messages -&gt; {&#10;                    // 응원 메시지 화면으로 이동&#10;                    if (this !is MessageActivity) {&#10;                        val intent = Intent(this, MessageActivity::class.java)&#10;                        startActivity(intent)&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    // 알림함 화면으로 이동&#10;                    if (this !is NotificationsActivity) {&#10;                        val intent = Intent(this, NotificationsActivity::class.java)&#10;                        startActivity(intent)&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_settings -&gt; {&#10;                    // 설정 화면으로 이동&#10;                    val intent = Intent(this, SettingsActivity::class.java)&#10;                    startActivity(intent)&#10;                    // 설정 화면에서는 현재 화면을 유지&#10;                }&#10;            }&#10;            // 메뉴 선택 후 드로어 닫기&#10;            drawerLayout.close()&#10;            true&#10;        }&#10;&#10;        // 특정 화면에 필요한 컨텐츠 뷰 설정&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태와 헤더 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationDrawer() {&#10;        // 네비게이션 메뉴 상태 업데이트&#10;        updateNavigationMenuState()&#10;&#10;        // 네비게이션 헤더 정보 업데이트&#10;        updateNavigationHeader()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트를 '금주 상태'로 변경합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트 변경&#10;        val startMenuItem = navigationView.menu.findItem(R.id.nav_start)&#10;        startMenuItem.isEnabled = true&#10;        if (hasStarted) {&#10;            startMenuItem.title = &quot;금주 상태&quot;&#10;        } else {&#10;            startMenuItem.title = &quot;금주&quot;&#10;        }&#10;&#10;        // 활동 보기 메뉴는 항상 활성화&#10;        val recordsMenuItem = navigationView.menu.findItem(R.id.nav_records)&#10;        recordsMenuItem.isEnabled = true&#10;    }&#10;&#10;    /**&#10;     * 네비게이션 헤더의 사용자 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationHeader() {&#10;        val headerView = navigationView.getHeaderView(0)&#10;        if (headerView != null) {&#10;            val tvUserNickname = headerView.findViewById&lt;TextView&gt;(R.id.tvUserNickname)&#10;            val tvUserLevelDays = headerView.findViewById&lt;TextView&gt;(R.id.tvUserLevelDays)&#10;&#10;            // 사용자 이름은 기본값으로 &quot;알중이&quot; 사용&#10;            tvUserNickname.text = &quot;알중이&quot;&#10;&#10;            // 금주 상태에 따른 레벨 및 일수 정보 업데이트&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            if (sharedPref.contains(&quot;start_time&quot;)) {&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, Date().time)&#10;                val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;                // 레벨 계산 (시간 단위에 따라 적절한 마일스톤 사용)&#10;                val adjustedMilestones = when {&#10;                    Constants.isSecondTestMode -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                    Constants.isMinuteTestMode -&gt; listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;                    else -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                }&#10;&#10;                var currentLevel = 1&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i + 1&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                tvUserLevelDays.text = &quot;Level $currentLevel · ${timePassed}${Constants.TIME_UNIT_TEXT} 금주 중&quot;&#10;            } else {&#10;                tvUserLevelDays.text = &quot;금주를 시작해보세요!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;&#10;    /**&#10;     * 액티비티가 새 인텐트로 재사용될 때 수행할 작업을 정의합니다.&#10;     * 자식 클래스에서 오버라이드할 수 있습니다.&#10;     */&#10;    open fun handleNewIntent(intent: Intent?) {&#10;        // 기본 구현은 아무 작업도 수행하지 않습니다&#10;    }&#10;&#10;    /**&#10;     * 효과 없이 액티비티 전환&#10;     */&#10;    protected fun navigateToActivity(activityClass: Class&lt;*&gt;) {&#10;        val intent = Intent(this, activityClass)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;&#10;    /**&#10;     * 액티비티 종료 시 효과 없이 전환&#10;     */&#10;    override fun finish() {&#10;        super.finish()&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/MainActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import com.example.alcoholictimer.utils.Constants&#10;&#10;class MainActivity : BaseActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 금주 타이머가 진행 중인지 확인&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val isSobrietyStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주가 진행 중이면 StatusActivity로 자동 이동&#10;        if (isSobrietyStarted) {&#10;            val intent = Intent(this, StatusActivity::class.java)&#10;            startActivity(intent)&#10;            // MainActivity는 종료하지 않고 백스택에 남겨둠&#10;        }&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // MainActivity의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        LayoutInflater.from(this).inflate(R.layout.content_main, contentFrame, true)&#10;    }&#10;&#10;    private fun checkLoginStatusAndNavigate() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val intent = if (sharedPref.contains(&quot;start_time&quot;)) {&#10;            Intent(this, StatusActivity::class.java)&#10;        } else {&#10;            Intent(this, StartActivity::class.java)&#10;        }&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;&#10;class MainActivity : BaseActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        &#10;        // 금주 타이머가 진행 중인지 확인하고 적절한 화면으로 이동&#10;        checkCurrentStateAndNavigate()&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        LayoutInflater.from(this).inflate(R.layout.content_main, contentFrame, true)&#10;    }&#10;&#10;    private fun checkCurrentStateAndNavigate() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val isSobrietyStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        if (isSobrietyStarted) {&#10;            // 금주가 진행 중이면 StatusActivity로 이동&#10;            val intent = Intent(this, StatusActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP)&#10;            startActivity(intent)&#10;            overridePendingTransition(0, 0)&#10;        } else {&#10;            // 금주가 시작되지 않았으면 StartActivity로 이동&#10;            val intent = Intent(this, StartActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP)&#10;            startActivity(intent)&#10;            overridePendingTransition(0, 0)&#10;        }&#10;        // MainActivity는 백스택에서 제거&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordsActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.graphics.Color&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.FrameLayout&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;import java.time.temporal.ChronoUnit&#10;import java.time.temporal.WeekFields&#10;import java.util.Locale&#10;&#10;class RecordsActivity : BaseActivity() {&#10;&#10;    private lateinit var tvWeeklyCount: TextView&#10;    private lateinit var tvMonthlyCount: TextView&#10;    private lateinit var tvTotalCount: TextView&#10;    private lateinit var tvSummary: TextView&#10;    private lateinit var tvPeriodSummary: TextView&#10;    private lateinit var tvTotalAbstinence: TextView&#10;    private lateinit var tvLongestStreak: TextView&#10;    private lateinit var tvLastFailure: TextView&#10;    private lateinit var chartContainer: FrameLayout&#10;    private lateinit var rvLevelHistory: RecyclerView&#10;&#10;    private lateinit var btnWeek: Button&#10;    private lateinit var btnMonth: Button&#10;    private lateinit var btnYear: Button&#10;    private lateinit var btnAll: Button&#10;&#10;    private var startDate: LocalDate? = null&#10;    private var currentPeriod = Period.ALL&#10;&#10;    private enum class Period {&#10;        WEEK, MONTH, YEAR, ALL&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 데이터 로드 및 표시&#10;        loadAndDisplayData()&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // RecordsActivity의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        LayoutInflater.from(this).inflate(R.layout.activity_records, contentFrame, true)&#10;&#10;        // View 초기화&#10;        initViews()&#10;&#10;        // 버튼 클릭 리스너 설정&#10;        setupButtonListeners()&#10;    }&#10;&#10;    private fun initViews() {&#10;        tvWeeklyCount = findViewById(R.id.tvWeeklyCount)&#10;        tvMonthlyCount = findViewById(R.id.tvMonthlyCount)&#10;        tvTotalCount = findViewById(R.id.tvTotalCount)&#10;        tvSummary = findViewById(R.id.tvSummary)&#10;        tvPeriodSummary = findViewById(R.id.tvPeriodSummary)&#10;        tvTotalAbstinence = findViewById(R.id.tvTotalAbstinence)&#10;        tvLongestStreak = findViewById(R.id.tvLongestStreak)&#10;        tvLastFailure = findViewById(R.id.tvLastFailure)&#10;        chartContainer = findViewById(R.id.chartContainer)&#10;        rvLevelHistory = findViewById(R.id.rvLevelHistory)&#10;&#10;        btnWeek = findViewById(R.id.btnWeek)&#10;        btnMonth = findViewById(R.id.btnMonth)&#10;        btnYear = findViewById(R.id.btnYear)&#10;        btnAll = findViewById(R.id.btnAll)&#10;&#10;        // RecyclerView 설정&#10;        rvLevelHistory.layoutManager = LinearLayoutManager(this)&#10;    }&#10;&#10;    private fun setupButtonListeners() {&#10;        btnWeek.setOnClickListener {&#10;            currentPeriod = Period.WEEK&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnMonth.setOnClickListener {&#10;            currentPeriod = Period.MONTH&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnYear.setOnClickListener {&#10;            currentPeriod = Period.YEAR&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnAll.setOnClickListener {&#10;            currentPeriod = Period.ALL&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;    }&#10;&#10;    private fun updatePeriodUI() {&#10;        // 모든 버튼 기본 스타일로 초기화&#10;        btnWeek.setBackgroundColor(Color.LTGRAY)&#10;        btnMonth.setBackgroundColor(Color.LTGRAY)&#10;        btnYear.setBackgroundColor(Color.LTGRAY)&#10;        btnAll.setBackgroundColor(Color.LTGRAY)&#10;&#10;        // 선택된 버튼 강조&#10;        when(currentPeriod) {&#10;            Period.WEEK -&gt; {&#10;                btnWeek.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 주&quot;&#10;            }&#10;            Period.MONTH -&gt; {&#10;                btnMonth.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 월&quot;&#10;            }&#10;            Period.YEAR -&gt; {&#10;                btnYear.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 년&quot;&#10;            }&#10;            Period.ALL -&gt; {&#10;                btnAll.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 전체&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadAndDisplayData() {&#10;        // SharedPreferences에서 시작일 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;AlcoholicPrefs&quot;, MODE_PRIVATE)&#10;        val startDateStr = sharedPref.getString(&quot;start_date&quot;, null)&#10;&#10;        if (startDateStr != null) {&#10;            startDate = LocalDate.parse(startDateStr)&#10;            val today = LocalDate.now()&#10;&#10;            // 기본 통계 업데이트&#10;            updateBasicStatistics(today)&#10;&#10;            // 기간별 통계 업데이트&#10;            updatePeriodStatistics(today)&#10;&#10;            // 레벨 히스토리 업데이트&#10;            updateLevelHistory()&#10;        }&#10;    }&#10;&#10;    private fun updateBasicStatistics(today: LocalDate) {&#10;        startDate?.let { start -&gt;&#10;            // 전체 금주 일수&#10;            val totalDays = ChronoUnit.DAYS.between(start, today).toInt() + 1 // 오늘 포함&#10;&#10;            // 이번 주 금주 일수&#10;            val weekFields = WeekFields.of(Locale.getDefault())&#10;            val thisWeekStart = today.with(weekFields.dayOfWeek(), 1)&#10;            val weeklyDays = if (start.isAfter(thisWeekStart)) {&#10;                ChronoUnit.DAYS.between(start, today).toInt() + 1&#10;            } else {&#10;                ChronoUnit.DAYS.between(thisWeekStart, today).toInt() + 1&#10;            }&#10;&#10;            // 이번 달 금주 일수&#10;            val thisMonthStart = today.withDayOfMonth(1)&#10;            val monthlyDays = if (start.isAfter(thisMonthStart)) {&#10;                ChronoUnit.DAYS.between(start, today).toInt() + 1&#10;            } else {&#10;                ChronoUnit.DAYS.between(thisMonthStart, today).toInt() + 1&#10;            }&#10;&#10;            // UI 업데이트&#10;            tvWeeklyCount.text = &quot;${weeklyDays}일&quot;&#10;            tvMonthlyCount.text = &quot;${monthlyDays}일&quot;&#10;            tvTotalCount.text = &quot;${totalDays}일&quot;&#10;&#10;            // 요약 메시지&#10;            val summaryMessage = when {&#10;                totalDays &gt;= 365 -&gt; &quot;1년 이상 금주를 실천하셨네요! 정말 대단합니다! &quot;&#10;                totalDays &gt;= 180 -&gt; &quot;6개월 이상 금주를 지속하고 계시네요! &quot;&#10;                totalDays &gt;= 90 -&gt; &quot;3개월 동안 꾸준히 실천하셨어요! &quot;&#10;                totalDays &gt;= 30 -&gt; &quot;한 달 동안 잘 해내고 계세요! ⭐&quot;&#10;                else -&gt; &quot;금주를 시작한지 ${totalDays}일이 지났습니다.&quot;&#10;            }&#10;            tvSummary.text = summaryMessage&#10;&#10;            // 최고 기록 업데이트&#10;            tvTotalAbstinence.text = &quot;전체 누적 금주 일수: ${totalDays}일&quot;&#10;            tvLongestStreak.text = &quot;최장 연속 금주 기록: ${totalDays}일&quot; // 예제에서는 실패 없이 연속으로 진행&#10;            tvLastFailure.text = &quot;마지막 금주 실패: 없음&quot; // 예제에서는 실패가 없다고 가정&#10;        }&#10;    }&#10;&#10;    private fun updatePeriodStatistics(today: LocalDate) {&#10;        // 여기서 기간별 통계를 표시할 수 있습니다&#10;        // 이 예제에서는 단순화를 위해 코드를 생략합니다&#10;        // 실제로는 기간에 따른 그래프 등을 표시할 수 있습니다&#10;    }&#10;&#10;    private fun updateLevelHistory() {&#10;        // 예시 데이터 (실제로는 SharedPreferences나 DB에서 가져와야 함)&#10;        val formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;)&#10;        val levelHistory = mutableListOf&lt;LevelHistoryItem&gt;()&#10;&#10;        startDate?.let { start -&gt;&#10;            val today = LocalDate.now()&#10;            var currentDate = start&#10;            var level = 1&#10;&#10;            // 레벨 달성 예시 데이터 생성&#10;            // 실제 앱에서는 저장된 레벨 달성 히스토리를 가져와야 함&#10;            while (!currentDate.isAfter(today) &amp;&amp; level &lt;= 7) {&#10;                // 7일마다 레벨업 (예시)&#10;                val daysBetween = ChronoUnit.DAYS.between(start, currentDate)&#10;                if (daysBetween % 7L == 0L) {&#10;                    levelHistory.add(LevelHistoryItem(&#10;                        currentDate.format(formatter),&#10;                        &quot;Level ${level} 달성!&quot;&#10;                    ))&#10;                    level++&#10;                }&#10;                // 일부 날짜는 금주 성공 기록 추가&#10;                else if (daysBetween % 3L == 0L) {&#10;                    levelHistory.add(LevelHistoryItem(&#10;                        currentDate.format(formatter),&#10;                        &quot;금주 성공&quot;&#10;                    ))&#10;                }&#10;&#10;                currentDate = currentDate.plusDays(1)&#10;            }&#10;&#10;            // RecyclerView에 어댑터 설정&#10;            rvLevelHistory.adapter = LevelHistoryAdapter(levelHistory)&#10;        }&#10;    }&#10;&#10;    private fun navigateToMain() {&#10;        val intent = Intent(this, MainActivity::class.java)&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.graphics.Color&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.FrameLayout&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;import java.time.temporal.ChronoUnit&#10;import java.time.temporal.WeekFields&#10;import java.util.Locale&#10;&#10;class RecordsActivity : BaseActivity() {&#10;&#10;    private lateinit var tvWeeklyCount: TextView&#10;    private lateinit var tvMonthlyCount: TextView&#10;    private lateinit var tvTotalCount: TextView&#10;    private lateinit var tvSummary: TextView&#10;    private lateinit var tvPeriodSummary: TextView&#10;    private lateinit var tvTotalAbstinence: TextView&#10;    private lateinit var tvLongestStreak: TextView&#10;    private lateinit var tvLastFailure: TextView&#10;    private lateinit var chartContainer: FrameLayout&#10;    private lateinit var rvLevelHistory: RecyclerView&#10;&#10;    private lateinit var btnWeek: Button&#10;    private lateinit var btnMonth: Button&#10;    private lateinit var btnYear: Button&#10;    private lateinit var btnAll: Button&#10;&#10;    private var startDate: LocalDate? = null&#10;    private var currentPeriod = Period.ALL&#10;&#10;    private enum class Period {&#10;        WEEK, MONTH, YEAR, ALL&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 데이터 로드 및 표시&#10;        loadAndDisplayData()&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // RecordsActivity의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        LayoutInflater.from(this).inflate(R.layout.activity_records, contentFrame, true)&#10;&#10;        // View 초기화&#10;        initViews()&#10;&#10;        // 버튼 클릭 리스너 설정&#10;        setupButtonListeners()&#10;    }&#10;&#10;    private fun initViews() {&#10;        tvWeeklyCount = findViewById(R.id.tvWeeklyCount)&#10;        tvMonthlyCount = findViewById(R.id.tvMonthlyCount)&#10;        tvTotalCount = findViewById(R.id.tvTotalCount)&#10;        tvSummary = findViewById(R.id.tvSummary)&#10;        tvPeriodSummary = findViewById(R.id.tvPeriodSummary)&#10;        tvTotalAbstinence = findViewById(R.id.tvTotalAbstinence)&#10;        tvLongestStreak = findViewById(R.id.tvLongestStreak)&#10;        tvLastFailure = findViewById(R.id.tvLastFailure)&#10;        chartContainer = findViewById(R.id.chartContainer)&#10;        rvLevelHistory = findViewById(R.id.rvLevelHistory)&#10;&#10;        btnWeek = findViewById(R.id.btnWeek)&#10;        btnMonth = findViewById(R.id.btnMonth)&#10;        btnYear = findViewById(R.id.btnYear)&#10;        btnAll = findViewById(R.id.btnAll)&#10;&#10;        // RecyclerView 설정&#10;        rvLevelHistory.layoutManager = LinearLayoutManager(this)&#10;    }&#10;&#10;    private fun setupButtonListeners() {&#10;        btnWeek.setOnClickListener {&#10;            currentPeriod = Period.WEEK&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnMonth.setOnClickListener {&#10;            currentPeriod = Period.MONTH&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnYear.setOnClickListener {&#10;            currentPeriod = Period.YEAR&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnAll.setOnClickListener {&#10;            currentPeriod = Period.ALL&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;    }&#10;&#10;    private fun updatePeriodUI() {&#10;        // 모든 버튼 기본 스타일로 초기화&#10;        btnWeek.setBackgroundColor(Color.LTGRAY)&#10;        btnMonth.setBackgroundColor(Color.LTGRAY)&#10;        btnYear.setBackgroundColor(Color.LTGRAY)&#10;        btnAll.setBackgroundColor(Color.LTGRAY)&#10;&#10;        // 선택된 버튼 강조&#10;        when(currentPeriod) {&#10;            Period.WEEK -&gt; {&#10;                btnWeek.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 주&quot;&#10;            }&#10;            Period.MONTH -&gt; {&#10;                btnMonth.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 월&quot;&#10;            }&#10;            Period.YEAR -&gt; {&#10;                btnYear.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 년&quot;&#10;            }&#10;            Period.ALL -&gt; {&#10;                btnAll.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 전체&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadAndDisplayData() {&#10;        // SharedPreferences에서 시작일 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;AlcoholicPrefs&quot;, MODE_PRIVATE)&#10;        val startDateStr = sharedPref.getString(&quot;start_date&quot;, null)&#10;&#10;        if (startDateStr != null) {&#10;            startDate = LocalDate.parse(startDateStr)&#10;            val today = LocalDate.now()&#10;&#10;            // 기본 통계 업데이트&#10;            updateBasicStatistics(today)&#10;&#10;            // 기간별 통계 업데이트&#10;            updatePeriodStatistics(today)&#10;&#10;            // 레벨 히스토리 업데이트&#10;            updateLevelHistory()&#10;        }&#10;    }&#10;&#10;    private fun updateBasicStatistics(today: LocalDate) {&#10;        startDate?.let { start -&gt;&#10;            // 전체 금주 일수&#10;            val totalDays = ChronoUnit.DAYS.between(start, today).toInt() + 1 // 오늘 포함&#10;&#10;            // 이번 주 금주 일수&#10;            val weekFields = WeekFields.of(Locale.getDefault())&#10;            val thisWeekStart = today.with(weekFields.dayOfWeek(), 1)&#10;            val weeklyDays = if (start.isAfter(thisWeekStart)) {&#10;                ChronoUnit.DAYS.between(start, today).toInt() + 1&#10;            } else {&#10;                ChronoUnit.DAYS.between(thisWeekStart, today).toInt() + 1&#10;            }&#10;&#10;            // 이번 달 금주 일수&#10;            val thisMonthStart = today.withDayOfMonth(1)&#10;            val monthlyDays = if (start.isAfter(thisMonthStart)) {&#10;                ChronoUnit.DAYS.between(start, today).toInt() + 1&#10;            } else {&#10;                ChronoUnit.DAYS.between(thisMonthStart, today).toInt() + 1&#10;            }&#10;&#10;            // UI 업데이트&#10;            tvWeeklyCount.text = &quot;${weeklyDays}일&quot;&#10;            tvMonthlyCount.text = &quot;${monthlyDays}일&quot;&#10;            tvTotalCount.text = &quot;${totalDays}일&quot;&#10;&#10;            // 요약 메시지&#10;            val summaryMessage = when {&#10;                totalDays &gt;= 365 -&gt; &quot;1년 이상 금주를 실천하셨네요! 정말 대단합니다! &quot;&#10;                totalDays &gt;= 180 -&gt; &quot;6개월 이상 금주를 지속하고 계시네요! &quot;&#10;                totalDays &gt;= 90 -&gt; &quot;3개월 동안 꾸준히 실천하셨어요! &quot;&#10;                totalDays &gt;= 30 -&gt; &quot;한 달 동안 잘 해내고 계세요! ⭐&quot;&#10;                else -&gt; &quot;금주를 시작한지 ${totalDays}일이 지났습니다.&quot;&#10;            }&#10;            tvSummary.text = summaryMessage&#10;&#10;            // 최고 기록 업데이트&#10;            tvTotalAbstinence.text = &quot;전체 누적 금주 일수: ${totalDays}일&quot;&#10;            tvLongestStreak.text = &quot;최장 연속 금주 기록: ${totalDays}일&quot; // 예제에서는 실패 없이 연속으로 진행&#10;            tvLastFailure.text = &quot;마지막 금주 실패: 없음&quot; // 예제에서는 실패가 없다고 가정&#10;        }&#10;    }&#10;&#10;    private fun updatePeriodStatistics(today: LocalDate) {&#10;        // 여기서 기간별 통계를 표시할 수 있습니다&#10;        // 이 예제에서는 단순화를 위해 코드를 생략합니다&#10;        // 실제로는 기간에 따른 그래프 등을 표시할 수 있습니다&#10;    }&#10;&#10;    private fun updateLevelHistory() {&#10;        // 예시 데이터 (실제로는 SharedPreferences나 DB에서 가져와야 함)&#10;        val formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;)&#10;        val levelHistory = mutableListOf&lt;LevelHistoryItem&gt;()&#10;&#10;        startDate?.let { start -&gt;&#10;            val today = LocalDate.now()&#10;            var currentDate = start&#10;            var level = 1&#10;&#10;            // 레벨 달성 예시 데이터 생성&#10;            // 실제 앱에서는 저장된 레벨 달성 히스토리를 가져와야 함&#10;            while (!currentDate.isAfter(today) &amp;&amp; level &lt;= 7) {&#10;                // 7일마다 레벨업 (예시)&#10;                val daysBetween = ChronoUnit.DAYS.between(start, currentDate)&#10;                if (daysBetween % 7L == 0L) {&#10;                    levelHistory.add(LevelHistoryItem(&#10;                        currentDate.format(formatter),&#10;                        &quot;Level ${level} 달성!&quot;&#10;                    ))&#10;                    level++&#10;                }&#10;                // 일부 날짜는 금주 성공 기록 추가&#10;                else if (daysBetween % 3L == 0L) {&#10;                    levelHistory.add(LevelHistoryItem(&#10;                        currentDate.format(formatter),&#10;                        &quot;금주 성공&quot;&#10;                    ))&#10;                }&#10;&#10;                currentDate = currentDate.plusDays(1)&#10;            }&#10;&#10;            // RecyclerView에 어댑터 설정&#10;            rvLevelHistory.adapter = LevelHistoryAdapter(levelHistory)&#10;        }&#10;    }&#10;&#10;    private fun navigateToMain() {&#10;        val intent = Intent(this, MainActivity::class.java)&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StartActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StartActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.text.InputType&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.utils.Constants&#10;&#10;class StartActivity : BaseActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StartActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_start, contentFrame, true)&#10;&#10;        // 버튼 및 기타 UI 요소에 대한 이벤트 처리&#10;        val btnStart = view.findViewById&lt;Button&gt;(R.id.btnStart)&#10;        val editTextDays = view.findViewById&lt;EditText&gt;(R.id.editTextDays)&#10;        val tvDaysLabel = view.findViewById&lt;TextView&gt;(R.id.tvDaysLabel)&#10;&#10;        // 테스트 모드에 따라 레이블 변경&#10;        tvDaysLabel.text = Constants.TIME_UNIT_TEXT&#10;&#10;        // 기본 숫자 입력 설정&#10;        editTextDays.inputType = InputType.TYPE_CLASS_NUMBER&#10;&#10;        // 시작 버튼 클릭 처리&#10;        btnStart.setOnClickListener {&#10;            val targetTime = editTextDays.text.toString().toIntOrNull() ?: 0&#10;&#10;            if (targetTime &gt; 0) {&#10;                // 사용자 설정을 SharedPreferences에 저장&#10;                val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                with(sharedPref.edit()) {&#10;                    putInt(&quot;target_days&quot;, targetTime)&#10;&#10;                    // 현재 시간을 시작 시간으로 저장&#10;                    putLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;                    apply()&#10;                }&#10;&#10;                Toast.makeText(this, &quot;${targetTime}${Constants.TIME_UNIT_TEXT} 동안 금주를 시작합니다!&quot;, Toast.LENGTH_SHORT).show()&#10;                navigateToStatus()&#10;            } else {&#10;                Toast.makeText(this, &quot;1${Constants.TIME_UNIT_TEXT} 이상의 숫자를 입력해주세요&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun navigateToStatus() {&#10;        val intent = Intent(this, StatusActivity::class.java)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.text.InputType&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import com.example.alcoholictimer.utils.Constants&#10;&#10;class StartActivity : BaseActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StartActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_start, contentFrame, true)&#10;&#10;        // 버튼 및 기타 UI 요소에 대한 이벤트 처리&#10;        val editTextDays = view.findViewById&lt;EditText&gt;(R.id.editTextDays)&#10;        val tvDaysLabel = view.findViewById&lt;TextView&gt;(R.id.tvDaysLabel)&#10;        val btnStart = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStart)&#10;&#10;        // 테스트 모드에 따라 레이블 변경&#10;        tvDaysLabel.text = &quot;금주 목표 ${Constants.TIME_UNIT_TEXT}수&quot;&#10;&#10;        // 기본 숫자 입력 설정&#10;        editTextDays.inputType = InputType.TYPE_CLASS_NUMBER&#10;&#10;        // 시작 버튼 클릭 처리&#10;        btnStart.setOnClickListener {&#10;            val targetTime = editTextDays.text.toString().toIntOrNull() ?: 0&#10;&#10;            if (targetTime &gt; 0) {&#10;                // 사용자 설정을 SharedPreferences에 저장&#10;                val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                with(sharedPref.edit()) {&#10;                    putInt(&quot;target_days&quot;, targetTime)&#10;&#10;                    // 현재 시간을 시작 시간으로 저장&#10;                    putLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;                    apply()&#10;                }&#10;&#10;                Toast.makeText(this, &quot;${targetTime}${Constants.TIME_UNIT_TEXT} 동안 금주를 시작합니다!&quot;, Toast.LENGTH_SHORT).show()&#10;                navigateToStatus()&#10;            } else {&#10;                Toast.makeText(this, &quot;1${Constants.TIME_UNIT_TEXT} 이상의 숫자를 입력해주세요&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun navigateToStatus() {&#10;        val intent = Intent(this, StatusActivity::class.java)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.Timer&#10;import java.util.TimerTask&#10;&#10;class StatusActivity : BaseActivity() {&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#10;    private var goalAchievementChecked = false&#10;&#10;    // 일 단위 레벨 마일스톤 (실제 운영)&#10;    private val levelMilestones = listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;&#10;    // 분 단위 레벨 마일스톤 (테스트 모드)&#10;    private val minuteTestMilestones = listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;&#10;    // 초 단위 레벨 마일스톤 (초 단위 테스트 모드)&#10;    private val secondTestMilestones = listOf(0, 7, 14, 30, 60, 90, 120, 180)&#10;&#10;    private val levelTitles = listOf(&#10;        &quot;새싹 도전자&quot;,&#10;        &quot;첫걸음 성공&quot;,&#10;        &quot;의지의 시작&quot;,&#10;        &quot;한달의 기적&quot;,&#10;        &quot;습관의 탄생&quot;,&#10;        &quot;의지의 달인&quot;,&#10;        &quot;금주의 마스터&quot;,&#10;        &quot;절제의 달인&quot;&#10;    )&#10;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#10;    private var timer: Timer? = null&#10;    private val handler = Handler(Looper.getMainLooper())&#10;&#10;    // UI 요소 참조 저장 변수&#10;    private lateinit var tvDaysCount: TextView&#10;    private lateinit var tvTimeUnit: TextView&#10;    private lateinit var tvMessage: TextView&#10;    private lateinit var progressLevel: ProgressBar&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // 화면이 보일 때 즉시 UI 업데이트 후 타이머 시작&#10;        updateUI()&#10;        startTimer()&#10;&#10;        // 목표 달성 플래그 초기화&#10;        goalAchievementChecked = false&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // 화면이 보이지 않을 때 타이머 정지&#10;        stopTimer()&#10;    }&#10;&#10;    // Activity 클래스의 onNewIntent를 오버라이드&#10;    public override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        // 새 인텐트로 액티비티가 재사용될 때 수행할 작업&#10;        setIntent(intent)&#10;        // UI 즉시 갱신&#10;        updateUI()&#10;    }&#10;&#10;    override fun handleNewIntent(intent: Intent?) {&#10;        // BaseActivity의 handleNewIntent 구현&#10;        updateUI()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        // 기존 타이머가 있다면 중지&#10;        stopTimer()&#10;&#10;        // 새 타이머 생성 및 시작&#10;        timer = Timer()&#10;        timer?.schedule(object : TimerTask() {&#10;            override fun run() {&#10;                // UI 업데이트는 메인 스레드에서 수행해야 함&#10;                handler.post {&#10;                    updateUI()&#10;                }&#10;            }&#10;        }, 1000, 1000) // 1초 후부터 1초마다 업데이트 (초기 UI 업데이트는 onResume에서 처리)&#10;    }&#10;&#10;    private fun stopTimer() {&#10;        timer?.cancel()&#10;        timer = null&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StatusActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_status, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        tvDaysCount = view.findViewById(R.id.tvDaysCount)&#10;        tvTimeUnit = view.findViewById(R.id.tvTimeUnit)&#10;        tvMessage = view.findViewById(R.id.tvMessage)&#10;        progressLevel = view.findViewById(R.id.progressLevel)&#10;&#10;        // 시간 단위 텍스트 설정&#10;        tvTimeUnit.text = Constants.TIME_UNIT_TEXT&#10;&#10;        // 중지 버튼 설정&#10;        val btnStopSobriety = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#10;        btnStopSobriety.setOnClickListener {&#10;            // 기존 AlertDialog 대신 커스텀 다이얼로그 사용&#10;            showCustomStopDialog()&#10;        }&#10;&#10;        // 최초 UI 업데이트&#10;        updateUI()&#10;    }&#10;&#10;    /**&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#10;     */&#10;    private fun updateUI() {&#10;        // SharedPreferences에서 데이터 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;&#10;        // 타이머가 이미 완료되었는지 확인&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        // 타이머가 이미 완료된 상태면 목표 일수를 보여주고 즉시 리턴&#10;        if (completionFlag) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;&#10;            // 완료 상태에서는 프로그레스바를 100%로 설정&#10;            progressLevel.progress = 100&#10;            return&#10;        }&#10;&#10;        // 테스트 모드에 따른 일/분/초 단위의 경과 시간 계산&#10;        val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;        // 초 단위 경과 시간 계산 (모든 모드에서 초 단위로 계산)&#10;        val secondsPassed = (System.currentTimeMillis() - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따라 목표 시간을 초 단위로 변환&#10;        val targetSeconds = when {&#10;            Constants.isSecondTestMode -&gt; targetDays.toLong() // 이미 초 단위&#10;            Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60 // 분을 초로 변환&#10;            else -&gt; targetDays.toLong() * 24 * 60 * 60 // 일을 초로 변환&#10;        }&#10;&#10;        // UI 업데이트 - 마지막 목표 숫자에 도달하면 숫자를 증가시키지 않고 색상 변경&#10;        if (timePassed &gt;= targetDays) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            // 목표 달성 시 주황색으로 변경&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;&#10;            // 프로그레스바를 100%로 강제 설정&#10;            progressLevel.progress = 100&#10;&#10;            // 타이머가 완료되었음을 저장&#10;            with(sharedPref.edit()) {&#10;                putBoolean(&quot;timer_completed&quot;, true)&#10;                apply()&#10;            }&#10;&#10;            // 목표 달성 시 타이머 즉시 중지&#10;            stopTimer()&#10;&#10;            // 목표 달성 여부 메시지&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;&#10;            // 목표 달성 시 처리 (한 번만 실행되도록)&#10;            if (!goalAchievementChecked) {&#10;                goalAchievementChecked = true&#10;&#10;                // 테스트 모드에 따라 적절한 마일스톤 선택&#10;                val adjustedMilestones = when {&#10;                    Constants.isSecondTestMode -&gt; secondTestMilestones&#10;                    Constants.isMinuteTestMode -&gt; minuteTestMilestones&#10;                    else -&gt; levelMilestones&#10;                }&#10;&#10;                // 레벨 계산 (기록 목적으로만 사용)&#10;                var currentLevel = 0&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                // 기록 저장 및 완료 처리&#10;                val recordId = saveCompletedRecord(startTime, System.currentTimeMillis(), targetDays, currentLevel + 1)&#10;&#10;                // 토스트 메시지 표시&#10;                Toast.makeText(this, &quot;목표 달성! 금주가 완료되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;                // 요약 화면으로 이동 (3초 딜레이로 변경)&#10;                handler.postDelayed({&#10;                    val intent = Intent(this, RecordSummaryActivity::class.java)&#10;                    intent.putExtra(&quot;record_id&quot;, recordId)&#10;                    startActivity(intent)&#10;                    finish()&#10;                }, 3000) // 3초 후 이동 (기존 1초에서 변경)&#10;            }&#10;        } else {&#10;            // 아직 목표 달성 전이면 일반적인 숫자 표시 (1일차부터 시작)&#10;            tvDaysCount.text = (timePassed + 1).toString()&#10;            // 기본 색상으로 설정&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.black, theme))&#10;&#10;            // 테스트 모드에 따라 적절한 마일스톤 선택&#10;            val adjustedMilestones = when {&#10;                Constants.isSecondTestMode -&gt; secondTestMilestones&#10;                Constants.isMinuteTestMode -&gt; minuteTestMilestones&#10;                else -&gt; levelMilestones&#10;            }&#10;&#10;            // 레벨 계산 (기록 목적으로만 사용)&#10;            var currentLevel = 0&#10;            for (i in adjustedMilestones.indices) {&#10;                if (timePassed &gt;= adjustedMilestones[i]) {&#10;                    currentLevel = i&#10;                } else {&#10;                    break&#10;                }&#10;            }&#10;&#10;            // 프로그레스바 업데이트 - 초 단위로 계산하여 부드러운 진행을 구현&#10;            val progressPercentage = (secondsPassed.toFloat() / targetSeconds) * 100&#10;            progressLevel.progress = progressPercentage.toInt().coerceIn(0, 100)&#10;&#10;            // 남은 일수 메시지에도 +1 적용하지 않음 (실제 목표까지 남은 날짜를 정확하게 표시)&#10;            tvMessage.text = &quot;목표까지 ${targetDays - timePassed}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 완료된 금주 기록을 저장합니다&#10;     * @return 저장된 기록의 ID&#10;     */&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 ID 생성&#10;        val recordId = System.currentTimeMillis()&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedLevel = level,&#10;            levelTitle = levelTitles[level - 1],&#10;            isCompleted = true&#10;        )&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;&#10;        // 기록 저장&#10;        with(sharedPref.edit()) {&#10;            putString(&quot;records&quot;, SobrietyRecord.toJsonArray(records))&#10;            apply()&#10;        }&#10;&#10;        // 현재 진행중인 금주 데이터 초기화&#10;        with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;            clear()&#10;            apply()&#10;        }&#10;&#10;        return recordId&#10;    }&#10;&#10;    /**&#10;     * 눈에 잘 보이는 버튼이 있는 커스텀 중지 확인 다이얼로그를 표시합니다.&#10;     */&#10;    private fun showCustomStopDialog() {&#10;        // 커스텀 다이얼로그 생성&#10;        val dialog = android.app.Dialog(this)&#10;        dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#10;        dialog.setContentView(com.example.alcoholictimer.R.layout.dialog_stop_sobriety)&#10;&#10;        // 다이얼로그 배경을 투명하게 설정하고 외부 영역 클릭으로 닫히지 않게 설정&#10;        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)&#10;        dialog.setCancelable(false)&#10;&#10;        // 취소 버튼 클릭 리스너&#10;        val btnCancel = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnCancel)&#10;        btnCancel.setOnClickListener {&#10;            dialog.dismiss()&#10;        }&#10;&#10;        // 확인 버튼 클릭 리스너&#10;        val btnConfirm = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnConfirm)&#10;        btnConfirm.setOnClickListener {&#10;            dialog.dismiss()&#10;&#10;            // SharedPreferences 초기화&#10;            with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;                clear()&#10;                apply()&#10;            }&#10;&#10;            // 시작 화면으로 이동&#10;            val intent = Intent(this@StatusActivity, MainActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;            startActivity(intent)&#10;            finish()&#10;&#10;            // 토스트 메시지 표시&#10;            Toast.makeText(this@StatusActivity, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        // 다이얼로그 표시&#10;        dialog.show()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#13;&#10;&#13;&#10;import android.content.Intent&#13;&#10;import android.os.Bundle&#13;&#10;import android.os.Handler&#13;&#10;import android.os.Looper&#13;&#10;import android.view.LayoutInflater&#13;&#10;import android.view.ViewGroup&#13;&#10;import android.widget.ProgressBar&#13;&#10;import android.widget.TextView&#13;&#10;import android.widget.Toast&#13;&#10;import com.example.alcoholictimer.utils.Constants&#13;&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#13;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#13;&#10;import java.text.SimpleDateFormat&#13;&#10;import java.util.Date&#13;&#10;import java.util.Locale&#13;&#10;import java.util.Timer&#13;&#10;import java.util.TimerTask&#13;&#10;&#13;&#10;class StatusActivity : BaseActivity() {&#13;&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#13;&#10;    private var goalAchievementChecked = false&#13;&#10;&#13;&#10;    // 일 단위 레벨 마일스톤 (실제 운영)&#13;&#10;    private val levelMilestones = listOf(0, 7, 14, 30, 60, 120, 240, 365)&#13;&#10;&#13;&#10;    // 분 단위 레벨 마일스톤 (테스트 모드)&#13;&#10;    private val minuteTestMilestones = listOf(0, 1, 2, 5, 10, 15, 20, 30)&#13;&#10;&#13;&#10;    // 초 단위 레벨 마일스톤 (초 단위 테스트 모드)&#13;&#10;    private val secondTestMilestones = listOf(0, 7, 14, 30, 60, 90, 120, 180)&#13;&#10;&#13;&#10;    private val levelTitles = listOf(&#13;&#10;        &quot;새싹 도전자&quot;,&#13;&#10;        &quot;첫걸음 성공&quot;,&#13;&#10;        &quot;의지의 시작&quot;,&#13;&#10;        &quot;한달의 기적&quot;,&#13;&#10;        &quot;습관의 탄생&quot;,&#13;&#10;        &quot;의지의 달인&quot;,&#13;&#10;        &quot;금주의 마스터&quot;,&#13;&#10;        &quot;절제의 달인&quot;&#13;&#10;    )&#13;&#10;&#13;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#13;&#10;    private var timer: Timer? = null&#13;&#10;    private val handler = Handler(Looper.getMainLooper())&#13;&#10;&#13;&#10;    // UI 요소 참조 저장 변수&#13;&#10;    private lateinit var tvDaysCount: TextView&#13;&#10;    private lateinit var tvTimeUnit: TextView&#13;&#10;    private lateinit var tvMessage: TextView&#13;&#10;    private lateinit var progressLevel: ProgressBar&#13;&#10;&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun onResume() {&#13;&#10;        super.onResume()&#13;&#10;        // 화면이 보일 때 즉시 UI 업데이트 후 타이머 시작&#13;&#10;        updateUI()&#13;&#10;        startTimer()&#13;&#10;&#13;&#10;        // 목표 달성 플래그 초기화&#13;&#10;        goalAchievementChecked = false&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun onPause() {&#13;&#10;        super.onPause()&#13;&#10;        // 화면이 보이지 않을 때 타이머 정지&#13;&#10;        stopTimer()&#13;&#10;    }&#13;&#10;&#13;&#10;    // Activity 클래스의 onNewIntent를 오버라이드&#13;&#10;    public override fun onNewIntent(intent: Intent) {&#13;&#10;        super.onNewIntent(intent)&#13;&#10;        // 새 인텐트로 액티비티가 재사용될 때 수행할 작업&#13;&#10;        setIntent(intent)&#13;&#10;        // UI 즉시 갱신&#13;&#10;        updateUI()&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun handleNewIntent(intent: Intent?) {&#13;&#10;        // BaseActivity의 handleNewIntent 구현&#13;&#10;        updateUI()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun startTimer() {&#13;&#10;        // 기존 타이머가 있다면 중지&#13;&#10;        stopTimer()&#13;&#10;&#13;&#10;        // 새 타이머 생성 및 시작&#13;&#10;        timer = Timer()&#13;&#10;        timer?.schedule(object : TimerTask() {&#13;&#10;            override fun run() {&#13;&#10;                // UI 업데이트는 메인 스레드에서 수행해야 함&#13;&#10;                handler.post {&#13;&#10;                    updateUI()&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }, 1000, 1000) // 1초 후부터 1초마다 업데이트 (초기 UI 업데이트는 onResume에서 처리)&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun stopTimer() {&#13;&#10;        timer?.cancel()&#13;&#10;        timer = null&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun setupContentView() {&#13;&#10;        // StatusActivity 고유의 컨텐츠를 contentFrame에 추가&#13;&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#13;&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_status, contentFrame, true)&#13;&#10;&#13;&#10;        // UI 요소 초기화&#13;&#10;        tvDaysCount = view.findViewById(R.id.tvDaysCount)&#13;&#10;        tvTimeUnit = view.findViewById(R.id.tvTimeUnit)&#13;&#10;        tvMessage = view.findViewById(R.id.tvMessage)&#13;&#10;        progressLevel = view.findViewById(R.id.progressLevel)&#13;&#10;&#13;&#10;        // 시간 단위 텍스트 설정&#13;&#10;        tvTimeUnit.text = Constants.TIME_UNIT_TEXT&#13;&#10;&#13;&#10;        // 중지 버튼 설정&#13;&#10;        val btnStopSobriety = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#13;&#10;        btnStopSobriety.setOnClickListener {&#13;&#10;            // 기존 AlertDialog 대신 커스텀 다이얼로그 사용&#13;&#10;            showCustomStopDialog()&#13;&#10;        }&#13;&#10;&#13;&#10;        // 최초 UI 업데이트&#13;&#10;        updateUI()&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#13;&#10;     */&#13;&#10;    private fun updateUI() {&#13;&#10;        // SharedPreferences에서 데이터 불러오기&#13;&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#13;&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#13;&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#13;&#10;&#13;&#10;        // 타이머가 이미 완료되었는지 확인&#13;&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#13;&#10;&#13;&#10;        // 타이머가 이미 완료된 상태면 목표 일수를 보여주고 즉시 리턴&#13;&#10;        if (completionFlag) {&#13;&#10;            tvDaysCount.text = targetDays.toString()&#13;&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#13;&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#13;&#10;&#13;&#10;            // 완료 상태에서는 프로그레스바를 100%로 설정&#13;&#10;            progressLevel.progress = 100&#13;&#10;            return&#13;&#10;        }&#13;&#10;&#13;&#10;        // 테스트 모드에 따른 일/분/초 단위의 경과 시간 계산&#13;&#10;        val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#13;&#10;&#13;&#10;        // 초 단위 경과 시간 계산 (모든 모드에서 초 단위로 계산)&#13;&#10;        val secondsPassed = (System.currentTimeMillis() - startTime) / 1000L&#13;&#10;&#13;&#10;        // 테스트 모드에 따라 목표 시간을 초 단위로 변환&#13;&#10;        val targetSeconds = when {&#13;&#10;            Constants.isSecondTestMode -&gt; targetDays.toLong() // 이미 초 단위&#13;&#10;            Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60 // 분을 초로 변환&#13;&#10;            else -&gt; targetDays.toLong() * 24 * 60 * 60 // 일을 초로 변환&#13;&#10;        }&#13;&#10;&#13;&#10;        // UI 업데이트 - 마지막 목표 숫자에 도달하면 숫자를 증가시키지 않고 색상 변경&#13;&#10;        if (timePassed &gt;= targetDays) {&#13;&#10;            tvDaysCount.text = targetDays.toString()&#13;&#10;            // 목표 달성 시 주황색으로 변경&#13;&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#13;&#10;&#13;&#10;            // 프로그레스바를 100%로 강제 설정&#13;&#10;            progressLevel.progress = 100&#13;&#10;&#13;&#10;            // 타이머가 완료되었음을 저장&#13;&#10;            with(sharedPref.edit()) {&#13;&#10;                putBoolean(&quot;timer_completed&quot;, true)&#13;&#10;                apply()&#13;&#10;            }&#13;&#10;&#13;&#10;            // 목표 달성 시 타이머 즉시 중지&#13;&#10;            stopTimer()&#13;&#10;&#13;&#10;            // 목표 달성 여부 메시지&#13;&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#13;&#10;&#13;&#10;            // 목표 달성 시 처리 (한 번만 실행되도록)&#13;&#10;            if (!goalAchievementChecked) {&#13;&#10;                goalAchievementChecked = true&#13;&#10;&#13;&#10;                // 테스트 모드에 따라 적절한 마일스톤 선택&#13;&#10;                val adjustedMilestones = when {&#13;&#10;                    Constants.isSecondTestMode -&gt; secondTestMilestones&#13;&#10;                    Constants.isMinuteTestMode -&gt; minuteTestMilestones&#13;&#10;                    else -&gt; levelMilestones&#13;&#10;                }&#13;&#10;&#13;&#10;                // 레벨 계산 (기록 목적으로만 사용)&#13;&#10;                var currentLevel = 0&#13;&#10;                for (i in adjustedMilestones.indices) {&#13;&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#13;&#10;                        currentLevel = i&#13;&#10;                    } else {&#13;&#10;                        break&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                // 기록 저장 및 완료 처리&#13;&#10;                val recordId = saveCompletedRecord(startTime, System.currentTimeMillis(), targetDays, currentLevel + 1)&#13;&#10;&#13;&#10;                // 토스트 메시지 표시&#13;&#10;                Toast.makeText(this, &quot;목표 달성! 금주가 완료되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;&#13;&#10;                // 요약 화면으로 이동 (3초 딜레이로 변경)&#13;&#10;                handler.postDelayed({&#13;&#10;                    val intent = Intent(this, RecordSummaryActivity::class.java)&#13;&#10;                    intent.putExtra(&quot;record_id&quot;, recordId)&#13;&#10;                    startActivity(intent)&#13;&#10;                    finish()&#13;&#10;                }, 3000) // 3초 후 이동 (기존 1초에서 변경)&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            // 아직 목표 달성 전이면 일반적인 숫자 표시 (1일차부터 시작)&#13;&#10;            tvDaysCount.text = (timePassed + 1).toString()&#13;&#10;            // 기본 색상으로 설정&#13;&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.black, theme))&#13;&#10;&#13;&#10;            // 테스트 모드에 따라 적절한 마일스톤 선택&#13;&#10;            val adjustedMilestones = when {&#13;&#10;                Constants.isSecondTestMode -&gt; secondTestMilestones&#13;&#10;                Constants.isMinuteTestMode -&gt; minuteTestMilestones&#13;&#10;                else -&gt; levelMilestones&#13;&#10;            }&#13;&#10;&#13;&#10;            // 레벨 계산 (기록 목적으로만 사용)&#13;&#10;            var currentLevel = 0&#13;&#10;            for (i in adjustedMilestones.indices) {&#13;&#10;                if (timePassed &gt;= adjustedMilestones[i]) {&#13;&#10;                    currentLevel = i&#13;&#10;                } else {&#13;&#10;                    break&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            // 프로그레스바 업데이트 - 초 단위로 계산하여 부드러운 진행을 구현&#13;&#10;            val progressPercentage = (secondsPassed.toFloat() / targetSeconds) * 100&#13;&#10;            progressLevel.progress = progressPercentage.toInt().coerceIn(0, 100)&#13;&#10;&#13;&#10;            // 남은 일수 메시지에도 +1 적용하지 않음 (실제 목표까지 남은 날짜를 정확하게 표시)&#13;&#10;            tvMessage.text = &quot;목표까지 ${targetDays - timePassed}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 완료된 금주 기록을 저장합니다&#13;&#10;     * @return 저장된 기록의 ID&#13;&#10;     */&#13;&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#13;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#13;&#10;        val startDate = dateFormat.format(Date(startTime))&#13;&#10;        val endDate = dateFormat.format(Date(endTime))&#13;&#10;&#13;&#10;        // 기록 ID 생성&#13;&#10;        val recordId = System.currentTimeMillis()&#13;&#10;&#13;&#10;        // 기록 객체 생성&#13;&#10;        val record = SobrietyRecord(&#13;&#10;            id = recordId,&#13;&#10;            startDate = startDate,&#13;&#10;            endDate = endDate,&#13;&#10;            duration = targetDays,&#13;&#10;            achievedLevel = level,&#13;&#10;            levelTitle = levelTitles[level - 1],&#13;&#10;            isCompleted = true&#13;&#10;        )&#13;&#10;&#13;&#10;        // 기존 기록 불러오기&#13;&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#13;&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#13;&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#13;&#10;&#13;&#10;        // 새 기록 추가&#13;&#10;        records.add(record)&#13;&#10;&#13;&#10;        // 기록 저장&#13;&#10;        with(sharedPref.edit()) {&#13;&#10;            putString(&quot;records&quot;, SobrietyRecord.toJsonArray(records))&#13;&#10;            apply()&#13;&#10;        }&#13;&#10;&#13;&#10;        // 현재 진행중인 금주 데이터 초기화&#13;&#10;        with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#13;&#10;            clear()&#13;&#10;            apply()&#13;&#10;        }&#13;&#10;&#13;&#10;        return recordId&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 눈에 잘 보이는 버튼이 있는 커스텀 중지 확인 다이얼로그를 표시합니다.&#13;&#10;     */&#13;&#10;    private fun showCustomStopDialog() {&#13;&#10;        // 커스텀 다이얼로그 생성&#13;&#10;        val dialog = android.app.Dialog(this)&#13;&#10;        dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#13;&#10;        dialog.setContentView(com.example.alcoholictimer.R.layout.dialog_stop_sobriety)&#13;&#10;&#13;&#10;        // 다이얼로그 배경을 투명하게 설정하고 외부 영역 클릭으로 닫히지 않게 설정&#13;&#10;        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)&#13;&#10;        dialog.setCancelable(false)&#13;&#10;&#13;&#10;        // 취소 버튼 클릭 리스너&#13;&#10;        val btnCancel = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnCancel)&#13;&#10;        btnCancel.setOnClickListener {&#13;&#10;            dialog.dismiss()&#13;&#10;        }&#13;&#10;&#13;&#10;        // 확인 버튼 클릭 리스너&#13;&#10;        val btnConfirm = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnConfirm)&#13;&#10;        btnConfirm.setOnClickListener {&#13;&#10;            dialog.dismiss()&#13;&#10;&#13;&#10;            // SharedPreferences 초기화&#13;&#10;            with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#13;&#10;                clear()&#13;&#10;                apply()&#13;&#10;            }&#13;&#10;&#13;&#10;            // 시작 화면으로 이동&#13;&#10;            val intent = Intent(this@StatusActivity, MainActivity::class.java)&#13;&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#13;&#10;            startActivity(intent)&#13;&#10;            finish()&#13;&#10;&#13;&#10;            // 토스트 메시지 표시&#13;&#10;            Toast.makeText(this@StatusActivity, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;        }&#13;&#10;&#13;&#10;        // 다이얼로그 표시&#13;&#10;        dialog.show()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun navigateToStart() {&#13;&#10;        val intent = Intent(this, StartActivity::class.java)&#13;&#10;        startActivity(intent)&#13;&#10;        overridePendingTransition(0, 0)&#13;&#10;        finish()&#13;&#10;        overridePendingTransition(0, 0)&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun navigateToRecords() {&#13;&#10;        val intent = Intent(this, RecordsActivity::class.java)&#13;&#10;        startActivity(intent)&#13;&#10;        overridePendingTransition(0, 0)&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_play.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_play.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M8,5v14l11,-7z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/content_start.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/content_start.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:gravity=&quot;center_horizontal&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:paddingHorizontal=&quot;24dp&quot;&#10;    android:paddingTop=&quot;150dp&quot;&#10;    android:paddingBottom=&quot;24dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;32dp&quot;&#10;        android:text=&quot;금주 목표 일수&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;32dp&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;        &lt;com.example.alcoholictimer.NoPasteEditText&#10;            android:id=&quot;@+id/editTextDays&quot;&#10;            android:layout_width=&quot;100dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:hint=&quot;00&quot;&#10;            android:inputType=&quot;number|phone&quot;&#10;            android:textSize=&quot;32sp&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvDaysLabel&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;&#10;            android:text=&quot;일&quot;&#10;            android:textSize=&quot;24sp&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/btnStart&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;32dp&quot;&#10;        android:contentDescription=&quot;금주 시작&quot;&#10;        android:src=&quot;@drawable/ic_play&quot;&#10;        app:backgroundTint=&quot;@android:color/black&quot;&#10;        app:tint=&quot;@android:color/white&quot;&#10;        app:fabSize=&quot;normal&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:gravity=&quot;center_horizontal&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:paddingHorizontal=&quot;24dp&quot;&#10;    android:paddingTop=&quot;150dp&quot;&#10;    android:paddingBottom=&quot;24dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;8dp&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;        &lt;com.example.alcoholictimer.NoPasteEditText&#10;            android:id=&quot;@+id/editTextDays&quot;&#10;            android:layout_width=&quot;100dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:hint=&quot;00&quot;&#10;            android:inputType=&quot;number|phone&quot;&#10;            android:textSize=&quot;32sp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvDaysLabel&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginBottom=&quot;32dp&quot;&#10;        android:text=&quot;금주 목표 일수&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;    &lt;com.google.android.material.floatingactionbutton.FloatingActionButton&#10;        android:id=&quot;@+id/btnStart&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;32dp&quot;&#10;        android:contentDescription=&quot;금주 시작&quot;&#10;        android:src=&quot;@drawable/ic_play&quot;&#10;        app:backgroundTint=&quot;@android:color/black&quot;&#10;        app:tint=&quot;@android:color/white&quot;&#10;        app:fabSize=&quot;normal&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>