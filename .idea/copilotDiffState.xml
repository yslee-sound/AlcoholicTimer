<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.concurrent.TimeUnit&#10;&#10;/**&#10; * 금주 완료 후 결과 요약을 보여주는 액티비티&#10; */&#10;class RecordSummaryActivity : BaseActivity() {&#10;&#10;    private var record: SobrietyRecord? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 이전 화면에서 전달받은 기록 ID 가져오기&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1L)&#10;        if (recordId == -1L) {&#10;            // ID가 없으면 메인 화면으로 이동&#10;            finish()&#10;            return&#10;        }&#10;&#10;        // 해당 ID의 기록 데이터 불러오기&#10;        record = loadRecord(recordId)&#10;        if (record == null) {&#10;            finish()&#10;            return&#10;        }&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // 기록이 없으면 화면 설정 건너뛰기&#10;        if (record == null) {&#10;            return&#10;        }&#10;&#10;        // BaseActivity에서 상속받은 contentFrame에 레이아웃 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.activity_record_summary, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        val tvTitle = view.findViewById&lt;TextView&gt;(R.id.tvSummaryTitle)&#10;        val tvPeriod = view.findViewById&lt;TextView&gt;(R.id.tvPeriod)&#10;        val tvAchievedLevel = view.findViewById&lt;TextView&gt;(R.id.tvAchievedLevel)&#10;        val tvTotalDuration = view.findViewById&lt;TextView&gt;(R.id.tvTotalDuration)&#10;        val btnNewChallenge = view.findViewById&lt;Button&gt;(R.id.btnNewChallenge)&#10;&#10;        // 데이터 표시&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy년 MM월 dd일 HH:mm&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.startDate) ?: Date())&#10;        val endDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.endDate) ?: Date())&#10;&#10;        // 제목 설정&#10;        if (record!!.isCompleted) {&#10;            tvTitle.text = &quot;목표 달성을 축하합니다!&quot;&#10;        } else {&#10;            tvTitle.text = &quot;금주 기록 요약&quot;&#10;        }&#10;&#10;        // 기간 표시&#10;        tvPeriod.text = &quot;시작: $startDate\n종료: $endDate&quot;&#10;&#10;        // 달성 레벨&#10;        tvAchievedLevel.text = &quot;달성 레벨: ${record!!.achievedLevel} (${record!!.levelTitle})&quot;&#10;&#10;        // 총 금주 기간&#10;        val durationText = if (record!!.isCompleted) {&#10;            &quot;목표 ${record!!.duration}${getUnitText()} 완료했습니다!&quot;&#10;        } else {&#10;            &quot;목표 ${record!!.duration}${getUnitText()} 중 ${record!!.achievedDays}${getUnitText()} 달성 (${(record!!.achievedDays.toFloat() / record!!.duration * 100).toInt()}%)&quot;&#10;        }&#10;        tvTotalDuration.text = durationText&#10;&#10;        // 버튼 설정&#10;        btnNewChallenge.setOnClickListener {&#10;            // 새로운 도전 시작을 위해 메인 화면으로 이동&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 현재 테스트 모드에 맞는 단위 텍스트를 반환&#10;     */&#10;    private fun getUnitText(): String {&#10;        return if (com.example.alcoholictimer.utils.Constants.SECOND_TEST_MODE) {&#10;            &quot;초를&quot;&#10;        } else if (com.example.alcoholictimer.utils.Constants.TEST_MODE) {&#10;            &quot;분을&quot;&#10;        } else {&#10;            &quot;일을&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * SharedPreferences에서 특정 ID의 금주 기록을 불러옴&#10;     */&#10;    private fun loadRecord(recordId: Long): SobrietyRecord? {&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;&#10;        return records.find { it.id == recordId }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * 금주 완료 후 결과 요약을 보여주는 액티비티&#10; */&#10;class RecordSummaryActivity : BaseActivity() {&#10;&#10;    private var record: SobrietyRecord? = null&#10;    private val TAG = &quot;RecordSummaryActivity&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        Log.d(TAG, &quot;onCreate: 기록화면 시작&quot;)&#10;&#10;        // 이전 화면에서 전달받은 기록 ID 가져오기&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1L)&#10;        Log.d(TAG, &quot;onCreate: recordId=$recordId&quot;)&#10;&#10;        if (recordId == -1L) {&#10;            // ID가 없으면 메인 화면으로 이동&#10;            Toast.makeText(this, &quot;기록 정보를 찾을 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Record ID not found in intent&quot;)&#10;            finish()&#10;            return&#10;        }&#10;&#10;        // 해당 ID의 기록 데이터 불러오기&#10;        record = loadRecord(recordId)&#10;&#10;        if (record == null) {&#10;            Toast.makeText(this, &quot;해당 기록을 불러올 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Failed to load record with id: $recordId&quot;)&#10;        } else {&#10;            Log.d(TAG, &quot;Record loaded: ${record?.startDate} to ${record?.endDate}, completed=${record?.isCompleted}&quot;)&#10;        }&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        Log.d(TAG, &quot;setupContentView: 시작&quot;)&#10;        &#10;        try {&#10;            // BaseActivity에서 상속받은 contentFrame에 레이아웃 추가&#10;            val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;            if (contentFrame == null) {&#10;                Log.e(TAG, &quot;contentFrame not found&quot;)&#10;                return&#10;            }&#10;&#10;            val view = LayoutInflater.from(this).inflate(R.layout.activity_record_summary, contentFrame, true)&#10;            Log.d(TAG, &quot;Layout inflated successfully&quot;)&#10;&#10;            // UI 요소 초기화&#10;            val tvRecordScreenTitle = view.findViewById&lt;TextView&gt;(R.id.tvRecordScreenTitle)&#10;            val tvSummaryTitle = view.findViewById&lt;TextView&gt;(R.id.tvSummaryTitle)&#10;            val tvPeriod = view.findViewById&lt;TextView&gt;(R.id.tvPeriod)&#10;            val btnNewChallenge = view.findViewById&lt;Button&gt;(R.id.btnNewChallenge)&#10;&#10;            if (tvRecordScreenTitle == null || tvSummaryTitle == null || tvPeriod == null || btnNewChallenge == null) {&#10;                Log.e(TAG, &quot;One or more UI elements not found in layout&quot;)&#10;                return&#10;            }&#10;&#10;            // 기본 타이틀은 항상 표시&#10;            tvRecordScreenTitle.text = &quot;기록화면&quot;&#10;            &#10;            // 레코드가 있는 경우에만 데이터 표시&#10;            if (record != null) {&#10;                // 제목 설정&#10;                if (record!!.isCompleted) {&#10;                    tvSummaryTitle.text = &quot;목표 달성을 축하합니다!&quot;&#10;                } else {&#10;                    tvSummaryTitle.text = &quot;금주 기록 요약&quot;&#10;                }&#10;&#10;                // 날짜 포맷 설정&#10;                val dateFormat = SimpleDateFormat(&quot;yyyy년 MM월 dd일 HH:mm&quot;, Locale.getDefault())&#10;                val startDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.startDate) ?: Date())&#10;                val endDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.endDate) ?: Date())&#10;                &#10;                // 기간 표시&#10;                tvPeriod.text = &quot;시작: $startDate\n종료: $endDate&quot;&#10;            } else {&#10;                // 레코드가 없는 경우 기본 텍스트 설정&#10;                tvSummaryTitle.text = &quot;금주 기록&quot;&#10;                tvPeriod.text = &quot;기록 정보 없음&quot;&#10;            }&#10;&#10;            // 새로운 도전 버튼 클릭 리스너 설정&#10;            btnNewChallenge.setOnClickListener {&#10;                // MainActivity로 이동&#10;                val intent = Intent(this, MainActivity::class.java)&#10;                intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP  // 스택의 MainActivity 위의 모든 액티비티 제거&#10;                startActivity(intent)&#10;                finish()&#10;            }&#10;            &#10;            Log.d(TAG, &quot;setupContentView: 완료&quot;)&#10;            &#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error setting up content view: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * ID로 기록 불러오기&#10;     */&#10;    private fun loadRecord(recordId: Long): SobrietyRecord? {&#10;        try {&#10;            val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;            val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;            val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;            &#10;            return records.find { it.id == recordId }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error loading record: ${e.message}&quot;, e)&#10;            return null&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer.utils&#10;&#10;object Constants {&#10;    // 테스트 모드 설정 (true: 분 단위, false: 일 단위)&#10;    const val TEST_MODE = true&#10;&#10;    // 프로그레스바 초 단위 테스트 모드&#10;    const val PROGRESS_TEST_MODE = true&#10;&#10;    // 시간 변환 상수&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#10;&#10;    // 사용할 시간 단위&#10;    val TIME_UNIT_MILLIS = if (TEST_MODE) MINUTE_IN_MILLIS else DAY_IN_MILLIS&#10;&#10;    // 프로그레스바용 시간 단위 (초 단위 테스트를 위함)&#10;    val PROGRESS_TIME_UNIT_MILLIS = if (PROGRESS_TEST_MODE) SECOND_IN_MILLIS else TIME_UNIT_MILLIS&#10;&#10;    // 단위 텍스트&#10;    val TIME_UNIT_TEXT = if (TEST_MODE) &quot;분&quot; else &quot;일&quot;&#10;    val PROGRESS_TIME_UNIT_TEXT = if (PROGRESS_TEST_MODE) &quot;초&quot; else TIME_UNIT_TEXT&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#10;&#10;object Constants {&#10;    // 테스트 모드 설정 (true: 초 단위, false: 일 단위)&#10;    const val TEST_MODE = true&#10;    &#10;    // 초 단위 테스트 모드 (1초 = 1일 개념)&#10;    const val SECOND_TEST_MODE = true&#10;    &#10;    // 프로그레스바 초 단위 테스트 모드&#10;    const val PROGRESS_TEST_MODE = true&#10;&#10;    // 시간 변환 상수&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#10;&#10;    // 사용할 시간 단위&#10;    val TIME_UNIT_MILLIS = when {&#10;        SECOND_TEST_MODE -&gt; SECOND_IN_MILLIS  // 초 단위 테스트 (1초 = 1일)&#10;        TEST_MODE -&gt; MINUTE_IN_MILLIS         // 분 단위 테스트 (1분 = 1일)&#10;        else -&gt; DAY_IN_MILLIS                 // 실제 일 단위 (1일 = 24시간)&#10;    }&#10;&#10;    // 프로그레스바용 시간 단위&#10;    val PROGRESS_TIME_UNIT_MILLIS = if (PROGRESS_TEST_MODE) SECOND_IN_MILLIS else TIME_UNIT_MILLIS&#10;&#10;    // 단위 텍스트&#10;    val TIME_UNIT_TEXT = when {&#10;        SECOND_TEST_MODE -&gt; &quot;초&quot;  // 초 단위 테스트 시 표시 텍스트&#10;        TEST_MODE -&gt; &quot;분&quot;        // 분 단위 테스트 시 표시 텍스트&#10;        else -&gt; &quot;일&quot;            // 실제 운영 시 표시 텍스트&#10;    }&#10;    &#10;    val PROGRESS_TIME_UNIT_TEXT = if (PROGRESS_TEST_MODE) &quot;초&quot; else TIME_UNIT_TEXT&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/SobrietyRecord.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/SobrietyRecord.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#10;&#10;import org.json.JSONArray&#10;import org.json.JSONObject&#10;&#10;/**&#10; * 금주 기록을 저장하는 데이터 클래스&#10; *&#10; * @property id 고유 ID (저장 시간 기반)&#10; * @property startDate 금주 시작 날짜 (문자열 형식: &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10; * @property endDate 금주 종료 날짜 (문자열 형식: &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10; * @property duration 목표 기간 (일 또는 분 단위)&#10; * @property achievedDays 실제 달성한 기간 (일 또는 분 단위, 완료 시 duration과 동일)&#10; * @property achievedLevel 달성한 레벨&#10; * @property levelTitle 달성한 레벨 타이틀&#10; * @property isCompleted 목표를 완료했는지 여부 (true: 완료, false: 중도 포기)&#10; */&#10;data class SobrietyRecord(&#10;    val id: Long,&#10;    val startDate: String,&#10;    val endDate: String,&#10;    val duration: Int,&#10;    val achievedDays: Int = duration, // 완료된 경우 기본값은 전체 기간&#10;    val achievedLevel: Int,&#10;    val levelTitle: String,&#10;    val isCompleted: Boolean&#10;) {&#10;    /**&#10;     * 기록을 JSONObject로 변환&#10;     */&#10;    fun toJson(): JSONObject {&#10;        val json = JSONObject()&#10;        json.put(&quot;id&quot;, id)&#10;        json.put(&quot;startDate&quot;, startDate)&#10;        json.put(&quot;endDate&quot;, endDate)&#10;        json.put(&quot;duration&quot;, duration)&#10;        json.put(&quot;achievedDays&quot;, achievedDays)&#10;        json.put(&quot;achievedLevel&quot;, achievedLevel)&#10;        json.put(&quot;levelTitle&quot;, levelTitle)&#10;        json.put(&quot;isCompleted&quot;, isCompleted)&#10;        return json&#10;    }&#10;&#10;    companion object {&#10;        /**&#10;         * JSONObject에서 기록 객체 생성&#10;         */&#10;        fun fromJson(json: JSONObject): SobrietyRecord {&#10;            return SobrietyRecord(&#10;                id = json.getLong(&quot;id&quot;),&#10;                startDate = json.getString(&quot;startDate&quot;),&#10;                endDate = json.getString(&quot;endDate&quot;),&#10;                duration = json.getInt(&quot;duration&quot;),&#10;                achievedDays = json.getInt(&quot;achievedDays&quot;),&#10;                achievedLevel = json.getInt(&quot;achievedLevel&quot;),&#10;                levelTitle = json.getString(&quot;levelTitle&quot;),&#10;                isCompleted = json.getBoolean(&quot;isCompleted&quot;)&#10;            )&#10;        }&#10;&#10;        /**&#10;         * 기록 목록을 JSON 문자열로 변환&#10;         */&#10;        fun toJsonArray(records: List&lt;SobrietyRecord&gt;): String {&#10;            val jsonArray = JSONArray()&#10;            records.forEach { record -&gt;&#10;                jsonArray.put(record.toJson())&#10;            }&#10;            return jsonArray.toString()&#10;        }&#10;&#10;        /**&#10;         * JSON 문자열에서 기록 목록 생성&#10;         */&#10;        fun fromJsonArray(jsonString: String): List&lt;SobrietyRecord&gt; {&#10;            val records = mutableListOf&lt;SobrietyRecord&gt;()&#10;            try {&#10;                val jsonArray = JSONArray(jsonString)&#10;                for (i in 0 until jsonArray.length()) {&#10;                    val jsonObject = jsonArray.getJSONObject(i)&#10;                    records.add(fromJson(jsonObject))&#10;                }&#10;            } catch (e: Exception) {&#10;                // JSON 파싱 오류 시 빈 목록 반환&#10;                e.printStackTrace()&#10;            }&#10;            return records&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_record_summary.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_record_summary.xml" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvRecordScreenTitle&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;24dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;기록화면&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;28sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSummaryTitle&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;목표 달성을 축하합니다!&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;androidx.cardview.widget.CardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;금주 기간&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvPeriod&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:text=&quot;시작: 2023년 07월 01일\n종료: 2023년 07월 30일&quot;&#10;                    android:textSize=&quot;16sp&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnNewChallenge&quot;&#10;            style=&quot;@style/ButtonPrimary&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;32dp&quot;&#10;            android:text=&quot;새로운 도전 시작하기&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>