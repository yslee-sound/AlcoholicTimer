<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.AlcoholicTimerApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:launchMode=&quot;singleTask&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StartActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:launchMode=&quot;singleTop&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StatusActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:launchMode=&quot;singleTop&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RecordsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RecordSummaryActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ChallengeActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MessageActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SettingsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:label=&quot;설정&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot; /&gt;&#10;        &lt;activity&#10;            android:name=&quot;.NotificationsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    package=&quot;com.example.alcoholictimer&quot;&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:name=&quot;.AlcoholicApplication&quot;&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:launchMode=&quot;singleTask&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StartActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:launchMode=&quot;singleTop&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StatusActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:launchMode=&quot;singleTop&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.RecordsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.RecordSummaryActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ChallengeActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MessageActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.SettingsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:label=&quot;설정&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot; /&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.NotificationsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/AlcoholicApplication.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/AlcoholicApplication.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.app.Application&#10;import com.example.alcoholictimer.utils.RecordManager&#10;&#10;class AlcoholicApplication : Application() {&#10;    override fun onCreate() {&#10;        super.onCreate()&#10;        &#10;        // RecordManager 초기화&#10;        RecordManager.init(this)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.MenuItem&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.GravityCompat&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.google.android.material.navigation.NavigationView&#10;import java.util.Date&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 최신 상태로 업데이트&#10;            updateNavigationDrawer()&#10;            drawerLayout.open()&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener(this)&#10;&#10;        // 특정 화면에 필요한 컨텐츠 뷰 설정&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태와 헤더 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationDrawer() {&#10;        // 네비게이션 메뉴 상태 업데이트&#10;        updateNavigationMenuState()&#10;&#10;        // 네비게이션 헤더 정보 업데이트&#10;        updateNavigationHeader()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트를 '금주 상태'로 변경합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트 변경&#10;        val soberMenuItem = navigationView.menu.findItem(R.id.nav_sober)&#10;        soberMenuItem.isEnabled = true&#10;        if (hasStarted) {&#10;            soberMenuItem.title = &quot;금주 상태&quot;&#10;        } else {&#10;            soberMenuItem.title = &quot;금주&quot;&#10;        }&#10;&#10;        // 활동 보기 메뉴는 항상 활성화&#10;        val recordsMenuItem = navigationView.menu.findItem(R.id.nav_records)&#10;        recordsMenuItem.isEnabled = true&#10;    }&#10;&#10;    /**&#10;     * 네비게이션 헤더의 사용자 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationHeader() {&#10;        val headerView = navigationView.getHeaderView(0)&#10;        if (headerView != null) {&#10;            val tvUserNickname = headerView.findViewById&lt;TextView&gt;(R.id.tvUserNickname)&#10;            val tvUserLevelDays = headerView.findViewById&lt;TextView&gt;(R.id.tvUserLevelDays)&#10;&#10;            // 사용자 이름은 기본값으로 &quot;알중이&quot; 사용&#10;            tvUserNickname.text = &quot;알중이&quot;&#10;&#10;            // 금주 상태에 따른 레벨 및 일수 정보 업데이트&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            if (sharedPref.contains(&quot;start_time&quot;)) {&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, Date().time)&#10;                val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;                // 레벨 계산 (시간 단위에 따라 적절한 마일스톤 사용)&#10;                val adjustedMilestones = when {&#10;                    Constants.isSecondTestMode -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                    Constants.isMinuteTestMode -&gt; listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;                    else -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                }&#10;&#10;                var currentLevel = 1&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i + 1&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                tvUserLevelDays.text = &quot;Level $currentLevel · ${timePassed}${Constants.TIME_UNIT_TEXT} 금주 중&quot;&#10;            } else {&#10;                tvUserLevelDays.text = &quot;금주를 시작해보세요!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;&#10;    /**&#10;     * 액티비티가 새 인텐트로 재사용될 때 수행할 작업을 정의합니다.&#10;     * 자식 클래스에서 오버라이드할 수 있습니다.&#10;     */&#10;    open fun handleNewIntent(intent: Intent?) {&#10;        // 기본 구현은 아무 작업도 수행하지 않습니다&#10;    }&#10;&#10;    /**&#10;     * 효과 없이 액티비티 전환&#10;     */&#10;    protected fun navigateToActivity(activityClass: Class&lt;*&gt;) {&#10;        val intent = Intent(this, activityClass)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;&#10;    /**&#10;     * 액티비티 종료 시 효과 없이 전환&#10;     */&#10;    override fun finish() {&#10;        super.finish()&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;&#10;    override fun onNavigationItemSelected(item: MenuItem): Boolean {&#10;        when (item.itemId) {&#10;            R.id.nav_records -&gt; {&#10;                if (this !is RecordsActivity) {&#10;                    val intent = Intent(this, RecordsActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)  // 화면 전환 효과 제거&#10;                }&#10;            }&#10;            R.id.nav_challenge -&gt; {&#10;                if (this !is ChallengeActivity) {&#10;                    val intent = Intent(this, ChallengeActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                }&#10;            }&#10;            R.id.nav_message -&gt; {&#10;                if (this !is MessageActivity) {&#10;                    val intent = Intent(this, MessageActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                }&#10;            }&#10;            R.id.nav_settings -&gt; {&#10;                if (this !is SettingsActivity) {&#10;                    val intent = Intent(this, SettingsActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                }&#10;            }&#10;            R.id.nav_notifications -&gt; {&#10;                if (this !is NotificationsActivity) {&#10;                    val intent = Intent(this, NotificationsActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                }&#10;            }&#10;            R.id.nav_sober -&gt; {&#10;                // 금주 중일 때만 금주 화면으로 이동 가능&#10;                val prefs = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                val isAbstaining = prefs.contains(&quot;start_time&quot;)&#10;&#10;                if (isAbstaining &amp;&amp; this !is StatusActivity) {&#10;                    val intent = Intent(this, StatusActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                } else if (!isAbstaining &amp;&amp; this !is StartActivity) {&#10;                    val intent = Intent(this, StartActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                }&#10;            }&#10;        }&#10;        drawerLayout.closeDrawer(GravityCompat.START)&#10;        return true&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.MenuItem&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.GravityCompat&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.google.android.material.navigation.NavigationView&#10;import java.util.Date&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 최신 상태로 업데이트&#10;            updateNavigationDrawer()&#10;            drawerLayout.openDrawer(GravityCompat.START)&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener(this)&#10;&#10;        // 특정 화면에 필요한 컨텐츠 뷰 설정&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태와 헤더 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationDrawer() {&#10;        // 네비게이션 메뉴 상태 업데이트&#10;        updateNavigationMenuState()&#10;&#10;        // 네비게이션 헤더 정보 업데이트&#10;        updateNavigationHeader()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트를 '금주 상태'로 변경합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트 변경&#10;        val soberMenuItem = navigationView.menu.findItem(R.id.nav_sober)&#10;        soberMenuItem.isEnabled = true&#10;        if (hasStarted) {&#10;            soberMenuItem.title = &quot;금주 상태&quot;&#10;        } else {&#10;            soberMenuItem.title = &quot;금주&quot;&#10;        }&#10;&#10;        // 활동 보기 메뉴는 항상 활성화&#10;        val recordsMenuItem = navigationView.menu.findItem(R.id.nav_records)&#10;        recordsMenuItem.isEnabled = true&#10;    }&#10;&#10;    /**&#10;     * 네비게이션 헤더의 사용자 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationHeader() {&#10;        val headerView = navigationView.getHeaderView(0)&#10;        if (headerView != null) {&#10;            val tvUserNickname = headerView.findViewById&lt;TextView&gt;(R.id.tvUserNickname)&#10;            val tvUserLevelDays = headerView.findViewById&lt;TextView&gt;(R.id.tvUserLevelDays)&#10;&#10;            // 사용자 이름은 기본값으로 &quot;알중이&quot; 사용&#10;            tvUserNickname.text = &quot;알중이&quot;&#10;&#10;            // 금주 상태에 따른 레벨 및 일수 정보 업데이트&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            if (sharedPref.contains(&quot;start_time&quot;)) {&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, Date().time)&#10;                val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;                // 레벨 계산 (시간 단위에 따라 적절한 마일스톤 사용)&#10;                val adjustedMilestones = when {&#10;                    Constants.isSecondTestMode -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                    Constants.isMinuteTestMode -&gt; listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;                    else -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                }&#10;&#10;                var currentLevel = 1&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i + 1&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                tvUserLevelDays.text = &quot;Level $currentLevel · ${timePassed}${Constants.TIME_UNIT_TEXT} 금주 중&quot;&#10;            } else {&#10;                tvUserLevelDays.text = &quot;금주를 시작해보세요!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;&#10;    /**&#10;     * 액티비티가 새 인텐트로 재사용될 때 수행할 작업을 정의합니다.&#10;     * 자식 클래스에서 오버라이드할 수 있습니다.&#10;     */&#10;    open fun handleNewIntent(intent: Intent?) {&#10;        // 기본 구현은 아무 작업도 수행하지 않습니다&#10;    }&#10;&#10;    /**&#10;     * 효과 없이 액티비티 전환&#10;     */&#10;    protected fun navigateToActivity(activityClass: Class&lt;*&gt;) {&#10;        val intent = Intent(this, activityClass)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;&#10;    /**&#10;     * 액티비티 종료 시 효과 없이 전환&#10;     */&#10;    override fun finish() {&#10;        super.finish()&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;&#10;    override fun onNavigationItemSelected(item: MenuItem): Boolean {&#10;        when (item.itemId) {&#10;            R.id.nav_records -&gt; {&#10;                if (this !is RecordsActivity) {&#10;                    val intent = Intent(this, RecordsActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)  // 화면 전환 효과 제거&#10;                }&#10;            }&#10;            R.id.nav_challenge -&gt; {&#10;                if (this !is ChallengeActivity) {&#10;                    val intent = Intent(this, ChallengeActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                }&#10;            }&#10;            R.id.nav_message -&gt; {&#10;                if (this !is MessageActivity) {&#10;                    val intent = Intent(this, MessageActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                }&#10;            }&#10;            R.id.nav_settings -&gt; {&#10;                if (this !is SettingsActivity) {&#10;                    val intent = Intent(this, SettingsActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                }&#10;            }&#10;            R.id.nav_notifications -&gt; {&#10;                if (this !is NotificationsActivity) {&#10;                    val intent = Intent(this, NotificationsActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                }&#10;            }&#10;            R.id.nav_sober -&gt; {&#10;                // 금주 중일 때만 금주 화면으로 이동 가능&#10;                val prefs = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                val isAbstaining = prefs.contains(&quot;start_time&quot;)&#10;&#10;                if (isAbstaining &amp;&amp; this !is StatusActivity) {&#10;                    val intent = Intent(this, StatusActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                } else if (!isAbstaining &amp;&amp; this !is StartActivity) {&#10;                    val intent = Intent(this, StartActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                }&#10;            }&#10;        }&#10;        drawerLayout.closeDrawer(GravityCompat.START)&#10;        return true&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/ChallengeActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/ChallengeActivity.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;&#10;class ChallengeActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // 챌린지 액티비티의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        LayoutInflater.from(this).inflate(R.layout.activity_challenge, contentFrame, true)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/MessageActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/MessageActivity.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;&#10;class MessageActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // 응원 메시지 액티비티의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        LayoutInflater.from(this).inflate(R.layout.activity_message, contentFrame, true)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordsActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.graphics.Color&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.FrameLayout&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.adapters.LevelHistoryAdapter&#10;import com.example.alcoholictimer.adapters.RecentActivityAdapter&#10;import com.example.alcoholictimer.models.LevelHistoryItem&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;import java.time.temporal.ChronoUnit&#10;import java.time.temporal.WeekFields&#10;import java.util.Locale&#10;&#10;class RecordsActivity : BaseActivity() {&#10;&#10;    private lateinit var tvWeeklyCount: TextView&#10;    private lateinit var tvMonthlyCount: TextView&#10;    private lateinit var tvTotalCount: TextView&#10;    private lateinit var tvSummary: TextView&#10;    private lateinit var tvPeriodSummary: TextView&#10;    private lateinit var tvTotalAbstinence: TextView&#10;    private lateinit var tvLongestStreak: TextView&#10;    private lateinit var tvLastFailure: TextView&#10;    private lateinit var chartContainer: FrameLayout&#10;    private lateinit var rvLevelHistory: RecyclerView&#10;    private lateinit var rvRecentActivities: RecyclerView  // 최근 활동 RecyclerView 추가&#10;&#10;    private lateinit var btnWeek: Button&#10;    private lateinit var btnMonth: Button&#10;    private lateinit var btnYear: Button&#10;    private lateinit var btnAll: Button&#10;&#10;    private lateinit var recentActivitiesRecyclerView: RecyclerView&#10;    private lateinit var recentActivityAdapter: RecentActivityAdapter&#10;&#10;    private var startDate: LocalDate? = null&#10;    private var currentPeriod = Period.ALL&#10;&#10;    private enum class Period {&#10;        WEEK, MONTH, YEAR, ALL&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 데이터 로드 및 표시&#10;        loadAndDisplayData()&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // RecordsActivity의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.activity_records, contentFrame, true)&#10;&#10;        // View 초기화&#10;        initViews(view)&#10;&#10;        // 버튼 클릭 리스너 설정&#10;        setupButtonListeners()&#10;    }&#10;&#10;    private fun initViews(view: View) {&#10;        tvWeeklyCount = view.findViewById(R.id.tvWeeklyCount)&#10;        tvMonthlyCount = view.findViewById(R.id.tvMonthlyCount)&#10;        tvTotalCount = view.findViewById(R.id.tvTotalCount)&#10;        tvSummary = view.findViewById(R.id.tvSummary)&#10;        tvPeriodSummary = view.findViewById(R.id.tvPeriodSummary)&#10;        tvTotalAbstinence = view.findViewById(R.id.tvTotalAbstinence)&#10;        tvLongestStreak = view.findViewById(R.id.tvLongestStreak)&#10;        tvLastFailure = view.findViewById(R.id.tvLastFailure)&#10;        chartContainer = view.findViewById(R.id.chartContainer)&#10;        rvLevelHistory = view.findViewById(R.id.rvLevelHistory)&#10;&#10;        btnWeek = view.findViewById(R.id.btnWeek)&#10;        btnMonth = view.findViewById(R.id.btnMonth)&#10;        btnYear = view.findViewById(R.id.btnYear)&#10;        btnAll = view.findViewById(R.id.btnAll)&#10;&#10;        // RecyclerView 설정&#10;        rvLevelHistory.layoutManager = LinearLayoutManager(this)&#10;&#10;        // 최근 활동 RecyclerView 초기화&#10;        rvRecentActivities = view.findViewById(R.id.rvRecentActivities)&#10;        rvRecentActivities.layoutManager = LinearLayoutManager(this)&#10;    }&#10;&#10;    private fun setupButtonListeners() {&#10;        btnWeek.setOnClickListener {&#10;            currentPeriod = Period.WEEK&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnMonth.setOnClickListener {&#10;            currentPeriod = Period.MONTH&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnYear.setOnClickListener {&#10;            currentPeriod = Period.YEAR&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnAll.setOnClickListener {&#10;            currentPeriod = Period.ALL&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;    }&#10;&#10;    private fun updatePeriodUI() {&#10;        // 모든 버튼 기본 스타일로 초기화&#10;        btnWeek.setBackgroundColor(Color.LTGRAY)&#10;        btnMonth.setBackgroundColor(Color.LTGRAY)&#10;        btnYear.setBackgroundColor(Color.LTGRAY)&#10;        btnAll.setBackgroundColor(Color.LTGRAY)&#10;&#10;        // 선택된 버튼 강조&#10;        when(currentPeriod) {&#10;            Period.WEEK -&gt; {&#10;                btnWeek.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 주&quot;&#10;            }&#10;            Period.MONTH -&gt; {&#10;                btnMonth.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 월&quot;&#10;            }&#10;            Period.YEAR -&gt; {&#10;                btnYear.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 년&quot;&#10;            }&#10;            Period.ALL -&gt; {&#10;                btnAll.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 전체&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadAndDisplayData() {&#10;        // SharedPreferences에서 시작일 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;AlcoholicPrefs&quot;, MODE_PRIVATE)&#10;        val startDateStr = sharedPref.getString(&quot;start_date&quot;, null)&#10;&#10;        if (startDateStr != null) {&#10;            startDate = LocalDate.parse(startDateStr)&#10;            val today = LocalDate.now()&#10;&#10;            // 기본 통계 업데이트&#10;            updateBasicStatistics(today)&#10;&#10;            // 기간별 통계 업데이트&#10;            updatePeriodStatistics(today)&#10;&#10;            // 레벨 히스토리 업데이트&#10;            updateLevelHistory()&#10;&#10;            // 최근 활동 데이터 로드 및 표시&#10;            loadRecentActivities()&#10;        }&#10;    }&#10;&#10;    private fun updateBasicStatistics(today: LocalDate) {&#10;        startDate?.let { start -&gt;&#10;            // 전체 금주 일수&#10;            val totalDays = ChronoUnit.DAYS.between(start, today).toInt() + 1 // 오늘 포함&#10;&#10;            // 이번 주 금주 일수&#10;            val weekFields = WeekFields.of(Locale.getDefault())&#10;            val thisWeekStart = today.with(weekFields.dayOfWeek(), 1)&#10;            val weeklyDays = if (start.isAfter(thisWeekStart)) {&#10;                ChronoUnit.DAYS.between(start, today).toInt() + 1&#10;            } else {&#10;                ChronoUnit.DAYS.between(thisWeekStart, today).toInt() + 1&#10;            }&#10;&#10;            // 이번 달 금주 일수&#10;            val thisMonthStart = today.withDayOfMonth(1)&#10;            val monthlyDays = if (start.isAfter(thisMonthStart)) {&#10;                ChronoUnit.DAYS.between(start, today).toInt() + 1&#10;            } else {&#10;                ChronoUnit.DAYS.between(thisMonthStart, today).toInt() + 1&#10;            }&#10;&#10;            // UI 업데이트&#10;            tvWeeklyCount.text = &quot;${weeklyDays}일&quot;&#10;            tvMonthlyCount.text = &quot;${monthlyDays}일&quot;&#10;            tvTotalCount.text = &quot;${totalDays}일&quot;&#10;&#10;            // 요약 메시지&#10;            val summaryMessage = when {&#10;                totalDays &gt;= 365 -&gt; &quot;1년 이상 금주를 실천하셨네요! 정말 대단합니다! &quot;&#10;                totalDays &gt;= 180 -&gt; &quot;6개월 이상 금주를 지속하고 계시네요! &quot;&#10;                totalDays &gt;= 90 -&gt; &quot;3개월 동안 꾸준히 실천하셨어요! &quot;&#10;                totalDays &gt;= 30 -&gt; &quot;한 달 동안 잘 해내고 계세요! ⭐&quot;&#10;                else -&gt; &quot;금주를 시작한지 ${totalDays}일이 지났습니다.&quot;&#10;            }&#10;            tvSummary.text = summaryMessage&#10;&#10;            // 최고 기록 업데이트&#10;            tvTotalAbstinence.text = &quot;전체 누적 금주 일수: ${totalDays}일&quot;&#10;            tvLongestStreak.text = &quot;최장 연속 금주 기록: ${totalDays}일&quot; // 예제에서는 실패 없이 연속으로 진행&#10;            tvLastFailure.text = &quot;마지막 금주 실패: 없음&quot; // 예제에서는 실패가 없다고 가정&#10;        }&#10;    }&#10;&#10;    private fun updatePeriodStatistics(today: LocalDate) {&#10;        // 여기서 기간별 통계를 표시할 수 있습니다&#10;        // 이 예제에서는 단순화를 위해 코드를 생략합니다&#10;        // 실제로는 기간에 따른 그래프 등을 표시할 수 있습니다&#10;    }&#10;&#10;    private fun updateLevelHistory() {&#10;        // 예시 데이터 (실제로는 SharedPreferences나 DB에서 가져와야 함)&#10;        val formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;)&#10;        val levelHistory = mutableListOf&lt;LevelHistoryItem&gt;()&#10;&#10;        startDate?.let { start -&gt;&#10;            val today = LocalDate.now()&#10;            var currentDate = start&#10;            var level = 1&#10;&#10;            // 레벨 달성 예시 데이터 생성&#10;            // 실제 앱에서는 저장된 레벨 달성 히스토리를 가져와야 함&#10;            while (!currentDate.isAfter(today) &amp;&amp; level &lt;= 7) {&#10;                // 7일마다 레벨업 (예시)&#10;                val daysBetween = ChronoUnit.DAYS.between(start, currentDate)&#10;                if (daysBetween % 7L == 0L) {&#10;                    levelHistory.add(LevelHistoryItem(&#10;                        currentDate.format(formatter),&#10;                        &quot;Level ${level} 달성!&quot;&#10;                    ))&#10;                    level++&#10;                }&#10;                // 일부 날짜는 금주 성공 기록 추가&#10;                else if (daysBetween % 3L == 0L) {&#10;                    levelHistory.add(LevelHistoryItem(&#10;                        currentDate.format(formatter),&#10;                        &quot;금주 성공&quot;&#10;                    ))&#10;                }&#10;&#10;                currentDate = currentDate.plusDays(1)&#10;            }&#10;&#10;            // RecyclerView에 어댑터 설정&#10;            rvLevelHistory.adapter = LevelHistoryAdapter(levelHistory)&#10;        }&#10;    }&#10;&#10;    private fun loadRecentActivities() {&#10;        // SharedPreferences에서 저장된 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;&#10;        // 최근 활동 목록 생성&#10;        val recentActivities = records.map { record -&gt;&#10;            RecentActivity(&#10;                startDate = record.startDate,&#10;                endDate = record.endDate,&#10;                duration = record.duration,&#10;                isCompleted = record.isCompleted&#10;            )&#10;        }.sortedByDescending { it.endDate }.take(3)  // 최근 3개만 표시&#10;&#10;        // 어댑터 설정&#10;        recentActivityAdapter = RecentActivityAdapter(recentActivities)&#10;        rvRecentActivities.adapter = recentActivityAdapter&#10;    }&#10;&#10;    private fun navigateToMain() {&#10;        val intent = Intent(this, MainActivity::class.java)&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.graphics.Color&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.FrameLayout&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.adapters.LevelHistoryAdapter&#10;import com.example.alcoholictimer.adapters.RecentActivityAdapter&#10;import com.example.alcoholictimer.models.LevelHistoryItem&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;import java.time.temporal.ChronoUnit&#10;import java.time.temporal.WeekFields&#10;import java.util.Locale&#10;&#10;class RecordsActivity : BaseActivity() {&#10;&#10;    private lateinit var tvWeeklyCount: TextView&#10;    private lateinit var tvMonthlyCount: TextView&#10;    private lateinit var tvTotalCount: TextView&#10;    private lateinit var tvSummary: TextView&#10;    private lateinit var tvPeriodSummary: TextView&#10;    private lateinit var tvTotalAbstinence: TextView&#10;    private lateinit var tvLongestStreak: TextView&#10;    private lateinit var tvLastFailure: TextView&#10;    private lateinit var chartContainer: FrameLayout&#10;    private lateinit var rvLevelHistory: RecyclerView&#10;    private lateinit var rvRecentActivities: RecyclerView&#10;&#10;    private lateinit var btnWeek: Button&#10;    private lateinit var btnMonth: Button&#10;    private lateinit var btnYear: Button&#10;    private lateinit var btnAll: Button&#10;&#10;    private lateinit var recentActivityAdapter: RecentActivityAdapter&#10;&#10;    private var startDate: LocalDate? = null&#10;    private var currentPeriod = Period.ALL&#10;&#10;    private enum class Period {&#10;        WEEK, MONTH, YEAR, ALL&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 데이터 로드 및 표시&#10;        loadAndDisplayData()&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // RecordsActivity의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.activity_records, contentFrame, true)&#10;&#10;        // View 초기화&#10;        initViews(view)&#10;&#10;        // 버튼 클릭 리스너 설정&#10;        setupButtonListeners()&#10;    }&#10;&#10;    private fun initViews(view: View) {&#10;        tvWeeklyCount = view.findViewById(R.id.tvWeeklyCount)&#10;        tvMonthlyCount = view.findViewById(R.id.tvMonthlyCount)&#10;        tvTotalCount = view.findViewById(R.id.tvTotalCount)&#10;        tvSummary = view.findViewById(R.id.tvSummary)&#10;        tvPeriodSummary = view.findViewById(R.id.tvPeriodSummary)&#10;        tvTotalAbstinence = view.findViewById(R.id.tvTotalAbstinence)&#10;        tvLongestStreak = view.findViewById(R.id.tvLongestStreak)&#10;        tvLastFailure = view.findViewById(R.id.tvLastFailure)&#10;        chartContainer = view.findViewById(R.id.chartContainer)&#10;        rvLevelHistory = view.findViewById(R.id.rvLevelHistory)&#10;&#10;        btnWeek = view.findViewById(R.id.btnWeek)&#10;        btnMonth = view.findViewById(R.id.btnMonth)&#10;        btnYear = view.findViewById(R.id.btnYear)&#10;        btnAll = view.findViewById(R.id.btnAll)&#10;&#10;        // RecyclerView 설정&#10;        rvLevelHistory.layoutManager = LinearLayoutManager(this)&#10;&#10;        // 최근 활동 RecyclerView 초기화&#10;        rvRecentActivities = view.findViewById(R.id.rvRecentActivities)&#10;        rvRecentActivities.layoutManager = LinearLayoutManager(this)&#10;    }&#10;&#10;    private fun setupButtonListeners() {&#10;        btnWeek.setOnClickListener {&#10;            currentPeriod = Period.WEEK&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnMonth.setOnClickListener {&#10;            currentPeriod = Period.MONTH&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnYear.setOnClickListener {&#10;            currentPeriod = Period.YEAR&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnAll.setOnClickListener {&#10;            currentPeriod = Period.ALL&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;    }&#10;&#10;    private fun updatePeriodUI() {&#10;        // 모든 버튼 기본 스타일로 초기화&#10;        btnWeek.setBackgroundColor(Color.LTGRAY)&#10;        btnMonth.setBackgroundColor(Color.LTGRAY)&#10;        btnYear.setBackgroundColor(Color.LTGRAY)&#10;        btnAll.setBackgroundColor(Color.LTGRAY)&#10;&#10;        // 선택된 버튼 강조&#10;        when(currentPeriod) {&#10;            Period.WEEK -&gt; {&#10;                btnWeek.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 주&quot;&#10;            }&#10;            Period.MONTH -&gt; {&#10;                btnMonth.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 월&quot;&#10;            }&#10;            Period.YEAR -&gt; {&#10;                btnYear.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 년&quot;&#10;            }&#10;            Period.ALL -&gt; {&#10;                btnAll.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 전체&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadAndDisplayData() {&#10;        // SharedPreferences에서 시작일 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;AlcoholicPrefs&quot;, MODE_PRIVATE)&#10;        val startDateStr = sharedPref.getString(&quot;start_date&quot;, null)&#10;&#10;        if (startDateStr != null) {&#10;            startDate = LocalDate.parse(startDateStr)&#10;            val today = LocalDate.now()&#10;&#10;            // 기본 통계 업데이트&#10;            updateBasicStatistics(today)&#10;&#10;            // 기간별 통계 업데이트&#10;            updatePeriodStatistics(today)&#10;&#10;            // 레벨 히스토리 업데이트&#10;            updateLevelHistory()&#10;&#10;            // 최근 활동 데이터 로드 및 표시&#10;            loadRecentActivities()&#10;        }&#10;    }&#10;&#10;    private fun updateBasicStatistics(today: LocalDate) {&#10;        startDate?.let { start -&gt;&#10;            // 전체 금주 일수&#10;            val totalDays = ChronoUnit.DAYS.between(start, today).toInt() + 1 // 오늘 포함&#10;&#10;            // 이번 주 금주 일수&#10;            val weekFields = WeekFields.of(Locale.getDefault())&#10;            val thisWeekStart = today.with(weekFields.dayOfWeek(), 1)&#10;            val weeklyDays = if (start.isAfter(thisWeekStart)) {&#10;                ChronoUnit.DAYS.between(start, today).toInt() + 1&#10;            } else {&#10;                ChronoUnit.DAYS.between(thisWeekStart, today).toInt() + 1&#10;            }&#10;&#10;            // 이번 달 금주 일수&#10;            val thisMonthStart = today.withDayOfMonth(1)&#10;            val monthlyDays = if (start.isAfter(thisMonthStart)) {&#10;                ChronoUnit.DAYS.between(start, today).toInt() + 1&#10;            } else {&#10;                ChronoUnit.DAYS.between(thisMonthStart, today).toInt() + 1&#10;            }&#10;&#10;            // UI 업데이트&#10;            tvWeeklyCount.text = &quot;${weeklyDays}일&quot;&#10;            tvMonthlyCount.text = &quot;${monthlyDays}일&quot;&#10;            tvTotalCount.text = &quot;${totalDays}일&quot;&#10;&#10;            // 요약 메시지&#10;            val summaryMessage = when {&#10;                totalDays &gt;= 365 -&gt; &quot;1년 이상 금주를 실천하셨네요! 정말 대단합니다! &quot;&#10;                totalDays &gt;= 180 -&gt; &quot;6개월 이상 금주를 지속하고 계시네요! &quot;&#10;                totalDays &gt;= 90 -&gt; &quot;3개월 동안 꾸준히 실천하셨어요! &quot;&#10;                totalDays &gt;= 30 -&gt; &quot;한 달 동안 잘 해내고 계세요! ⭐&quot;&#10;                else -&gt; &quot;금주를 시작한지 ${totalDays}일이 지났습니다.&quot;&#10;            }&#10;            tvSummary.text = summaryMessage&#10;&#10;            // 최고 기록 업데이트&#10;            tvTotalAbstinence.text = &quot;전체 누적 금주 일수: ${totalDays}일&quot;&#10;            tvLongestStreak.text = &quot;최장 연속 금주 기록: ${totalDays}일&quot; // 예제에서는 실패 없이 연속으로 진행&#10;            tvLastFailure.text = &quot;마지막 금주 실패: 없음&quot; // 예제에서는 실패가 없다고 가정&#10;        }&#10;    }&#10;&#10;    private fun updatePeriodStatistics(today: LocalDate) {&#10;        // 여기서 기간별 통계를 표시할 수 있습니다&#10;        // 이 예제에서는 단순화를 위해 코드를 생략합니다&#10;        // 실제로는 기간에 따른 그래프 등을 표시할 수 있습니다&#10;    }&#10;&#10;    private fun updateLevelHistory() {&#10;        // 예시 데이터 (실제로는 SharedPreferences나 DB에서 가져와야 함)&#10;        val formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;)&#10;        val levelHistory = mutableListOf&lt;LevelHistoryItem&gt;()&#10;&#10;        startDate?.let { start -&gt;&#10;            val today = LocalDate.now()&#10;            var currentDate = start&#10;            var level = 1&#10;&#10;            // 레벨 달성 예시 데이터 생성&#10;            // 실제 앱에서는 저장된 레벨 달성 히스토리를 가져와야 함&#10;            while (!currentDate.isAfter(today) &amp;&amp; level &lt;= 7) {&#10;                // 7일마다 레벨업 (예시)&#10;                val daysBetween = ChronoUnit.DAYS.between(start, currentDate)&#10;                if (daysBetween % 7L == 0L) {&#10;                    levelHistory.add(LevelHistoryItem(&#10;                        currentDate.format(formatter),&#10;                        &quot;Level ${level} 달성!&quot;&#10;                    ))&#10;                    level++&#10;                }&#10;                // 일부 날짜는 금주 성공 기록 추가&#10;                else if (daysBetween % 3L == 0L) {&#10;                    levelHistory.add(LevelHistoryItem(&#10;                        currentDate.format(formatter),&#10;                        &quot;금주 성공&quot;&#10;                    ))&#10;                }&#10;&#10;                currentDate = currentDate.plusDays(1)&#10;            }&#10;&#10;            // RecyclerView에 어댑터 설정&#10;            rvLevelHistory.adapter = LevelHistoryAdapter(levelHistory)&#10;        }&#10;    }&#10;&#10;    private fun loadRecentActivities() {&#10;        // SharedPreferences에서 저장된 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;&#10;        // 최근 활동 목록 생성&#10;        val recentActivities = records.map { record -&gt;&#10;            RecentActivity(&#10;                startDate = record.startDate,&#10;                endDate = record.endDate,&#10;                duration = record.duration,&#10;                isCompleted = record.isCompleted&#10;            )&#10;        }.sortedByDescending { it.endDate }.take(3)  // 최근 3개만 표시&#10;&#10;        // 어댑터 설정&#10;        recentActivityAdapter = RecentActivityAdapter(recentActivities)&#10;        rvRecentActivities.adapter = recentActivityAdapter&#10;    }&#10;&#10;    private fun navigateToMain() {&#10;        val intent = Intent(this, MainActivity::class.java)&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.RecordManager&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.Timer&#10;import java.util.TimerTask&#10;&#10;class StatusActivity : BaseActivity() {&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#10;    private var goalAchievementChecked = false&#10;&#10;    // 일 단위 레벨 마일스톤 (실제 운영)&#10;    private val levelMilestones = listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;&#10;    // 분 단위 레벨 마일스톤 (테스트 모드)&#10;    private val minuteTestMilestones = listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;&#10;    // 초 단위 레벨 마일스톤 (초 단위 테스트 모드)&#10;    private val secondTestMilestones = listOf(0, 7, 14, 30, 60, 90, 120, 180)&#10;&#10;    private val levelTitles = listOf(&#10;        &quot;새싹 도전자&quot;,&#10;        &quot;첫걸음 성공&quot;,&#10;        &quot;의지의 시작&quot;,&#10;        &quot;한달의 기적&quot;,&#10;        &quot;습관의 탄생&quot;,&#10;        &quot;의지의 달인&quot;,&#10;        &quot;금주의 마스터&quot;,&#10;        &quot;절제의 달인&quot;&#10;    )&#10;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#10;    private var timer: Timer? = null&#10;    private val handler = Handler(Looper.getMainLooper())&#10;&#10;    // UI 요소 참조 저장 변수&#10;    private lateinit var tvDaysCount: TextView&#10;    private lateinit var tvTimeUnit: TextView&#10;    private lateinit var tvMessage: TextView&#10;    private lateinit var progressLevel: ProgressBar&#10;    private lateinit var tvTimeDetail: TextView&#10;    private lateinit var tvHoursDisplay: TextView // 시간 표시용 TextView 추가&#10;&#10;    // 금주 시작 시간 저장 변수&#10;    private var abstainStartTime: String = &quot;&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;        updateUI()&#10;        startTimer()&#10;&#10;        // 목표 달성 플래그 초기화&#10;        goalAchievementChecked = false&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // 화면이 보이지 않을 때 타이머 정지&#10;        stopTimer()&#10;    }&#10;&#10;    // Activity 클래스의 onNewIntent를 오버라이드&#10;    public override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        // 새 인텐트로 액티비티가 재사용될 때 수행할 작업&#10;        setIntent(intent)&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;        // UI 즉시 갱신&#10;        updateUI()&#10;    }&#10;&#10;    override fun handleNewIntent(intent: Intent?) {&#10;        // BaseActivity의 handleNewIntent 구현&#10;        updateUI()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        stopTimer()&#10;        timer = Timer()&#10;        timer?.scheduleAtFixedRate(object : TimerTask() {&#10;            override fun run() {&#10;                handler.post {&#10;                    updateTimeDisplay()&#10;                }&#10;            }&#10;        }, 0, 100)  // 100ms 간격으로 업데이트&#10;    }&#10;&#10;    private fun stopTimer() {&#10;        timer?.cancel()&#10;        timer = null&#10;    }&#10;&#10;    private fun updateTimeDisplay() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 시간 계산&#10;        val hours = (secondsPassed / 3600) % 24&#10;&#10;        // 시간 표시 업데이트&#10;        tvHoursDisplay.text = String.format(&quot;%02d시간&quot;, hours)&#10;&#10;        // 테스트 모드별 시간 표시 업데이트&#10;        val timeText = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;        }&#10;&#10;        tvTimeDetail.text = timeText&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StatusActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_status, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        tvDaysCount = view.findViewById(R.id.tvDaysCount)&#10;        tvTimeUnit = view.findViewById(R.id.tvTimeUnit)&#10;        tvMessage = view.findViewById(R.id.tvMessage)&#10;        progressLevel = view.findViewById(R.id.progressLevel)&#10;        tvTimeDetail = view.findViewById(R.id.tvTimeDetail)&#10;        tvHoursDisplay = view.findViewById(R.id.tvHoursDisplay) // 시간 표시 TextView 초기화&#10;        tvTimeDetail.text = &quot;00:00:00&quot;  // 초기값 변경&#10;&#10;        // 시간 단위 텍스트 설정&#10;        tvTimeUnit.text = Constants.TIME_UNIT_TEXT&#10;&#10;        // 중지 버튼 설정&#10;        val btnStopSobriety = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#10;        btnStopSobriety.setOnClickListener {&#10;            // 기존 AlertDialog 대신 커스텀 다이얼로그 사용&#10;            showCustomStopDialog()&#10;        }&#10;&#10;        // 최초 UI 업데이트&#10;        updateUI()&#10;    }&#10;&#10;    private fun displayTimeDetails(timePassed: Int, secondsPassed: Long) {&#10;        val timeText = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val seconds = secondsPassed % 60&#10;                val millis = (System.currentTimeMillis() % 1000) / 10&#10;                String.format(&quot;%02d:%02d&quot;, seconds, millis)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val minutes = secondsPassed / 60&#10;                val seconds = secondsPassed % 60&#10;                String.format(&quot;%02d:%02d&quot;, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val hours = (secondsPassed / 3600) % 24&#10;                val minutes = (secondsPassed / 60) % 60&#10;                String.format(&quot;%02d:%02d&quot;, hours, minutes)&#10;            }&#10;        }&#10;&#10;        tvTimeDetail.text = timeText&#10;    }&#10;&#10;    /**&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#10;     */&#10;    private fun updateUI() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        if (completionFlag) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;            progressLevel.progress = 100&#10;            return&#10;        }&#10;&#10;        val currentTime = System.currentTimeMillis()&#10;        val timePassed = ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 진행률 계산&#10;        val targetSeconds = when {&#10;            Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;            Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;            else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;        }&#10;&#10;        val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;        progressLevel.progress = progress.coerceIn(0, 100)&#10;&#10;        // 타이머 표시 업데이트&#10;        displayTimeDetails(timePassed, secondsPassed)&#10;&#10;        if (timePassed &gt; targetDays) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            progressLevel.progress = 100&#10;            handleGoalCompletion(targetDays)&#10;        } else {&#10;            tvDaysCount.text = timePassed.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.black, theme))&#10;            // 남은 시간 계산 및 메시지 업데이트&#10;            val remainingDays = targetDays - timePassed + 1&#10;            tvMessage.text = &quot;목표까지 ${remainingDays}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;        }&#10;    }&#10;&#10;    private fun handleGoalCompletion(targetDays: Int) {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val endTime = System.currentTimeMillis()&#10;&#10;        with(sharedPref.edit()) {&#10;            putBoolean(&quot;timer_completed&quot;, true)&#10;            apply()&#10;        }&#10;&#10;        if (!goalAchievementChecked) {&#10;            goalAchievementChecked = true&#10;            stopTimer()&#10;&#10;            // 3초 후에 기록 화면으로 이동&#10;            Handler(Looper.getMainLooper()).postDelayed({&#10;                // 활동 기록 저장&#10;                saveActivity(true)&#10;                // 기록 화면으로 이동&#10;                navigateToRecords()&#10;            }, 3000)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 완료된 금주 기록을 저장합니다&#10;     * @return 저장된 기록의 ID&#10;     */&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 ID 생성&#10;        val recordId = System.currentTimeMillis()&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedLevel = level,&#10;            levelTitle = levelTitles[level - 1],&#10;            isCompleted = true&#10;        )&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;&#10;        // 기록 저장&#10;        with(sharedPref.edit()) {&#10;            putString(&quot;records&quot;, SobrietyRecord.toJsonArray(records))&#10;            apply()&#10;        }&#10;&#10;        // 현재 진행중인 금주 데이터 초기화&#10;        with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;            clear()&#10;            apply()&#10;        }&#10;&#10;        return recordId&#10;    }&#10;&#10;    private fun saveActivity(isCompleted: Boolean) {&#10;        val activity = RecentActivity(&#10;            startDate = abstainStartTime,&#10;            endDate = getCurrentDate(),&#10;            duration = calculateDuration(),&#10;            isCompleted = isCompleted&#10;        )&#10;        RecordManager.addActivity(activity)&#10;    }&#10;&#10;    private fun onGoalCompleted() {&#10;        saveActivity(true)&#10;        navigateToRecords()&#10;    }&#10;&#10;    private fun stopAbstaining() {&#10;        saveActivity(false)&#10;        // ...existing stop logic...&#10;    }&#10;&#10;    private fun getCurrentDate(): String {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        return dateFormat.format(Date())&#10;    }&#10;&#10;    private fun calculateDuration(): Int {&#10;        val startDate = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).parse(abstainStartTime)&#10;        val currentDate = Date()&#10;        return ((currentDate.time - startDate.time) / (1000 * 60 * 60 * 24)).toInt() + 1&#10;    }&#10;&#10;    private fun navigateToRecords() {&#10;        val intent = Intent(this, RecordsActivity::class.java)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    /**&#10;     * 눈에 잘 보이는 버튼이 있는 커스텀 중지 확인 다이얼로그를 표시합니다.&#10;     */&#10;    private fun showCustomStopDialog() {&#10;        // 커스텀 다이얼로그 생성&#10;        val dialog = android.app.Dialog(this)&#10;        dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#10;        dialog.setContentView(com.example.alcoholictimer.R.layout.dialog_stop_sobriety)&#10;&#10;        // 다이얼로그 배경을 투명하게 설정하고 외부 영역 클릭으로 닫히지 않게 설정&#10;        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)&#10;        dialog.setCancelable(false)&#10;&#10;        // 취소 버튼 클릭 리스너&#10;        val btnCancel = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnCancel)&#10;        btnCancel.setOnClickListener {&#10;            dialog.dismiss()&#10;        }&#10;&#10;        // 확인 버튼 클릭 리스너&#10;        val btnConfirm = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnConfirm)&#10;        btnConfirm.setOnClickListener {&#10;            dialog.dismiss()&#10;&#10;            // SharedPreferences 초기화&#10;            with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;                clear()&#10;                apply()&#10;            }&#10;&#10;            // 시작 화면으로 이동&#10;            val intent = Intent(this@StatusActivity, MainActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;            startActivity(intent)&#10;            finish()&#10;&#10;            // 토스트 메시지 표시&#10;            Toast.makeText(this@StatusActivity, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        // 다이얼로그 표시&#10;        dialog.show()&#10;    }&#10;&#10;    private fun navigateToStart() {&#10;        val intent = Intent(this, StartActivity::class.java)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;&#10;    private fun navigateToRecords() {&#10;        val intent = Intent(this, RecordsActivity::class.java)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;    }&#10;&#10;    private fun updateTimeModeDisplay() {&#10;        val timeUnitText = when {&#10;            Constants.isSecondTestMode -&gt; &quot;금주 목표 초수&quot;&#10;            Constants.isMinuteTestMode -&gt; &quot;금주 목표 분수&quot;&#10;            else -&gt; &quot;금주 목표 일수&quot;&#10;        }&#10;        tvTimeUnit.text = timeUnitText&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.RecordManager&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.Timer&#10;import java.util.TimerTask&#10;&#10;class StatusActivity : BaseActivity() {&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#10;    private var goalAchievementChecked = false&#10;&#10;    // 일 단위 레벨 마일스톤 (실제 운영)&#10;    private val levelMilestones = listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;&#10;    // 분 단위 레벨 마일스톤 (테스트 모드)&#10;    private val minuteTestMilestones = listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;&#10;    // 초 단위 레벨 마일스톤 (초 단위 테스트 모드)&#10;    private val secondTestMilestones = listOf(0, 7, 14, 30, 60, 90, 120, 180)&#10;&#10;    private val levelTitles = listOf(&#10;        &quot;새싹 도전자&quot;,&#10;        &quot;첫걸음 성공&quot;,&#10;        &quot;의지의 시작&quot;,&#10;        &quot;한달의 기적&quot;,&#10;        &quot;습관의 탄생&quot;,&#10;        &quot;의지의 달인&quot;,&#10;        &quot;금주의 마스터&quot;,&#10;        &quot;절제의 달인&quot;&#10;    )&#10;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#10;    private var timer: Timer? = null&#10;    private val handler = Handler(Looper.getMainLooper())&#10;&#10;    // UI 요소 참조 저장 변수&#10;    private lateinit var tvDaysCount: TextView&#10;    private lateinit var tvTimeUnit: TextView&#10;    private lateinit var tvMessage: TextView&#10;    private lateinit var progressLevel: ProgressBar&#10;    private lateinit var tvTimeDetail: TextView&#10;    private lateinit var tvHoursDisplay: TextView // 시간 표시용 TextView 추가&#10;&#10;    // 금주 시작 시간 저장 변수&#10;    private var abstainStartTime: String = &quot;&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;        updateUI()&#10;        startTimer()&#10;&#10;        // 목표 달성 플래그 초기화&#10;        goalAchievementChecked = false&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // 화면이 보이지 않을 때 타이머 정지&#10;        stopTimer()&#10;    }&#10;&#10;    // Activity 클래스의 onNewIntent를 오버라이드&#10;    public override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        // 새 인텐트로 액티비티가 재사용될 때 수행할 작업&#10;        setIntent(intent)&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;        // UI 즉시 갱신&#10;        updateUI()&#10;    }&#10;&#10;    override fun handleNewIntent(intent: Intent?) {&#10;        // BaseActivity의 handleNewIntent 구현&#10;        updateUI()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        stopTimer()&#10;        timer = Timer()&#10;        timer?.scheduleAtFixedRate(object : TimerTask() {&#10;            override fun run() {&#10;                handler.post {&#10;                    updateTimeDisplay()&#10;                }&#10;            }&#10;        }, 0, 100)  // 100ms 간격으로 업데이트&#10;    }&#10;&#10;    private fun stopTimer() {&#10;        timer?.cancel()&#10;        timer = null&#10;    }&#10;&#10;    private fun updateTimeDisplay() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 시간 계산&#10;        val hours = (secondsPassed / 3600) % 24&#10;&#10;        // 시간 표시 업데이트&#10;        tvHoursDisplay.text = String.format(&quot;%02d시간&quot;, hours)&#10;&#10;        // 테스트 모드별 시간 표시 업데이트&#10;        val timeText = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;        }&#10;&#10;        tvTimeDetail.text = timeText&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StatusActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_status, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        tvDaysCount = view.findViewById(R.id.tvDaysCount)&#10;        tvTimeUnit = view.findViewById(R.id.tvTimeUnit)&#10;        tvMessage = view.findViewById(R.id.tvMessage)&#10;        progressLevel = view.findViewById(R.id.progressLevel)&#10;        tvTimeDetail = view.findViewById(R.id.tvTimeDetail)&#10;        tvHoursDisplay = view.findViewById(R.id.tvHoursDisplay) // 시간 표시 TextView 초기화&#10;        tvTimeDetail.text = &quot;00:00:00&quot;  // 초기값 변경&#10;&#10;        // 시간 단위 텍스트 설정&#10;        tvTimeUnit.text = Constants.TIME_UNIT_TEXT&#10;&#10;        // 중지 버튼 설정&#10;        val btnStopSobriety = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#10;        btnStopSobriety.setOnClickListener {&#10;            // 기존 AlertDialog 대신 커스텀 다이얼로그 사용&#10;            showCustomStopDialog()&#10;        }&#10;&#10;        // 최초 UI 업데이트&#10;        updateUI()&#10;    }&#10;&#10;    private fun displayTimeDetails(timePassed: Int, secondsPassed: Long) {&#10;        val timeText = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val seconds = secondsPassed % 60&#10;                val millis = (System.currentTimeMillis() % 1000) / 10&#10;                String.format(&quot;%02d:%02d&quot;, seconds, millis)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val minutes = secondsPassed / 60&#10;                val seconds = secondsPassed % 60&#10;                String.format(&quot;%02d:%02d&quot;, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val hours = (secondsPassed / 3600) % 24&#10;                val minutes = (secondsPassed / 60) % 60&#10;                String.format(&quot;%02d:%02d&quot;, hours, minutes)&#10;            }&#10;        }&#10;&#10;        tvTimeDetail.text = timeText&#10;    }&#10;&#10;    /**&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#10;     */&#10;    private fun updateUI() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        if (completionFlag) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;            progressLevel.progress = 100&#10;            return&#10;        }&#10;&#10;        val currentTime = System.currentTimeMillis()&#10;        val timePassed = ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 진행률 계산&#10;        val targetSeconds = when {&#10;            Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;            Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;            else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;        }&#10;&#10;        val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;        progressLevel.progress = progress.coerceIn(0, 100)&#10;&#10;        // 타이머 표시 업데이트&#10;        displayTimeDetails(timePassed, secondsPassed)&#10;&#10;        if (timePassed &gt; targetDays) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            progressLevel.progress = 100&#10;            handleGoalCompletion(targetDays)&#10;        } else {&#10;            tvDaysCount.text = timePassed.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.black, theme))&#10;            // 남은 시간 계산 및 메시지 업데이트&#10;            val remainingDays = targetDays - timePassed + 1&#10;            tvMessage.text = &quot;목표까지 ${remainingDays}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;        }&#10;    }&#10;&#10;    private fun handleGoalCompletion(targetDays: Int) {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val endTime = System.currentTimeMillis()&#10;&#10;        with(sharedPref.edit()) {&#10;            putBoolean(&quot;timer_completed&quot;, true)&#10;            apply()&#10;        }&#10;&#10;        if (!goalAchievementChecked) {&#10;            goalAchievementChecked = true&#10;            stopTimer()&#10;&#10;            // 3초 후에 기록 화면으로 이동&#10;            Handler(Looper.getMainLooper()).postDelayed({&#10;                // 활동 기록 저장&#10;                saveActivity(true)&#10;                // 기록 화면으로 이동&#10;                navigateToRecords()&#10;            }, 3000)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 완료된 금주 기록을 저장합니다&#10;     * @return 저장된 기록의 ID&#10;     */&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 ID 생성&#10;        val recordId = System.currentTimeMillis()&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedLevel = level,&#10;            levelTitle = levelTitles[level - 1],&#10;            isCompleted = true&#10;        )&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;&#10;        // 기록 저장&#10;        with(sharedPref.edit()) {&#10;            putString(&quot;records&quot;, SobrietyRecord.toJsonArray(records))&#10;            apply()&#10;        }&#10;&#10;        // 현재 진행중인 금주 데이터 초기화&#10;        with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;            clear()&#10;            apply()&#10;        }&#10;&#10;        return recordId&#10;    }&#10;&#10;    private fun saveActivity(isCompleted: Boolean) {&#10;        val activity = RecentActivity(&#10;            startDate = abstainStartTime,&#10;            endDate = getCurrentDate(),&#10;            duration = calculateDuration(),&#10;            isCompleted = isCompleted&#10;        )&#10;        RecordManager.addActivity(activity)&#10;    }&#10;&#10;    private fun onGoalCompleted() {&#10;        saveActivity(true)&#10;        navigateToRecords()&#10;    }&#10;&#10;    private fun stopAbstaining() {&#10;        saveActivity(false)&#10;        // ...existing stop logic...&#10;    }&#10;&#10;    private fun getCurrentDate(): String {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        return dateFormat.format(Date())&#10;    }&#10;&#10;    private fun calculateDuration(): Int {&#10;        val startDate = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).parse(abstainStartTime)&#10;        val currentDate = Date()&#10;        return ((currentDate.time - startDate.time) / (1000 * 60 * 60 * 24)).toInt() + 1&#10;    }&#10;&#10;    private fun navigateToRecords() {&#10;        val intent = Intent(this, RecordsActivity::class.java)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    /**&#10;     * 눈에 잘 보이는 버튼이 있는 커스텀 중지 확인 다이얼로그를 표시합니다.&#10;     */&#10;    private fun showCustomStopDialog() {&#10;        // 커스텀 다이얼로그 생성&#10;        val dialog = android.app.Dialog(this)&#10;        dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#10;        dialog.setContentView(com.example.alcoholictimer.R.layout.dialog_stop_sobriety)&#10;&#10;        // 다이얼로그 배경을 투명하게 설정하고 외부 영역 클릭으로 닫히지 않게 설정&#10;        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)&#10;        dialog.setCancelable(false)&#10;&#10;        // 취소 버튼 클릭 리스너&#10;        val btnCancel = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnCancel)&#10;        btnCancel.setOnClickListener {&#10;            dialog.dismiss()&#10;        }&#10;&#10;        // 확인 버튼 클릭 리스너&#10;        val btnConfirm = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnConfirm)&#10;        btnConfirm.setOnClickListener {&#10;            dialog.dismiss()&#10;&#10;            // SharedPreferences 초기화&#10;            with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;                clear()&#10;                apply()&#10;            }&#10;&#10;            // 시작 화면으로 이동&#10;            val intent = Intent(this@StatusActivity, MainActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;            startActivity(intent)&#10;            finish()&#10;&#10;            // 토스트 메시지 표시&#10;            Toast.makeText(this@StatusActivity, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        // 다이얼로그 표시&#10;        dialog.show()&#10;    }&#10;&#10;    private fun navigateToStart() {&#10;        val intent = Intent(this, StartActivity::class.java)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;&#10;    private fun updateTimeModeDisplay() {&#10;        val timeUnitText = when {&#10;            Constants.isSecondTestMode -&gt; &quot;금주 목표 초수&quot;&#10;            Constants.isMinuteTestMode -&gt; &quot;금주 목표 분수&quot;&#10;            else -&gt; &quot;금주 목표 일수&quot;&#10;        }&#10;        tvTimeUnit.text = timeUnitText&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.model.RecentActivity&#10;&#10;class RecentActivityAdapter : RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;    private val activities = ArrayList&lt;RecentActivity&gt;()&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val ivActivityIcon: ImageView = itemView.findViewById(R.id.ivActivityIcon)&#10;        val tvEndDate: TextView = itemView.findViewById(R.id.tvEndDate)&#10;        val tvActivityTitle: TextView = itemView.findViewById(R.id.tvActivityTitle)&#10;        val tvDuration: TextView = itemView.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val tvSavedMoney: TextView = itemView.findViewById(R.id.tvSavedMoney)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        &#10;        holder.tvEndDate.text = activity.endDate&#10;        holder.tvActivityTitle.text = activity.title&#10;        holder.tvDuration.text = &quot;${activity.duration}일 ${activity.hours}시간&quot;&#10;        holder.tvStatus.text = if(activity.isSuccess) &quot;성공&quot; else &quot;실패&quot;&#10;        holder.tvSavedMoney.text = &quot;${activity.savedMoney}만원 절약&quot;&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;&#10;    fun updateActivities(newActivities: List&lt;RecentActivity&gt;) {&#10;        activities.clear()&#10;        activities.addAll(newActivities.take(5)) // 최대 5개까지만 표시&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapters/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapters/RecentActivityAdapter.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer.adapters&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.models.RecentActivity&#10;&#10;class RecentActivityAdapter(private val activities: List&lt;RecentActivity&gt;) :&#10;    RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;&#10;    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {&#10;        val tvPeriod: TextView = view.findViewById(R.id.tvPeriod)&#10;        val tvDuration: TextView = view.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = view.findViewById(R.id.tvStatus)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        holder.tvPeriod.text = &quot;${activity.startDate} ~ ${activity.endDate}&quot;&#10;        holder.tvDuration.text = &quot;달성일수: ${activity.duration}일&quot;&#10;        holder.tvStatus.text = if (activity.isCompleted) &quot;성공&quot; else &quot;중단&quot;&#10;        holder.tvStatus.setTextColor(&#10;            holder.itemView.context.getColor(&#10;                if (activity.isCompleted) android.R.color.black else android.R.color.holo_red_dark&#10;            )&#10;        )&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapters&#13;&#10;&#13;&#10;import android.view.LayoutInflater&#13;&#10;import android.view.View&#13;&#10;import android.view.ViewGroup&#13;&#10;import android.widget.TextView&#13;&#10;import androidx.recyclerview.widget.RecyclerView&#13;&#10;import com.example.alcoholictimer.R&#13;&#10;import com.example.alcoholictimer.models.RecentActivity&#13;&#10;import java.text.SimpleDateFormat&#13;&#10;import java.util.Locale&#13;&#10;&#13;&#10;class RecentActivityAdapter(private val activities: List&lt;RecentActivity&gt;) :&#13;&#10;    RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#13;&#10;&#13;&#10;    class ViewHolder(view: View) : RecyclerView.ViewHolder(view) {&#13;&#10;        val tvDate: TextView = view.findViewById(R.id.tvEndDate)&#13;&#10;        val tvDuration: TextView = view.findViewById(R.id.tvDuration)&#13;&#10;        val tvStatus: TextView = view.findViewById(R.id.tvStatus)&#13;&#10;        val tvSavedMoney: TextView = view.findViewById(R.id.tvSavedMoney)&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#13;&#10;        val view = LayoutInflater.from(parent.context)&#13;&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#13;&#10;        return ViewHolder(view)&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#13;&#10;        val activity = activities[position]&#13;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#13;&#10;&#13;&#10;        holder.tvDate.text = activity.endDate&#13;&#10;        holder.tvDuration.text = &quot;${activity.duration}일&quot;&#13;&#10;        holder.tvStatus.text = if (activity.isCompleted) &quot;성공&quot; else &quot;실패&quot;&#13;&#10;&#13;&#10;        // 하루 평균 음주 비용을 5000원으로 가정하고 절약 금액 계산&#13;&#10;        val savedMoney = activity.duration * 5000&#13;&#10;        val savedMoneyText = when {&#13;&#10;            savedMoney &gt;= 10000 -&gt; String.format(&quot;%.1f만원&quot;, savedMoney / 10000.0)&#13;&#10;            else -&gt; &quot;${savedMoney}원&quot;&#13;&#10;        }&#13;&#10;        holder.tvSavedMoney.text = &quot;${savedMoneyText} 절약&quot;&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun getItemCount() = activities.size&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/model/RecentActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/model/RecentActivity.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.model&#10;&#10;data class RecentActivity(&#10;    val endDate: String,        // 종료일 &#10;    val title: String,          // 금주/챌린지 이름&#10;    val duration: Int,          // 지속 일수&#10;    val hours: Int,             // 지속 시간&#10;    val isSuccess: Boolean,     // 성공 여부&#10;    val savedMoney: Int         // 절약 금액(만원)&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/models/RecentActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/models/RecentActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer.models&#10;&#10;import com.google.gson.Gson&#10;import com.google.gson.reflect.TypeToken&#10;&#10;data class RecentActivity(&#10;    val startDate: String,      // 시작일&#10;    val endDate: String,        // 종료일&#10;    val duration: Int,          // 지속 일수&#10;    val isCompleted: Boolean    // 성공 여부&#10;) {&#10;    companion object {&#10;        private val gson = Gson()&#10;&#10;        fun toJson(activities: List&lt;RecentActivity&gt;): String {&#10;            return gson.toJson(activities)&#10;        }&#10;&#10;        fun fromJson(json: String): List&lt;RecentActivity&gt; {&#10;            val type = object : TypeToken&lt;List&lt;RecentActivity&gt;&gt;() {}.type&#10;            return gson.fromJson(json, type) ?: emptyList()&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer.models&#13;&#10;&#13;&#10;data class RecentActivity(&#13;&#10;    val startDate: String,      // 시작일&#13;&#10;    val endDate: String,        // 종료일&#13;&#10;    val duration: Int,          // 지속 일수&#13;&#10;    val isCompleted: Boolean    // 성공 여부&#13;&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/RecordManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/RecordManager.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer.utils&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;object RecordManager {&#10;    private const val PREFS_NAME = &quot;recent_activities&quot;&#10;    private const val KEY_ACTIVITIES = &quot;activities&quot;&#10;&#10;    private lateinit var prefs: SharedPreferences&#10;&#10;    fun init(context: Context) {&#10;        prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;    }&#10;&#10;    fun addActivity(activity: RecentActivity) {&#10;        val activities = getActivities().toMutableList()&#10;        activities.add(0, activity) // 최신 활동을 맨 앞에 추가&#10;&#10;        // 최대 5개만 유지&#10;        while (activities.size &gt; 5) {&#10;            activities.removeLast()&#10;        }&#10;&#10;        prefs.edit().putString(KEY_ACTIVITIES, RecentActivity.toJson(activities)).apply()&#10;    }&#10;&#10;    fun getActivities(): List&lt;RecentActivity&gt; {&#10;        val json = prefs.getString(KEY_ACTIVITIES, &quot;[]&quot;) ?: &quot;[]&quot;&#10;        return RecentActivity.fromJson(json)&#10;    }&#10;&#10;    fun clearActivities() {&#10;        prefs.edit().remove(KEY_ACTIVITIES).apply()&#10;    }&#10;&#10;    private fun getCurrentDate(): String {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        return dateFormat.format(Date())&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#13;&#10;&#13;&#10;import android.content.Context&#13;&#10;import android.content.SharedPreferences&#13;&#10;import com.example.alcoholictimer.models.RecentActivity&#13;&#10;import java.text.SimpleDateFormat&#13;&#10;import java.util.*&#13;&#10;&#13;&#10;object RecordManager {&#13;&#10;    private const val PREFS_NAME = &quot;recent_activities&quot;&#13;&#10;    private const val KEY_ACTIVITIES = &quot;activities&quot;&#13;&#10;&#13;&#10;    private lateinit var prefs: SharedPreferences&#13;&#10;&#13;&#10;    fun init(context: Context) {&#13;&#10;        prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#13;&#10;    }&#13;&#10;&#13;&#10;    fun addActivity(activity: RecentActivity) {&#13;&#10;        // 간단한 문자열 형태로 저장&#13;&#10;        val activities = getActivities().toMutableList()&#13;&#10;        activities.add(0, activity) // 최신 활동을 맨 앞에 추가&#13;&#10;&#13;&#10;        // 최대 5개만 유지&#13;&#10;        while (activities.size &gt; 5) {&#13;&#10;            activities.removeLast()&#13;&#10;        }&#13;&#10;&#13;&#10;        // 간단한 문자열 저장 방식 사용&#13;&#10;        val activitiesString = activities.joinToString(&quot;|&quot;) {&#13;&#10;            &quot;${it.startDate},${it.endDate},${it.duration},${it.isCompleted}&quot;&#13;&#10;        }&#13;&#10;        prefs.edit().putString(KEY_ACTIVITIES, activitiesString).apply()&#13;&#10;    }&#13;&#10;&#13;&#10;    fun getActivities(): List&lt;RecentActivity&gt; {&#13;&#10;        val activitiesString = prefs.getString(KEY_ACTIVITIES, &quot;&quot;) ?: &quot;&quot;&#13;&#10;        if (activitiesString.isEmpty()) return emptyList()&#13;&#10;&#13;&#10;        return activitiesString.split(&quot;|&quot;).mapNotNull { activityData -&gt;&#13;&#10;            val parts = activityData.split(&quot;,&quot;)&#13;&#10;            if (parts.size == 4) {&#13;&#10;                RecentActivity(&#13;&#10;                    startDate = parts[0],&#13;&#10;                    endDate = parts[1],&#13;&#10;                    duration = parts[2].toIntOrNull() ?: 0,&#13;&#10;                    isCompleted = parts[3].toBoolean()&#13;&#10;                )&#13;&#10;            } else null&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    fun clearActivities() {&#13;&#10;        prefs.edit().remove(KEY_ACTIVITIES).apply()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun getCurrentDate(): String {&#13;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#13;&#10;        return dateFormat.format(Date())&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_challenge.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_challenge.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@android:color/white&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;챌린지&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;/&gt;&#10;&#10;        &lt;!-- 챌린지 목록 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;!-- 설명 텍스트 --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;챌린지 기능은 개발중입니다.&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;추가될 예정인 기능:&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;            &lt;!-- 예정된 기능 리스트 --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;1. 일일 챌린지&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;2. 주간 챌린지&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;3. 월간 챌린지&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;4. 특별 이벤트 챌린지&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;더 나은 서비스로 찾아뵙겠습니다.&quot;&#10;                android:textStyle=&quot;italic&quot;&#10;                android:gravity=&quot;center&quot;/&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_message.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_message.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@android:color/white&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;응원 메시지&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;/&gt;&#10;&#10;        &lt;!-- 메시지 섹션 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;응원 메시지 기능은 개발중입니다.&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;제공될 예정인 기능:&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;            &lt;!-- 예정 기능 리스트 --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;1. 일일 응원 메시지&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;2. 명언/격언&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;3. 회원들의 응원 메시지&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;4. 전문가의 조언&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;더 나은 서비스로 찾아뵙겠습니다.&quot;&#10;                android:textStyle=&quot;italic&quot;&#10;                android:gravity=&quot;center&quot;/&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_records.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_records.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@android:color/white&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;금주 활동 기록&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;        &lt;!-- 기간 선택 탭 --&gt;&#10;        &lt;HorizontalScrollView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:scrollbars=&quot;none&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                &lt;Button&#10;                    android:id=&quot;@+id/btnWeek&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;주&quot;&#10;                    android:layout_marginEnd=&quot;8dp&quot;/&gt;&#10;&#10;                &lt;Button&#10;                    android:id=&quot;@+id/btnMonth&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;월&quot;&#10;                    android:layout_marginEnd=&quot;8dp&quot;/&gt;&#10;&#10;                &lt;Button&#10;                    android:id=&quot;@+id/btnYear&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;년&quot;&#10;                    android:layout_marginEnd=&quot;8dp&quot;/&gt;&#10;&#10;                &lt;Button&#10;                    android:id=&quot;@+id/btnAll&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;전체&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/HorizontalScrollView&gt;&#10;&#10;        &lt;!-- 요약 정보 --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvPeriodSummary&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;선택 기간: 전체&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;        &lt;!-- 통계 카드 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:background=&quot;#F5F5F5&quot;&#10;            android:padding=&quot;16dp&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- 주간 통계 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;이번 주&quot;&#10;                    android:textSize=&quot;16sp&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvWeeklyCount&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;0일&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- 월간 통계 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;이번 달&quot;&#10;                    android:textSize=&quot;16sp&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvMonthlyCount&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;0일&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- 전체 통계 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;전체&quot;&#10;                    android:textSize=&quot;16sp&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvTotalCount&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;0일&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSummary&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;금주를 시작한지 0일이 지났습니다.&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;        &lt;!-- 통계 및 그래프 --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;통계 및 그래프&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;        &lt;!-- 금주 일수 그래프 --&gt;&#10;        &lt;FrameLayout&#10;            android:id=&quot;@+id/chartContainer&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;200dp&quot;&#10;            android:background=&quot;#F5F5F5&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_gravity=&quot;center&quot;&#10;                android:text=&quot;금주 일수 누적 그래프&quot;&#10;                android:textSize=&quot;16sp&quot;/&gt;&#10;        &lt;/FrameLayout&gt;&#10;&#10;        &lt;!-- 최고 기록/최장 금주 일수 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:background=&quot;#F5F5F5&quot;&#10;            android:padding=&quot;16dp&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;최고 기록&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvTotalAbstinence&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;전체 누적 금주 일수: 0일&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvLongestStreak&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;최장 연속 금주 기록: 0일&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvLastFailure&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;마지막 금주 실패: 없음&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 최근 활동 섹션 --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;최근 활동&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/rvRecentActivities&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;        &lt;!-- 레벨 달성 히스토리 --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;레벨 달성 히스토리&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/rvLevelHistory&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:minHeight=&quot;200dp&quot;/&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@android:color/white&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;금주 활동 기록&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;        &lt;!-- 기간 선택 탭 --&gt;&#10;        &lt;HorizontalScrollView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:scrollbars=&quot;none&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;                &lt;Button&#10;                    android:id=&quot;@+id/btnWeek&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;주&quot;&#10;                    android:layout_marginEnd=&quot;8dp&quot;/&gt;&#10;&#10;                &lt;Button&#10;                    android:id=&quot;@+id/btnMonth&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;월&quot;&#10;                    android:layout_marginEnd=&quot;8dp&quot;/&gt;&#10;&#10;                &lt;Button&#10;                    android:id=&quot;@+id/btnYear&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;년&quot;&#10;                    android:layout_marginEnd=&quot;8dp&quot;/&gt;&#10;&#10;                &lt;Button&#10;                    android:id=&quot;@+id/btnAll&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;전체&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/HorizontalScrollView&gt;&#10;&#10;        &lt;!-- 요약 정보 --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvPeriodSummary&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;선택 기간: 전체&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;        &lt;!-- 통계 카드 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:background=&quot;#F5F5F5&quot;&#10;            android:padding=&quot;16dp&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;            &lt;!-- 주간 통계 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;이번 주&quot;&#10;                    android:textSize=&quot;16sp&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvWeeklyCount&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;0일&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- 월간 통계 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;이번 달&quot;&#10;                    android:textSize=&quot;16sp&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvMonthlyCount&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;0일&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- 전체 통계 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;전체&quot;&#10;                    android:textSize=&quot;16sp&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvTotalCount&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;0일&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSummary&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;금주를 시작한지 0일이 지났습니다.&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;        &lt;!-- 통계 및 그래프 --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;통계 및 그래프&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;        &lt;!-- 금주 일수 그래프 --&gt;&#10;        &lt;FrameLayout&#10;            android:id=&quot;@+id/chartContainer&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;200dp&quot;&#10;            android:background=&quot;#F5F5F5&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_gravity=&quot;center&quot;&#10;                android:text=&quot;금주 일수 누적 그래프&quot;&#10;                android:textSize=&quot;16sp&quot;/&gt;&#10;        &lt;/FrameLayout&gt;&#10;&#10;        &lt;!-- 최고 기록/최장 금주 일수 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:background=&quot;#F5F5F5&quot;&#10;            android:padding=&quot;16dp&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;최고 기록&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvTotalAbstinence&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;전체 누적 금주 일수: 0일&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvLongestStreak&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;최장 연속 금주 기록: 0일&quot;&#10;                android:layout_marginBottom=&quot;4dp&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvLastFailure&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;마지막 금주 실패: 없음&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 최근 활동 섹션 --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;최근 활동&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/rvRecentActivities&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:nestedScrollingEnabled=&quot;false&quot;/&gt;&#10;&#10;        &lt;!-- 레벨 달성 히스토리 --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;레벨 달성 히스토리&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:layout_marginTop=&quot;8dp&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;/&gt;&#10;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/rvLevelHistory&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:minHeight=&quot;200dp&quot;/&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_recent_activity.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_recent_activity.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;com.google.android.material.card.MaterialCardView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;8dp&quot;&#10;    app:cardElevation=&quot;2dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- 상단 행: 아이콘, 날짜, 제목 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:layout_marginBottom=&quot;8dp&quot;&gt;&#10;&#10;            &lt;ImageView&#10;                android:id=&quot;@+id/ivActivityIcon&quot;&#10;                android:layout_width=&quot;24dp&quot;&#10;                android:layout_height=&quot;24dp&quot;&#10;                android:src=&quot;@drawable/ic_launcher_background&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvEndDate&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;&#10;                android:text=&quot;2025-08-05&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvActivityTitle&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;금주 챌린지&quot;&#10;                android:textStyle=&quot;bold&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 하단 행: 기간, 상태, 절약금액 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvDuration&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;12일 4시간&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvStatus&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;16dp&quot;&#10;                android:text=&quot;성공&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvSavedMoney&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:layout_marginStart=&quot;16dp&quot;&#10;                android:gravity=&quot;end&quot;&#10;                android:text=&quot;25만원 절약&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/com.google.android.material.card.MaterialCardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginHorizontal=&quot;8dp&quot;&#10;    android:layout_marginVertical=&quot;4dp&quot;&#10;    app:cardElevation=&quot;1dp&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- 아이콘 --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/ivIcon&quot;&#10;            android:layout_width=&quot;40dp&quot;&#10;            android:layout_height=&quot;40dp&quot;&#10;            android:src=&quot;@drawable/ic_launcher_foreground&quot;&#10;            android:layout_gravity=&quot;center_vertical&quot;/&gt;&#10;&#10;        &lt;!-- 내용 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:layout_marginStart=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvEndDate&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;#666666&quot;&#10;                android:text=&quot;2025-08-05&quot;/&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:layout_marginTop=&quot;4dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvDuration&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:text=&quot;12일 4시간&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvStatus&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginStart=&quot;12dp&quot;&#10;                    android:paddingHorizontal=&quot;8dp&quot;&#10;                    android:paddingVertical=&quot;2dp&quot;&#10;                    android:background=&quot;#E0E0E0&quot;&#10;                    android:textColor=&quot;#333333&quot;&#10;                    android:textSize=&quot;12sp&quot;&#10;                    android:text=&quot;성공&quot;/&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvSavedMoney&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:gravity=&quot;end&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;#2196F3&quot;&#10;                    android:text=&quot;25만원 절약&quot;/&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/nav_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/nav_menu.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_sober&quot;&#10;        android:title=&quot;금주&quot;/&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_records&quot;&#10;        android:title=&quot;활동 보기&quot;/&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_challenge&quot;&#10;        android:title=&quot;챌린지&quot;/&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_message&quot;&#10;        android:title=&quot;응원 메시지&quot;/&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_settings&quot;&#10;        android:title=&quot;설정&quot;/&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_notifications&quot;&#10;        android:title=&quot;알림함&quot;/&gt;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>