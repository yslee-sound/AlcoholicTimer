<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.ImageButton&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.google.android.material.navigation.NavigationView&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity() {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 금주 상태를 확인하여 메뉴 아이템 활성화/비활성화 설정&#10;            updateNavigationMenuState()&#10;            drawerLayout.open()&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener { menuItem -&gt;&#10;            when (menuItem.itemId) {&#10;                R.id.nav_start -&gt; {&#10;                    if (this !is StartActivity) {&#10;                        startActivity(Intent(this, StartActivity::class.java))&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_status -&gt; {&#10;                    if (this !is StatusActivity) {&#10;                        startActivity(Intent(this, StatusActivity::class.java))&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            drawerLayout.close()&#10;            true&#10;        }&#10;&#10;        // 각 액티비티의 레이아웃을 contentFrame에 추가&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 이미 금주를 시작했다면 금주 시작 메뉴를 비활성화합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주가 이미 시작되었으면 시작 메뉴 비활성화&#10;        val startMenuItem = navigationView.menu.findItem(R.id.nav_start)&#10;        startMenuItem.isEnabled = !hasStarted&#10;&#10;        // 금주가 시작되었을 때만 상태 메뉴 활성화&#10;        val statusMenuItem = navigationView.menu.findItem(R.id.nav_status)&#10;        statusMenuItem.isEnabled = hasStarted&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.google.android.material.navigation.NavigationView&#10;import java.util.Date&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity() {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 최신 상태로 업데이트&#10;            updateNavigationDrawer()&#10;            drawerLayout.open()&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener { menuItem -&gt;&#10;            when (menuItem.itemId) {&#10;                R.id.nav_start -&gt; {&#10;                    if (this !is StartActivity) {&#10;                        startActivity(Intent(this, StartActivity::class.java))&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_records -&gt; {&#10;                    // 활동 보기 화면으로 이동&#10;                    if (this !is StatusActivity) {&#10;                        val intent = Intent(this, StatusActivity::class.java)&#10;                        startActivity(intent)&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_challenge -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_messages -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_settings -&gt; {&#10;                    Toast.makeText(this, &quot;설정 기능은 준비 중입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;            drawerLayout.close()&#10;            true&#10;        }&#10;&#10;        // 각 액티비티의 레이아웃을 contentFrame에 추가&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태와 헤더 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationDrawer() {&#10;        // 네비게이션 메뉴 상태 업데이트&#10;        updateNavigationMenuState()&#10;&#10;        // 네비게이션 헤더 정보 업데이트&#10;        updateNavigationHeader()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 이미 금주를 시작했다면 금주 시작 메뉴를 비활성화합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주가 이미 시작되었으면 시작 메뉴 비활성화&#10;        val startMenuItem = navigationView.menu.findItem(R.id.nav_start)&#10;        startMenuItem.isEnabled = !hasStarted&#10;&#10;        // 금주가 시작되었을 때만 상태 메뉴 활성화&#10;        val statusMenuItem = navigationView.menu.findItem(R.id.nav_records)&#10;        statusMenuItem.isEnabled = hasStarted&#10;    }&#10;&#10;    /**&#10;     * 네비게이션 헤더의 사용자 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationHeader() {&#10;        val headerView = navigationView.getHeaderView(0)&#10;        if (headerView != null) {&#10;            val tvUserNickname = headerView.findViewById&lt;TextView&gt;(R.id.tvUserNickname)&#10;            val tvUserLevelDays = headerView.findViewById&lt;TextView&gt;(R.id.tvUserLevelDays)&#10;&#10;            // 사용자 이름은 기본값으로 &quot;알중이&quot; 사용&#10;            tvUserNickname.text = &quot;알중이&quot;&#10;&#10;            // 금주 상태에 따른 레벨 및 일수 정보 업데이트&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            if (sharedPref.contains(&quot;start_time&quot;)) {&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, Date().time)&#10;                val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;                // 레벨 계산 (시간 단위에 따라 적절한 마일스톤 사용)&#10;                val adjustedMilestones = when {&#10;                    Constants.SECOND_TEST_MODE -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                    Constants.TEST_MODE -&gt; listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;                    else -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                }&#10;&#10;                var currentLevel = 1&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i + 1&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                tvUserLevelDays.text = &quot;Level $currentLevel · ${timePassed}${Constants.TIME_UNIT_TEXT} 금주 중&quot;&#10;            } else {&#10;                tvUserLevelDays.text = &quot;금주를 시작해보세요!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.concurrent.TimeUnit&#10;&#10;/**&#10; * 금주 완료 후 결과 요약을 보여주는 액티비티&#10; */&#10;class RecordSummaryActivity : BaseActivity() {&#10;&#10;    private var record: SobrietyRecord? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 이전 화면에서 전달받은 기록 ID 가져오기&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1L)&#10;        if (recordId == -1L) {&#10;            // ID가 없으면 메인 화면으로 이동&#10;            finish()&#10;            return&#10;        }&#10;&#10;        // 해당 ID의 기록 데이터 불러오기&#10;        record = loadRecord(recordId)&#10;        if (record == null) {&#10;            finish()&#10;            return&#10;        }&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // 기록이 없으면 화면 설정 건너뛰기&#10;        if (record == null) {&#10;            return&#10;        }&#10;&#10;        // BaseActivity에서 상속받은 contentFrame에 레이아웃 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.activity_record_summary, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        val tvTitle = view.findViewById&lt;TextView&gt;(R.id.tvSummaryTitle)&#10;        val tvPeriod = view.findViewById&lt;TextView&gt;(R.id.tvPeriod)&#10;        val tvAchievedLevel = view.findViewById&lt;TextView&gt;(R.id.tvAchievedLevel)&#10;        val tvTotalDuration = view.findViewById&lt;TextView&gt;(R.id.tvTotalDuration)&#10;        val btnNewChallenge = view.findViewById&lt;Button&gt;(R.id.btnNewChallenge)&#10;&#10;        // 데이터 표시&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy년 MM월 dd일 HH:mm&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.startDate) ?: Date())&#10;        val endDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.endDate) ?: Date())&#10;&#10;        // 제목 설정&#10;        if (record!!.isCompleted) {&#10;            tvTitle.text = &quot;목표 달성을 축하합니다!&quot;&#10;        } else {&#10;            tvTitle.text = &quot;금주 기록 요약&quot;&#10;        }&#10;&#10;        // 기간 표시&#10;        tvPeriod.text = &quot;시작: $startDate\n종료: $endDate&quot;&#10;&#10;        // 달성 레벨&#10;        tvAchievedLevel.text = &quot;달성 레벨: ${record!!.achievedLevel} (${record!!.levelTitle})&quot;&#10;&#10;        // 총 금주 기간&#10;        val durationText = if (record!!.isCompleted) {&#10;            &quot;목표 ${record!!.duration}${getUnitText()} 완료했습니다!&quot;&#10;        } else {&#10;            &quot;목표 ${record!!.duration}${getUnitText()} 중 ${record!!.achievedDays}${getUnitText()} 달성 (${(record!!.achievedDays.toFloat() / record!!.duration * 100).toInt()}%)&quot;&#10;        }&#10;        tvTotalDuration.text = durationText&#10;&#10;        // 버튼 설정&#10;        btnNewChallenge.setOnClickListener {&#10;            // 새로운 도전 시작을 위해 메인 화면으로 이동&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 현재 테스트 모드에 맞는 단위 텍스트를 반환&#10;     */&#10;    private fun getUnitText(): String {&#10;        return if (com.example.alcoholictimer.utils.Constants.SECOND_TEST_MODE) {&#10;            &quot;초를&quot;&#10;        } else if (com.example.alcoholictimer.utils.Constants.TEST_MODE) {&#10;            &quot;분을&quot;&#10;        } else {&#10;            &quot;일을&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * SharedPreferences에서 특정 ID의 금주 기록을 불러옴&#10;     */&#10;    private fun loadRecord(recordId: Long): SobrietyRecord? {&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;&#10;        return records.find { it.id == recordId }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * 금주 완료 후 결과 요약을 보여주는 액티비티&#10; */&#10;class RecordSummaryActivity : BaseActivity() {&#10;&#10;    private var record: SobrietyRecord? = null&#10;    private val TAG = &quot;RecordSummaryActivity&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        Log.d(TAG, &quot;onCreate: 기록화면 시작&quot;)&#10;&#10;        // 이전 화면에서 전달받은 기록 ID 가져오기&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1L)&#10;        Log.d(TAG, &quot;onCreate: recordId=$recordId&quot;)&#10;&#10;        if (recordId == -1L) {&#10;            // ID가 없으면 메인 화면으로 이동&#10;            Toast.makeText(this, &quot;기록 정보를 찾을 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Record ID not found in intent&quot;)&#10;            finish()&#10;            return&#10;        }&#10;&#10;        // 해당 ID의 기록 데이터 불러오기&#10;        record = loadRecord(recordId)&#10;&#10;        if (record == null) {&#10;            Toast.makeText(this, &quot;해당 기록을 불러올 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Failed to load record with id: $recordId&quot;)&#10;        } else {&#10;            Log.d(TAG, &quot;Record loaded: ${record?.startDate} to ${record?.endDate}, completed=${record?.isCompleted}&quot;)&#10;        }&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        Log.d(TAG, &quot;setupContentView: 시작&quot;)&#10;        &#10;        try {&#10;            // BaseActivity에서 상속받은 contentFrame에 레이아웃 추가&#10;            val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;            if (contentFrame == null) {&#10;                Log.e(TAG, &quot;contentFrame not found&quot;)&#10;                return&#10;            }&#10;&#10;            val view = LayoutInflater.from(this).inflate(R.layout.activity_record_summary, contentFrame, true)&#10;            Log.d(TAG, &quot;Layout inflated successfully&quot;)&#10;&#10;            // UI 요소 초기화&#10;            val tvRecordScreenTitle = view.findViewById&lt;TextView&gt;(R.id.tvRecordScreenTitle)&#10;            val tvSummaryTitle = view.findViewById&lt;TextView&gt;(R.id.tvSummaryTitle)&#10;            val tvPeriod = view.findViewById&lt;TextView&gt;(R.id.tvPeriod)&#10;            val btnNewChallenge = view.findViewById&lt;Button&gt;(R.id.btnNewChallenge)&#10;&#10;            if (tvRecordScreenTitle == null || tvSummaryTitle == null || tvPeriod == null || btnNewChallenge == null) {&#10;                Log.e(TAG, &quot;One or more UI elements not found in layout&quot;)&#10;                return&#10;            }&#10;&#10;            // 기본 타이틀은 항상 표시&#10;            tvRecordScreenTitle.text = &quot;기록화면&quot;&#10;            &#10;            // 레코드가 있는 경우에만 데이터 표시&#10;            if (record != null) {&#10;                // 제목 설정&#10;                if (record!!.isCompleted) {&#10;                    tvSummaryTitle.text = &quot;목표 달성을 축하합니다!&quot;&#10;                } else {&#10;                    tvSummaryTitle.text = &quot;금주 기록 요약&quot;&#10;                }&#10;&#10;                // 날짜 포맷 설정&#10;                val dateFormat = SimpleDateFormat(&quot;yyyy년 MM월 dd일 HH:mm&quot;, Locale.getDefault())&#10;                val startDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.startDate) ?: Date())&#10;                val endDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.endDate) ?: Date())&#10;                &#10;                // 기간 표시&#10;                tvPeriod.text = &quot;시작: $startDate\n종료: $endDate&quot;&#10;            } else {&#10;                // 레코드가 없는 경우 기본 텍스트 설정&#10;                tvSummaryTitle.text = &quot;금주 기록&quot;&#10;                tvPeriod.text = &quot;기록 정보 없음&quot;&#10;            }&#10;&#10;            // 새로운 도전 버튼 클릭 리스너 설정&#10;            btnNewChallenge.setOnClickListener {&#10;                // MainActivity로 이동&#10;                val intent = Intent(this, MainActivity::class.java)&#10;                intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP  // 스택의 MainActivity 위의 모든 액티비티 제거&#10;                startActivity(intent)&#10;                finish()&#10;            }&#10;            &#10;            Log.d(TAG, &quot;setupContentView: 완료&quot;)&#10;            &#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error setting up content view: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * ID로 기록 불러오기&#10;     */&#10;    private fun loadRecord(recordId: Long): SobrietyRecord? {&#10;        try {&#10;            val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;            val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;            val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;            &#10;            return records.find { it.id == recordId }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error loading record: ${e.message}&quot;, e)&#10;            return null&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer.utils&#10;&#10;object Constants {&#10;    // 테스트 모드 설정 (true: 분 단위, false: 일 단위)&#10;    const val TEST_MODE = true&#10;&#10;    // 프로그레스바 초 단위 테스트 모드&#10;    const val PROGRESS_TEST_MODE = true&#10;&#10;    // 시간 변환 상수&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#10;&#10;    // 사용할 시간 단위&#10;    val TIME_UNIT_MILLIS = if (TEST_MODE) MINUTE_IN_MILLIS else DAY_IN_MILLIS&#10;&#10;    // 프로그레스바용 시간 단위 (초 단위 테스트를 위함)&#10;    val PROGRESS_TIME_UNIT_MILLIS = if (PROGRESS_TEST_MODE) SECOND_IN_MILLIS else TIME_UNIT_MILLIS&#10;&#10;    // 단위 텍스트&#10;    val TIME_UNIT_TEXT = if (TEST_MODE) &quot;분&quot; else &quot;일&quot;&#10;    val PROGRESS_TIME_UNIT_TEXT = if (PROGRESS_TEST_MODE) &quot;초&quot; else TIME_UNIT_TEXT&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#10;&#10;object Constants {&#10;    // 테스트 모드 설정 (true: 초 단위, false: 일 단위)&#10;    const val TEST_MODE = true&#10;    &#10;    // 초 단위 테스트 모드 (1초 = 1일 개념)&#10;    const val SECOND_TEST_MODE = true&#10;    &#10;    // 프로그레스바 초 단위 테스트 모드&#10;    const val PROGRESS_TEST_MODE = true&#10;&#10;    // 시간 변환 상수&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#10;&#10;    // 사용할 시간 단위&#10;    val TIME_UNIT_MILLIS = when {&#10;        SECOND_TEST_MODE -&gt; SECOND_IN_MILLIS  // 초 단위 테스트 (1초 = 1일)&#10;        TEST_MODE -&gt; MINUTE_IN_MILLIS         // 분 단위 테스트 (1분 = 1일)&#10;        else -&gt; DAY_IN_MILLIS                 // 실제 일 단위 (1일 = 24시간)&#10;    }&#10;&#10;    // 프로그레스바용 시간 단위&#10;    val PROGRESS_TIME_UNIT_MILLIS = if (PROGRESS_TEST_MODE) SECOND_IN_MILLIS else TIME_UNIT_MILLIS&#10;&#10;    // 단위 텍스트&#10;    val TIME_UNIT_TEXT = when {&#10;        SECOND_TEST_MODE -&gt; &quot;초&quot;  // 초 단위 테스트 시 표시 텍스트&#10;        TEST_MODE -&gt; &quot;분&quot;        // 분 단위 테스트 시 표시 텍스트&#10;        else -&gt; &quot;일&quot;            // 실제 운영 시 표시 텍스트&#10;    }&#10;    &#10;    val PROGRESS_TIME_UNIT_TEXT = if (PROGRESS_TEST_MODE) &quot;초&quot; else TIME_UNIT_TEXT&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/SobrietyRecord.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/SobrietyRecord.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#10;&#10;import org.json.JSONArray&#10;import org.json.JSONObject&#10;&#10;/**&#10; * 금주 기록을 저장하는 데이터 클래스&#10; *&#10; * @property id 고유 ID (저장 시간 기반)&#10; * @property startDate 금주 시작 날짜 (문자열 형식: &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10; * @property endDate 금주 종료 날짜 (문자열 형식: &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10; * @property duration 목표 기간 (일 또는 분 단위)&#10; * @property achievedDays 실제 달성한 기간 (일 또는 분 단위, 완료 시 duration과 동일)&#10; * @property achievedLevel 달성한 레벨&#10; * @property levelTitle 달성한 레벨 타이틀&#10; * @property isCompleted 목표를 완료했는지 여부 (true: 완료, false: 중도 포기)&#10; */&#10;data class SobrietyRecord(&#10;    val id: Long,&#10;    val startDate: String,&#10;    val endDate: String,&#10;    val duration: Int,&#10;    val achievedDays: Int = duration, // 완료된 경우 기본값은 전체 기간&#10;    val achievedLevel: Int,&#10;    val levelTitle: String,&#10;    val isCompleted: Boolean&#10;) {&#10;    /**&#10;     * 기록을 JSONObject로 변환&#10;     */&#10;    fun toJson(): JSONObject {&#10;        val json = JSONObject()&#10;        json.put(&quot;id&quot;, id)&#10;        json.put(&quot;startDate&quot;, startDate)&#10;        json.put(&quot;endDate&quot;, endDate)&#10;        json.put(&quot;duration&quot;, duration)&#10;        json.put(&quot;achievedDays&quot;, achievedDays)&#10;        json.put(&quot;achievedLevel&quot;, achievedLevel)&#10;        json.put(&quot;levelTitle&quot;, levelTitle)&#10;        json.put(&quot;isCompleted&quot;, isCompleted)&#10;        return json&#10;    }&#10;&#10;    companion object {&#10;        /**&#10;         * JSONObject에서 기록 객체 생성&#10;         */&#10;        fun fromJson(json: JSONObject): SobrietyRecord {&#10;            return SobrietyRecord(&#10;                id = json.getLong(&quot;id&quot;),&#10;                startDate = json.getString(&quot;startDate&quot;),&#10;                endDate = json.getString(&quot;endDate&quot;),&#10;                duration = json.getInt(&quot;duration&quot;),&#10;                achievedDays = json.getInt(&quot;achievedDays&quot;),&#10;                achievedLevel = json.getInt(&quot;achievedLevel&quot;),&#10;                levelTitle = json.getString(&quot;levelTitle&quot;),&#10;                isCompleted = json.getBoolean(&quot;isCompleted&quot;)&#10;            )&#10;        }&#10;&#10;        /**&#10;         * 기록 목록을 JSON 문자열로 변환&#10;         */&#10;        fun toJsonArray(records: List&lt;SobrietyRecord&gt;): String {&#10;            val jsonArray = JSONArray()&#10;            records.forEach { record -&gt;&#10;                jsonArray.put(record.toJson())&#10;            }&#10;            return jsonArray.toString()&#10;        }&#10;&#10;        /**&#10;         * JSON 문자열에서 기록 목록 생성&#10;         */&#10;        fun fromJsonArray(jsonString: String): List&lt;SobrietyRecord&gt; {&#10;            val records = mutableListOf&lt;SobrietyRecord&gt;()&#10;            try {&#10;                val jsonArray = JSONArray(jsonString)&#10;                for (i in 0 until jsonArray.length()) {&#10;                    val jsonObject = jsonArray.getJSONObject(i)&#10;                    records.add(fromJson(jsonObject))&#10;                }&#10;            } catch (e: Exception) {&#10;                // JSON 파싱 오류 시 빈 목록 반환&#10;                e.printStackTrace()&#10;            }&#10;            return records&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_calendar.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_calendar.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF000000&quot;&#10;        android:pathData=&quot;M19,19H5V8H19M16,1V3H8V1H6V3H5C3.89,3 3,3.89 3,5V19A2,2 0 0,0 5,21H19A2,2 0 0,0 21,19V5C21,3.89 20.1,3 19,3H18V1M17,12H12V17H17V12Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_flag.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_flag.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF000000&quot;&#10;        android:pathData=&quot;M14.27,6C13.72,6.95 12.91,7.73 11.97,8.29L14.27,10.59L19.76,5.11L18.34,3.69L14.27,6M18,13V10H16V13H13V15H16V18H18V15H21V13H18M8,4L7,5L10,8L7,11L8,12L11,9L14,12L15,11L12,8L15,5L14,4L11,7L8,4Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_message.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_message.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF000000&quot;&#10;        android:pathData=&quot;M20,2H4A2,2 0 0,0 2,4V22L6,18H20A2,2 0 0,0 22,16V4A2,2 0 0,0 20,2M6,9H18V11H6M14,14H6V12H14M18,8H6V6H18&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_notification.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_notification.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF000000&quot;&#10;        android:pathData=&quot;M21,19V20H3V19L5,17V11C5,7.9 7.03,5.17 10,4.29C10,4.19 10,4.1 10,4A2,2 0 0,1 12,2A2,2 0 0,1 14,4C14,4.1 14,4.19 14,4.29C16.97,5.17 19,7.9 19,11V17L21,19M14,21A2,2 0 0,1 12,23A2,2 0 0,1 10,21&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_profile.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M12,2C6.48,2 2,6.48 2,12s4.48,10 10,10 10,-4.48 10,-10S17.52,2 12,2zM12,5c1.66,0 3,1.34 3,3s-1.34,3 -3,3 -3,-1.34 -3,-3 1.34,-3 3,-3zM12,19.2c-2.5,0 -4.71,-1.28 -6,-3.22 0.03,-1.99 4,-3.08 6,-3.08 1.99,0 5.97,1.09 6,3.08 -1.29,1.94 -3.5,3.22 -6,3.22z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_settings.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_settings.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF000000&quot;&#10;        android:pathData=&quot;M12,15.5A3.5,3.5 0 0,1 8.5,12A3.5,3.5 0 0,1 12,8.5A3.5,3.5 0 0,1 15.5,12A3.5,3.5 0 0,1 12,15.5M19.43,12.97C19.47,12.65 19.5,12.33 19.5,12C19.5,11.67 19.47,11.34 19.43,11L21.54,9.37C21.73,9.22 21.78,8.95 21.66,8.73L19.66,5.27C19.54,5.05 19.27,4.96 19.05,5.05L16.56,6.05C16.04,5.66 15.5,5.32 14.87,5.07L14.5,2.42C14.46,2.18 14.25,2 14,2H10C9.75,2 9.54,2.18 9.5,2.42L9.13,5.07C8.5,5.32 7.96,5.66 7.44,6.05L4.95,5.05C4.73,4.96 4.46,5.05 4.34,5.27L2.34,8.73C2.21,8.95 2.27,9.22 2.46,9.37L4.57,11C4.53,11.34 4.5,11.67 4.5,12C4.5,12.33 4.53,12.65 4.57,12.97L2.46,14.63C2.27,14.78 2.21,15.05 2.34,15.27L4.34,18.73C4.46,18.95 4.73,19.03 4.95,18.95L7.44,17.94C7.96,18.34 8.5,18.68 9.13,18.93L9.5,21.58C9.54,21.82 9.75,22 10,22H14C14.25,22 14.46,21.82 14.5,21.58L14.87,18.93C15.5,18.67 16.04,18.34 16.56,17.94L19.05,18.95C19.27,19.03 19.54,18.95 19.66,18.73L21.66,15.27C21.78,15.05 21.73,14.78 21.54,14.63L19.43,12.97Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_trophy.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_trophy.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24&quot;&#10;    android:viewportHeight=&quot;24&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FF000000&quot;&#10;        android:pathData=&quot;M20.2,2H19.5H18C17.1,2 16,3 16,4H8C8,3 6.9,2 6,2H4.5H3.8H2V11C2,12 3,13 4,13H6.2C6.6,15 7.9,16.7 11,17V19.1C8.8,19.3 8,20.4 8,21.7V22H16V21.7C16,20.4 15.2,19.3 13,19.1V17C16.1,16.7 17.4,15 17.8,13H20C21,13 22,12 22,11V2H20.2M4,11V4H6V6V11C5.1,11 4.3,11 4,11M20,11C19.7,11 18.9,11 18,11V6V4H20V11Z&quot;/&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_record_summary.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_record_summary.xml" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvRecordScreenTitle&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;24dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;기록화면&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;28sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSummaryTitle&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;목표 달성을 축하합니다!&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;androidx.cardview.widget.CardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;금주 기간&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvPeriod&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:text=&quot;시작: 2023년 07월 01일\n종료: 2023년 07월 30일&quot;&#10;                    android:textSize=&quot;16sp&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnNewChallenge&quot;&#10;            style=&quot;@style/ButtonPrimary&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;32dp&quot;&#10;            android:text=&quot;새로운 도전 시작하기&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/layout_base.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/layout_base.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.drawerlayout.widget.DrawerLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/drawerLayout&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background&quot;&gt;&#10;&#10;    &lt;!-- 메인 컨텐츠 컨테이너 --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- 상단 툴바 --&gt;&#10;        &lt;androidx.appcompat.widget.Toolbar&#10;            android:id=&quot;@+id/toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:minHeight=&quot;?attr/actionBarSize&quot;&#10;            android:paddingTop=&quot;24dp&quot;&#10;            android:background=&quot;@color/background&quot;&#10;            android:elevation=&quot;0dp&quot;&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btnMenu&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:src=&quot;@drawable/ic_menu&quot;&#10;                android:contentDescription=&quot;메뉴 열기&quot;/&gt;&#10;&#10;        &lt;/androidx.appcompat.widget.Toolbar&gt;&#10;&#10;        &lt;!-- 각 화면의 컨텐츠가 들어갈 곳 --&gt;&#10;        &lt;FrameLayout&#10;            android:id=&quot;@+id/contentFrame&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- 네비게이션 드로어 --&gt;&#10;    &lt;com.google.android.material.navigation.NavigationView&#10;        android:id=&quot;@+id/navigationView&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        android:background=&quot;@color/background&quot;&#10;        app:menu=&quot;@menu/drawer_menu&quot;/&gt;&#10;&#10;&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;androidx.drawerlayout.widget.DrawerLayout&#13;&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    android:id=&quot;@+id/drawerLayout&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    android:background=&quot;@color/background&quot;&gt;&#13;&#10;&#13;&#10;    &lt;!-- 메인 컨텐츠 컨테이너 --&gt;&#13;&#10;    &lt;LinearLayout&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;match_parent&quot;&#13;&#10;        android:orientation=&quot;vertical&quot;&gt;&#13;&#10;&#13;&#10;        &lt;!-- 상단 툴바 --&gt;&#13;&#10;        &lt;androidx.appcompat.widget.Toolbar&#13;&#10;            android:id=&quot;@+id/toolbar&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:minHeight=&quot;?attr/actionBarSize&quot;&#13;&#10;            android:paddingTop=&quot;24dp&quot;&#13;&#10;            android:background=&quot;@color/background&quot;&#13;&#10;            android:elevation=&quot;0dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;ImageButton&#13;&#10;                android:id=&quot;@+id/btnMenu&quot;&#13;&#10;                android:layout_width=&quot;48dp&quot;&#13;&#10;                android:layout_height=&quot;48dp&quot;&#13;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#13;&#10;                android:src=&quot;@drawable/ic_menu&quot;&#13;&#10;                android:contentDescription=&quot;메뉴 열기&quot;/&gt;&#13;&#10;&#13;&#10;        &lt;/androidx.appcompat.widget.Toolbar&gt;&#13;&#10;&#13;&#10;        &lt;!-- 각 화면의 컨텐츠가 들어갈 곳 --&gt;&#13;&#10;        &lt;FrameLayout&#13;&#10;            android:id=&quot;@+id/contentFrame&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;match_parent&quot; /&gt;&#13;&#10;    &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;    &lt;!-- 네비게이션 드로어 --&gt;&#13;&#10;    &lt;com.google.android.material.navigation.NavigationView&#13;&#10;        android:id=&quot;@+id/navigationView&quot;&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;match_parent&quot;&#13;&#10;        android:layout_gravity=&quot;start&quot;&#13;&#10;        android:background=&quot;@color/background&quot;&#13;&#10;        app:headerLayout=&quot;@layout/nav_header&quot;&#13;&#10;        app:menu=&quot;@menu/drawer_menu&quot;&#13;&#10;        app:itemIconTint=&quot;@color/primary&quot;&#13;&#10;        app:itemTextColor=&quot;@android:color/black&quot;/&gt;&#13;&#10;&#13;&#10;&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/nav_header.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/nav_header.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:background=&quot;@color/primary&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;16dp&quot;&#10;    android:theme=&quot;@style/ThemeOverlay.AppCompat.Dark&quot;&gt;&#10;&#10;    &lt;!-- 프로필 아이콘 --&gt;&#10;    &lt;ImageView&#10;        android:id=&quot;@+id/ivProfileIcon&quot;&#10;        android:layout_width=&quot;80dp&quot;&#10;        android:layout_height=&quot;80dp&quot;&#10;        android:layout_marginTop=&quot;24dp&quot;&#10;        android:contentDescription=&quot;프로필 아이콘&quot;&#10;        android:src=&quot;@drawable/ic_profile&quot; /&gt;&#10;&#10;    &lt;!-- 사용자 이름/별명 --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvUserNickname&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;&#10;        android:text=&quot;알중이&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.AppCompat.Body1&quot;&#10;        android:textSize=&quot;18sp&quot;&#10;        android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;    &lt;!-- 레벨 및 금주 일수 --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvUserLevelDays&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_marginTop=&quot;4dp&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        android:text=&quot;Level 1 · 0일 금주 중&quot;&#10;        android:textAppearance=&quot;@style/TextAppearance.AppCompat.Body1&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/drawer_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/drawer_menu.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_start&quot;&#10;        android:title=&quot;금주 시작&quot;/&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_status&quot;&#10;        android:title=&quot;활동 보기&quot;/&gt;&#10;&lt;/menu&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;!-- 메뉴 섹션 --&gt;&#10;    &lt;group android:id=&quot;@+id/group_main_menu&quot;&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_start&quot;&#10;            android:icon=&quot;@drawable/ic_flag&quot;&#10;            android:title=&quot;금주 시작&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_records&quot;&#10;            android:icon=&quot;@drawable/ic_calendar&quot;&#10;            android:title=&quot;활동 보기&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_challenge&quot;&#10;            android:icon=&quot;@drawable/ic_trophy&quot;&#10;            android:title=&quot;챌린지&quot;&#10;            android:enabled=&quot;false&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_messages&quot;&#10;            android:icon=&quot;@drawable/ic_message&quot;&#10;            android:title=&quot;응원 메시지&quot;&#10;            android:enabled=&quot;false&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_notifications&quot;&#10;            android:icon=&quot;@drawable/ic_notification&quot;&#10;            android:title=&quot;알림함&quot;&#10;            android:enabled=&quot;false&quot; /&gt;&#10;    &lt;/group&gt;&#10;&#10;    &lt;!-- 설정 섹션 --&gt;&#10;    &lt;group android:id=&quot;@+id/group_settings&quot;&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_settings&quot;&#10;            android:icon=&quot;@drawable/ic_settings&quot;&#10;            android:title=&quot;설정&quot; /&gt;&#10;    &lt;/group&gt;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>