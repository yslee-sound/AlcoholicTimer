<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : ComponentActivity() {&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    @Composable&#10;    protected fun BaseScreen(content: @Composable () -&gt; Unit) {&#10;        val drawerState = rememberDrawerState(DrawerValue.Closed)&#10;        val scope = rememberCoroutineScope()&#10;        val context = LocalContext.current&#10;&#10;        ModalNavigationDrawer(&#10;            drawerState = drawerState,&#10;            drawerContent = {&#10;                ModalDrawerSheet {&#10;                    DrawerMenu { menuItem -&gt;&#10;                        scope.launch { drawerState.close() }&#10;                        handleMenuSelection(menuItem)&#10;                    }&#10;                }&#10;            }&#10;        ) {&#10;            Scaffold(&#10;                topBar = {&#10;                    TopAppBar(&#10;                        title = { Text(getScreenTitle()) },&#10;                        navigationIcon = {&#10;                            IconButton(&#10;                                onClick = {&#10;                                    scope.launch {&#10;                                        drawerState.open()&#10;                                    }&#10;                                }&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Menu,&#10;                                    contentDescription = &quot;메뉴&quot;&#10;                                )&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            ) { paddingValues -&gt;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(paddingValues)&#10;                ) {&#10;                    content()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Composable&#10;    private fun DrawerMenu(onItemSelected: (String) -&gt; Unit) {&#10;        val menuItems = listOf(&#10;            &quot;금주&quot; to Icons.Default.Home,&#10;            &quot;활동 보기&quot; to Icons.Default.List,&#10;            &quot;기록 보기&quot; to Icons.Default.Info,&#10;            &quot;레벨&quot; to Icons.Default.Star,&#10;            &quot;설정&quot; to Icons.Default.Settings&#10;        )&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;금주 타이머&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            Divider(modifier = Modifier.padding(vertical = 8.dp))&#10;&#10;            menuItems.forEach { (title, icon) -&gt;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable { onItemSelected(title) }&#10;                        .padding(vertical = 12.dp, horizontal = 16.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = icon,&#10;                        contentDescription = title,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(16.dp))&#10;                    Text(&#10;                        text = title,&#10;                        fontSize = 16.sp&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun handleMenuSelection(menuItem: String) {&#10;        when (menuItem) {&#10;            &quot;금주&quot; -&gt; {&#10;                if (this !is StatusActivity) {&#10;                    navigateToActivity(StatusActivity::class.java)&#10;                }&#10;            }&#10;            &quot;활동 보기&quot; -&gt; {&#10;                if (this !is StartActivity) {&#10;                    navigateToActivity(StartActivity::class.java)&#10;                }&#10;            }&#10;            &quot;기록 보기&quot; -&gt; {&#10;                if (this !is RecordsActivity) {&#10;                    navigateToActivity(RecordsActivity::class.java)&#10;                }&#10;            }&#10;            &quot;레벨&quot; -&gt; {&#10;                if (this !is LevelActivity) {&#10;                    navigateToActivity(LevelActivity::class.java)&#10;                }&#10;            }&#10;            &quot;설정&quot; -&gt; {&#10;                if (this !is SettingsActivity) {&#10;                    navigateToActivity(SettingsActivity::class.java)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 효과 없이 액티비티 전환&#10;     */&#10;    private fun navigateToActivity(activityClass: Class&lt;*&gt;) {&#10;        val intent = Intent(this, activityClass)&#10;        startActivity(intent)&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현해야 할 화면 제목&#10;     */&#10;    protected abstract fun getScreenTitle(): String&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewDrawerMenu() {&#10;    BaseActivity().DrawerMenu(onItemSelected = {})&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import kotlinx.coroutines.launch&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : ComponentActivity() {&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    @Composable&#10;    protected fun BaseScreen(content: @Composable () -&gt; Unit) {&#10;        val drawerState = rememberDrawerState(DrawerValue.Closed)&#10;        val scope = rememberCoroutineScope()&#10;        val context = LocalContext.current&#10;&#10;        ModalNavigationDrawer(&#10;            drawerState = drawerState,&#10;            drawerContent = {&#10;                ModalDrawerSheet {&#10;                    DrawerMenu { menuItem -&gt;&#10;                        scope.launch { drawerState.close() }&#10;                        handleMenuSelection(menuItem)&#10;                    }&#10;                }&#10;            }&#10;        ) {&#10;            Scaffold(&#10;                topBar = {&#10;                    TopAppBar(&#10;                        title = { Text(getScreenTitle()) },&#10;                        navigationIcon = {&#10;                            IconButton(&#10;                                onClick = {&#10;                                    scope.launch {&#10;                                        drawerState.open()&#10;                                    }&#10;                                }&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Menu,&#10;                                    contentDescription = &quot;메뉴&quot;&#10;                                )&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            ) { paddingValues -&gt;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(paddingValues)&#10;                ) {&#10;                    content()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Composable&#10;    fun DrawerMenu(onItemSelected: (String) -&gt; Unit) {&#10;        val menuItems = listOf(&#10;            &quot;금주&quot; to Icons.Default.Home,&#10;            &quot;활동 보기&quot; to Icons.Default.List,&#10;            &quot;기록 보기&quot; to Icons.Default.Info,&#10;            &quot;레벨&quot; to Icons.Default.Star,&#10;            &quot;설정&quot; to Icons.Default.Settings&#10;        )&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;금주 타이머&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            Divider(modifier = Modifier.padding(vertical = 8.dp))&#10;&#10;            menuItems.forEach { (title, icon) -&gt;&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clickable { onItemSelected(title) }&#10;                        .padding(vertical = 12.dp, horizontal = 16.dp),&#10;                    verticalAlignment = Alignment.CenterVertically&#10;                ) {&#10;                    Icon(&#10;                        imageVector = icon,&#10;                        contentDescription = title,&#10;                        modifier = Modifier.size(24.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(16.dp))&#10;                    Text(&#10;                        text = title,&#10;                        fontSize = 16.sp&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun handleMenuSelection(menuItem: String) {&#10;        when (menuItem) {&#10;            &quot;금주&quot; -&gt; {&#10;                if (this !is StatusActivity) {&#10;                    navigateToActivity(StatusActivity::class.java)&#10;                }&#10;            }&#10;            &quot;활동 보기&quot; -&gt; {&#10;                if (this !is StartActivity) {&#10;                    navigateToActivity(StartActivity::class.java)&#10;                }&#10;            }&#10;            &quot;기록 보기&quot; -&gt; {&#10;                if (this !is RecordsActivity) {&#10;                    navigateToActivity(RecordsActivity::class.java)&#10;                }&#10;            }&#10;            &quot;레벨&quot; -&gt; {&#10;                if (this !is LevelActivity) {&#10;                    navigateToActivity(LevelActivity::class.java)&#10;                }&#10;            }&#10;            &quot;설정&quot; -&gt; {&#10;                if (this !is SettingsActivity) {&#10;                    navigateToActivity(SettingsActivity::class.java)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 효과 없이 액티비티 전환&#10;     */&#10;    private fun navigateToActivity(activityClass: Class&lt;*&gt;) {&#10;        val intent = Intent(this, activityClass)&#10;        startActivity(intent)&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현해야 할 화면 제목&#10;     */&#10;    protected abstract fun getScreenTitle(): String&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewDrawerMenu() {&#10;    val menuItems = listOf(&#10;        &quot;금주&quot; to Icons.Default.Home,&#10;        &quot;활동 보기&quot; to Icons.Default.List,&#10;        &quot;기록 보기&quot; to Icons.Default.Info,&#10;        &quot;레벨&quot; to Icons.Default.Star,&#10;        &quot;설정&quot; to Icons.Default.Settings&#10;    )&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        Text(&#10;            text = &quot;금주 타이머&quot;,&#10;            fontSize = 24.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;&#10;        Divider(modifier = Modifier.padding(vertical = 8.dp))&#10;&#10;        menuItems.forEach { (title, icon) -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { }&#10;                    .padding(vertical = 12.dp, horizontal = 16.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/DetailActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/DetailActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class DetailActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1)&#10;&#10;        setContent {&#10;            BaseScreen {&#10;                DetailScreen(recordId)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;기록 상세&quot;&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    @Composable&#10;    private fun DetailScreen(recordId: Long) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;기록 상세보기&quot;,&#10;                fontSize = 24.sp,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 기록 ID 표시&#10;            Text(&#10;                text = &quot;기록 ID: $recordId&quot;,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            // 추가 기록 정보 표시&#10;            Text(&#10;                text = &quot;완료된 금주 기록의 상세정보가 여기에 표시됩니다.&quot;,&#10;                fontSize = 16.sp&#10;            )&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class DetailActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1)&#10;&#10;        setContent {&#10;            BaseScreen {&#10;                DetailScreen(recordId)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;기록 상세&quot;&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    @Composable&#10;    private fun DetailScreen(recordId: Long) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;기록 상세보기&quot;,&#10;                fontSize = 24.sp,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 기록 ID 표시&#10;            Text(&#10;                text = &quot;기록 ID: $recordId&quot;,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            // 추가 기록 정보 표시&#10;            Text(&#10;                text = &quot;완료된 금주 기록의 상세정보가 여기에 표시됩니다.&quot;,&#10;                fontSize = 16.sp&#10;            )&#10;        }&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewDetailScreen() {&#10;        BaseScreen {&#10;            DetailScreen(recordId = 1L)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/DrinkLevel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/DrinkLevel.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import androidx.annotation.ColorRes&#10;&#10;enum class DrinkLevel(&#10;    val levelName: String,&#10;    val startDays: Int,&#10;    val endDays: Int,&#10;    @ColorRes val colorRes: Int,&#10;    val description: String&#10;) {&#10;    RESOLUTION_7_DAYS(&#10;        &quot;작심 7일&quot;,&#10;        0,&#10;        6,&#10;        android.R.color.darker_gray,&#10;        &quot;첫 걸음을 시작했습니다&quot;&#10;    ),&#10;    WILL_2_WEEKS(&#10;        &quot;의지의 2주&quot;,&#10;        7,&#10;        13,&#10;        android.R.color.holo_orange_light,&#10;        &quot;의지가 단단해지고 있습니다&quot;&#10;    ),&#10;    MONTH_MIRACLE(&#10;        &quot;한달의 기적&quot;,&#10;        14,&#10;        29,&#10;        android.R.color.holo_orange_dark,&#10;        &quot;한 달의 기적을 만들어가고 있습니다&quot;&#10;    ),&#10;    HABIT_BIRTH(&#10;        &quot;습관의 탄생&quot;,&#10;        30,&#10;        59,&#10;        android.R.color.holo_green_light,&#10;        &quot;새로운 습관이 자리잡고 있습니다&quot;&#10;    ),&#10;    CONTINUING_CHALLENGE(&#10;        &quot;계속되는 도전&quot;,&#10;        60,&#10;        119,&#10;        android.R.color.holo_blue_light,&#10;        &quot;꾸준한 도전이 계속되고 있습니다&quot;&#10;    ),&#10;    ALMOST_1_YEAR(&#10;        &quot;거의 1년&quot;,&#10;        120,&#10;        239,&#10;        android.R.color.holo_purple,&#10;        &quot;1년에 가까워지고 있습니다&quot;&#10;    ),&#10;    ABSTAIN_MASTER(&#10;        &quot;금주 마스터&quot;,&#10;        240,&#10;        364,&#10;        android.R.color.black,&#10;        &quot;금주의 마스터가 되었습니다&quot;&#10;    ),&#10;    LEGEND_OF_RESTRAINT(&#10;        &quot;절제의 레전드&quot;,&#10;        365,&#10;        Int.MAX_VALUE,&#10;        android.R.color.holo_orange_light, // 골드 대신 사용&#10;        &quot;전설적인 절제력을 보여주고 있습니다&quot;&#10;    );&#10;&#10;    val levelDisplayName: String = levelName&#10;&#10;    fun getDayRange(): String {&#10;        return if (endDays == Int.MAX_VALUE) {&#10;            &quot;${startDays}일 이상&quot;&#10;        } else {&#10;            &quot;${startDays}~${endDays}일&quot;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import androidx.annotation.ColorRes&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.ui.unit.dp&#10;&#10;enum class DrinkLevel(&#10;    val levelName: String,&#10;    val startDays: Int,&#10;    val endDays: Int,&#10;    @ColorRes val colorRes: Int,&#10;    val description: String&#10;) {&#10;    RESOLUTION_7_DAYS(&#10;        &quot;작심 7일&quot;,&#10;        0,&#10;        6,&#10;        android.R.color.darker_gray,&#10;        &quot;첫 걸음을 시작했습니다&quot;&#10;    ),&#10;    WILL_2_WEEKS(&#10;        &quot;의지의 2주&quot;,&#10;        7,&#10;        13,&#10;        android.R.color.holo_orange_light,&#10;        &quot;의지가 단단해지고 있습니다&quot;&#10;    ),&#10;    MONTH_MIRACLE(&#10;        &quot;한달의 기적&quot;,&#10;        14,&#10;        29,&#10;        android.R.color.holo_orange_dark,&#10;        &quot;한 달의 기적을 만들어가고 있습니다&quot;&#10;    ),&#10;    HABIT_BIRTH(&#10;        &quot;습관의 탄생&quot;,&#10;        30,&#10;        59,&#10;        android.R.color.holo_green_light,&#10;        &quot;새로운 습관이 자리잡고 있습니다&quot;&#10;    ),&#10;    CONTINUING_CHALLENGE(&#10;        &quot;계속되는 도전&quot;,&#10;        60,&#10;        119,&#10;        android.R.color.holo_blue_light,&#10;        &quot;꾸준한 도전이 계속되고 있습니다&quot;&#10;    ),&#10;    ALMOST_1_YEAR(&#10;        &quot;거의 1년&quot;,&#10;        120,&#10;        239,&#10;        android.R.color.holo_purple,&#10;        &quot;1년에 가까워지고 있습니다&quot;&#10;    ),&#10;    ABSTAIN_MASTER(&#10;        &quot;금주 마스터&quot;,&#10;        240,&#10;        364,&#10;        android.R.color.black,&#10;        &quot;금주의 마스터가 되었습니다&quot;&#10;    ),&#10;    LEGEND_OF_RESTRAINT(&#10;        &quot;절제의 레전드&quot;,&#10;        365,&#10;        Int.MAX_VALUE,&#10;        android.R.color.holo_orange_light, // 골드 대신 사용&#10;        &quot;전설적인 절제력을 보여주고 있습니다&quot;&#10;    );&#10;&#10;    val levelDisplayName: String = levelName&#10;&#10;    fun getDayRange(): String {&#10;        return if (endDays == Int.MAX_VALUE) {&#10;            &quot;${startDays}일 이상&quot;&#10;        } else {&#10;            &quot;${startDays}~${endDays}일&quot;&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewDrinkLevel() {&#10;    MaterialTheme {&#10;        Column(modifier = Modifier.padding(16.dp)) {&#10;            DrinkLevel.values().forEach { level -&gt;&#10;                Text(text = &quot;${level.levelName}: ${level.description}&quot;)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/LevelActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/LevelActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.BasicText&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;class LevelActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                LevelScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 레벨&quot;&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    @Composable&#10;    private fun LevelScreen() {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;금주 레벨&quot;,&#10;                fontSize = 24.sp,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            // 레벨 관련 UI 구현&#10;            Text(&quot;레벨별 진행도가 여기에 표시됩니다.&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewLevelScreen() {&#10;    LevelScreen()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.text.BasicText&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;class LevelActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                LevelScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 레벨&quot;&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    @Composable&#10;    fun LevelScreen() {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;금주 레벨&quot;,&#10;                fontSize = 24.sp,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            // 레벨 관련 UI 구현&#10;            Text(&quot;레벨별 진행도가 여기에 표시됩니다.&quot;)&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewLevelScreen() {&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = &quot;금주 레벨&quot;,&#10;            fontSize = 24.sp,&#10;            modifier = Modifier.padding(bottom = 16.dp)&#10;        )&#10;        Text(&quot;레벨별 진행도가 여기에 표시됩니다.&quot;)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/MainActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;class MainActivity : BaseActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 금주 타이머가 진행 중인지 확인하고 적절한 화면으로 이동&#10;        checkCurrentStateAndNavigate()&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 타이머&quot;&#10;&#10;    @Composable&#10;    private fun MainScreen() {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Alcoholic Timer&quot;,&#10;                fontSize = 24.sp,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            Button(onClick = {&#10;                val intent = Intent(this@MainActivity, StartActivity::class.java)&#10;                startActivity(intent)&#10;            }) {&#10;                Text(&quot;시작하기&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun checkCurrentStateAndNavigate() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val isSobrietyStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        if (isSobrietyStarted) {&#10;            // 금주가 진행 중이면 StatusActivity로 이동&#10;            val intent = Intent(this, StatusActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP)&#10;            startActivity(intent)&#10;            overridePendingTransition(0, 0)&#10;        } else {&#10;            // 금주가 시작되지 않았으면 StartActivity로 이동&#10;            val intent = Intent(this, StartActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP)&#10;            startActivity(intent)&#10;            overridePendingTransition(0, 0)&#10;        }&#10;        // MainActivity는 백스택에서 제거&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;class MainActivity : BaseActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 금주 타이머가 진행 중인지 확인하고 적절한 화면으로 이동&#10;        checkCurrentStateAndNavigate()&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 타이머&quot;&#10;&#10;    @Composable&#10;    private fun MainScreen() {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Alcoholic Timer&quot;,&#10;                fontSize = 24.sp,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            Button(onClick = {&#10;                val intent = Intent(this@MainActivity, StartActivity::class.java)&#10;                startActivity(intent)&#10;            }) {&#10;                Text(&quot;시작하기&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun checkCurrentStateAndNavigate() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val isSobrietyStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        if (isSobrietyStarted) {&#10;            // 금주가 진행 중이면 StatusActivity로 이동&#10;            val intent = Intent(this, StatusActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP)&#10;            startActivity(intent)&#10;            overridePendingTransition(0, 0)&#10;        } else {&#10;            // 금주가 시작되지 않았으면 StartActivity로 이동&#10;            val intent = Intent(this, StartActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP)&#10;            startActivity(intent)&#10;            overridePendingTransition(0, 0)&#10;        }&#10;        // MainActivity는 백스택에서 제거&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewMainScreen() {&#10;        MainScreen()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/NoPasteEditText.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/NoPasteEditText.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.ClipboardManager&#10;import android.content.Context&#10;import android.util.AttributeSet&#10;import android.view.ActionMode&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import android.view.inputmethod.EditorInfo&#10;import android.view.inputmethod.InputConnection&#10;import android.widget.EditText&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;/**&#10; * 붙여넣기 기능이 비활성화된 커스텀 EditText&#10; */&#10;class NoPasteEditText : EditText {&#10;    constructor(context: Context) : super(context) {&#10;        init()&#10;    }&#10;&#10;    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs) {&#10;        init()&#10;    }&#10;&#10;    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {&#10;        init()&#10;    }&#10;&#10;    private fun init() {&#10;        // 길게 누르기 비활성화&#10;        isLongClickable = false&#10;&#10;        // 텍스트 선택 비활성화&#10;        setTextIsSelectable(false)&#10;&#10;        // 컨텍스트 메뉴 비활성화&#10;        customSelectionActionModeCallback = object : ActionMode.Callback {&#10;            override fun onCreateActionMode(mode: ActionMode?, menu: Menu?): Boolean = false&#10;            override fun onPrepareActionMode(mode: ActionMode?, menu: Menu?): Boolean = false&#10;            override fun onActionItemClicked(mode: ActionMode?, item: MenuItem?): Boolean = false&#10;            override fun onDestroyActionMode(mode: ActionMode?) {}&#10;        }&#10;    }&#10;&#10;    override fun onTextContextMenuItem(id: Int): Boolean {&#10;        // 모든 컨텍스트 메뉴 항목(붙여넣기, 복사 등) 차단&#10;        return false&#10;    }&#10;&#10;    override fun onCreateInputConnection(outAttrs: EditorInfo): InputConnection {&#10;        val connection = super.onCreateInputConnection(outAttrs)&#10;&#10;        // IME 옵션 설정&#10;        outAttrs.imeOptions = outAttrs.imeOptions or&#10;                EditorInfo.IME_FLAG_NO_EXTRACT_UI or&#10;                EditorInfo.IME_FLAG_NO_FULLSCREEN&#10;&#10;        return connection&#10;    }&#10;&#10;    // 붙여넣기 방지를 위해 모든 입력 시도를 추가로 검사&#10;    override fun onTextChanged(text: CharSequence?, start: Int, lengthBefore: Int, lengthAfter: Int) {&#10;        super.onTextChanged(text, start, lengthBefore, lengthAfter)&#10;&#10;        // 텍스트가 한 번에 여러 자리 추가되는 경우 (붙여넣기로 추정)&#10;        if (lengthAfter &gt; 1 &amp;&amp; lengthBefore == 0) {&#10;            val currentText = this.text.toString()&#10;            if (start == 0 &amp;&amp; currentText.length &gt; 1) {&#10;                // 마지막 숫자만 유지&#10;                setText(currentText.substring(currentText.length - 1))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Jetpack Compose 기반으로 UI를 완전히 전환한 경우, 이 파일은 더 이상 필요하지 않으므로 삭제해도 됩니다.&#10;// 만약 붙여넣기 방지 기능이 Compose에서 필요하다면, Compose용 커스텀 TextField를 별도로 구현해야 합니다.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java" />
              <option name="updatedContent" value="package com.example.alcoholictimer;&#10;&#10;import android.os.Bundle;&#10;import android.widget.TextView;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import java.util.Calendar;&#10;&#10;public class RecordSummaryActivity extends AppCompatActivity {&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_record_summary);&#10;&#10;        // ...existing code...&#10;&#10;        TextView tvRecordTitle = findViewById(R.id.tvRecordTitle);&#10;        // 예시: 현재 월을 기록 종료 시점의 월로 사용합니다.&#10;        int month = Calendar.getInstance().get(Calendar.MONTH) + 1;&#10;        tvRecordTitle.setText(String.format(&quot;%d월의 금주&quot;, month));&#10;&#10;        // ...existing code...&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordsActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.alcoholictimer.models.LevelHistoryItem&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import com.example.alcoholictimer.utils.RecentActivityManager&#10;&#10;class RecordsActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                RecordsScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 기록&quot;&#10;&#10;    @Composable&#10;    private fun RecordsScreen() {&#10;        val levelHistoryItems = listOf&lt;LevelHistoryItem&gt;() // Replace with actual data loading logic&#10;        val recentActivities = RecentActivityManager.getRecentActivities()&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;금주 기록&quot;,&#10;                fontSize = 24.sp,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            LazyColumn(modifier = Modifier.fillMaxWidth()) {&#10;                items(levelHistoryItems) { item -&gt;&#10;                    Text(text = item.description, fontSize = 16.sp)&#10;                }&#10;                items(recentActivities) { activity -&gt;&#10;                    Text(text = activity.title, fontSize = 16.sp)&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.alcoholictimer.models.LevelHistoryItem&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import com.example.alcoholictimer.utils.RecentActivityManager&#10;&#10;class RecordsActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                RecordsScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 기록&quot;&#10;&#10;    @Composable&#10;    private fun RecordsScreen() {&#10;        val levelHistoryItems = listOf&lt;LevelHistoryItem&gt;() // Replace with actual data loading logic&#10;        val recentActivities = RecentActivityManager.getRecentActivities()&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;금주 기록&quot;,&#10;                fontSize = 24.sp,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            LazyColumn(modifier = Modifier.fillMaxWidth()) {&#10;                items(levelHistoryItems) { item -&gt;&#10;                    Text(text = item.description, fontSize = 16.sp)&#10;                }&#10;                items(recentActivities) { activity -&gt;&#10;                    Text(text = activity.title, fontSize = 16.sp)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewRecordsScreen() {&#10;        BaseScreen {&#10;            RecordsScreen()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SettingsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SettingsActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;class SettingsActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                SettingsScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;설정&quot;&#10;&#10;    @Composable&#10;    private fun SettingsScreen() {&#10;        val context = LocalContext.current&#10;        var selectedMode by remember { mutableStateOf(Constants.TEST_MODE_REAL) }&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;설정&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            Text(&#10;                text = &quot;테스트 모드 선택&quot;,&#10;                fontSize = 18.sp,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_REAL,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_REAL }&#10;                )&#10;                Text(&quot;실제 모드&quot;)&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_MINUTE,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_MINUTE }&#10;                )&#10;                Text(&quot;분 모드&quot;)&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_SECOND,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_SECOND }&#10;                )&#10;                Text(&quot;초 모드&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Button(onClick = {&#10;                saveSettings(selectedMode)&#10;                Toast.makeText(context, &quot;설정이 저장되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;            }) {&#10;                Text(&quot;저장&quot;, fontSize = 18.sp)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveSettings(selectedMode: Int) {&#10;        val preferences = getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;        val editor = preferences.edit()&#10;        editor.putInt(Constants.PREF_KEY_TEST_MODE, selectedMode)&#10;        val success = editor.commit() // 동기 저장으로 변경하고 성공 여부 확인&#10;        Log.d(&quot;SettingsActivity&quot;, &quot;Settings saved. Mode: $selectedMode, Success: $success&quot;)&#10;&#10;        // Constants 클래스의 동적 설정 업데이트&#10;        Constants.updateTestMode(selectedMode)&#10;    }&#10;&#10;    @Composable&#10;    fun SettingsScreenPreview() {&#10;        BaseScreen {&#10;            SettingsScreen()&#10;        }&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewSettingsScreen() {&#10;        SettingsScreenPreview()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.tooling.preview.Preview&#10;&#10;class SettingsActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                SettingsScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;설정&quot;&#10;&#10;    @Composable&#10;    private fun SettingsScreen() {&#10;        val context = LocalContext.current&#10;        var selectedMode by remember { mutableStateOf(Constants.TEST_MODE_REAL) }&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;설정&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            Text(&#10;                text = &quot;테스트 모드 선택&quot;,&#10;                fontSize = 18.sp,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_REAL,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_REAL }&#10;                )&#10;                Text(&quot;실제 모드&quot;)&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_MINUTE,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_MINUTE }&#10;                )&#10;                Text(&quot;분 모드&quot;)&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_SECOND,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_SECOND }&#10;                )&#10;                Text(&quot;초 모드&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Button(onClick = {&#10;                saveSettings(selectedMode)&#10;                Toast.makeText(context, &quot;설정이 저장되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;            }) {&#10;                Text(&quot;저장&quot;, fontSize = 18.sp)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveSettings(selectedMode: Int) {&#10;        val preferences = getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;        val editor = preferences.edit()&#10;        editor.putInt(Constants.PREF_KEY_TEST_MODE, selectedMode)&#10;        val success = editor.commit() // 동기 저장으로 변경하고 성공 여부 확인&#10;        Log.d(&quot;SettingsActivity&quot;, &quot;Settings saved. Mode: $selectedMode, Success: $success&quot;)&#10;&#10;        // Constants 클래스의 동적 설정 업데이트&#10;        Constants.updateTestMode(selectedMode)&#10;    }&#10;&#10;    @Composable&#10;    fun SettingsScreenPreview() {&#10;        BaseScreen {&#10;            SettingsScreen()&#10;        }&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewSettingsScreen() {&#10;        SettingsScreenPreview()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java" />
              <option name="originalContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}&#10;" />
              <option name="updatedContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StartActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StartActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.text.font.FontWeight&#10;import com.example.alcoholictimer.utils.Constants&#10;&#10;class StartActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                StartScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;목표 설정&quot;&#10;&#10;    @Composable&#10;    private fun StartScreen() {&#10;        val context = LocalContext.current&#10;        var targetTime by remember { mutableStateOf(0) }&#10;        var inputText by remember { mutableStateOf(&quot;&quot;) }&#10;        var errorText by remember { mutableStateOf(&quot;&quot;) }&#10;        val timeUnitText = Constants.TIME_UNIT_TEXT&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;금주 목표 설정&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            Text(&#10;                text = &quot;목표 ${timeUnitText} 입력&quot;,&#10;                fontSize = 18.sp,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;            TextField(&#10;                value = inputText,&#10;                onValueChange = {&#10;                    inputText = it&#10;                    targetTime = it.toIntOrNull() ?: 0&#10;                },&#10;                label = { Text(&quot;목표 ${timeUnitText}&quot;) },&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            if (errorText.isNotEmpty()) {&#10;                Text(&#10;                    text = errorText,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    modifier = Modifier.padding(top = 4.dp)&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Button(onClick = {&#10;                if (targetTime &gt; 0) {&#10;                    val sharedPref = context.getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                    sharedPref.edit().apply {&#10;                        putInt(&quot;target_days&quot;, targetTime)&#10;                        putLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;                        putBoolean(&quot;timer_completed&quot;, false)&#10;                        apply()&#10;                    }&#10;                    // StatusActivity로 이동&#10;                    val intent = Intent(context, StatusActivity::class.java)&#10;                    context.startActivity(intent)&#10;                } else {&#10;                    errorText = &quot;목표 ${timeUnitText}를 올바르게 입력하세요.&quot;&#10;                }&#10;            }) {&#10;                Text(&quot;시작&quot;, fontSize = 18.sp)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        updateTimeModeDisplay()&#10;    }&#10;&#10;    private fun updateTimeModeDisplay() {&#10;        // SharedPreferences에서 현재 테스트 모드를 읽어옴&#10;        val sharedPref = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;        val currentTestMode = sharedPref.getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        // Constants의 현재 테스트 모드를 업데이트&#10;        Constants.updateTestMode(currentTestMode)&#10;&#10;        val timeUnitText = when (currentTestMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; &quot;금주 목표 초수&quot;&#10;            Constants.TEST_MODE_MINUTE -&gt; &quot;금주 목표 분수&quot;&#10;            else -&gt; &quot;금주 목표 일수&quot;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.foundation.text.KeyboardOptions&#10;import androidx.compose.ui.text.input.KeyboardType&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.text.font.FontWeight&#10;import com.example.alcoholictimer.utils.Constants&#10;import androidx.compose.ui.tooling.preview.Preview&#10;&#10;class StartActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                StartScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;목표 설정&quot;&#10;&#10;    @Composable&#10;    private fun StartScreen() {&#10;        val context = LocalContext.current&#10;        var targetTime by remember { mutableStateOf(0) }&#10;        var inputText by remember { mutableStateOf(&quot;&quot;) }&#10;        var errorText by remember { mutableStateOf(&quot;&quot;) }&#10;        val timeUnitText = Constants.TIME_UNIT_TEXT&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;금주 목표 설정&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            Text(&#10;                text = &quot;목표 ${timeUnitText} 입력&quot;,&#10;                fontSize = 18.sp,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;            TextField(&#10;                value = inputText,&#10;                onValueChange = {&#10;                    inputText = it&#10;                    targetTime = it.toIntOrNull() ?: 0&#10;                },&#10;                label = { Text(&quot;목표 ${timeUnitText}&quot;) },&#10;                keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),&#10;                modifier = Modifier.fillMaxWidth()&#10;            )&#10;            if (errorText.isNotEmpty()) {&#10;                Text(&#10;                    text = errorText,&#10;                    color = MaterialTheme.colorScheme.error,&#10;                    modifier = Modifier.padding(top = 4.dp)&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Button(onClick = {&#10;                if (targetTime &gt; 0) {&#10;                    val sharedPref = context.getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                    sharedPref.edit().apply {&#10;                        putInt(&quot;target_days&quot;, targetTime)&#10;                        putLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;                        putBoolean(&quot;timer_completed&quot;, false)&#10;                        apply()&#10;                    }&#10;                    // StatusActivity로 이동&#10;                    val intent = Intent(context, StatusActivity::class.java)&#10;                    context.startActivity(intent)&#10;                } else {&#10;                    errorText = &quot;목표 ${timeUnitText}를 올바르게 입력하세요.&quot;&#10;                }&#10;            }) {&#10;                Text(&quot;시작&quot;, fontSize = 18.sp)&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        updateTimeModeDisplay()&#10;    }&#10;&#10;    private fun updateTimeModeDisplay() {&#10;        // SharedPreferences에서 현재 테스트 모드를 읽어옴&#10;        val sharedPref = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;        val currentTestMode = sharedPref.getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        // Constants의 현재 테스트 모드를 업데이트&#10;        Constants.updateTestMode(currentTestMode)&#10;&#10;        val timeUnitText = when (currentTestMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; &quot;금주 목표 초수&quot;&#10;            Constants.TEST_MODE_MINUTE -&gt; &quot;금주 목표 분수&quot;&#10;            else -&gt; &quot;금주 목표 일수&quot;&#10;        }&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewStartScreen() {&#10;        BaseScreen {&#10;            StartScreen()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.model.RecentActivity&#10;&#10;class RecentActivityAdapter : RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;    private val activities = ArrayList&lt;RecentActivity&gt;()&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val ivActivityIcon: ImageView = itemView.findViewById(R.id.ivActivityIcon)&#10;        val tvEndDate: TextView = itemView.findViewById(R.id.tvEndDate)&#10;        val tvActivityTitle: TextView = itemView.findViewById(R.id.tvActivityTitle)&#10;        val tvDuration: TextView = itemView.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val tvSavedMoney: TextView = itemView.findViewById(R.id.tvSavedMoney)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        &#10;        holder.tvEndDate.text = activity.endDate&#10;        holder.tvActivityTitle.text = activity.title&#10;        holder.tvDuration.text = &quot;${activity.duration}일 ${activity.hours}시간&quot;&#10;        holder.tvStatus.text = if(activity.isSuccess) &quot;성공&quot; else &quot;실패&quot;&#10;        holder.tvSavedMoney.text = &quot;${activity.savedMoney}만원 절약&quot;&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;&#10;    fun updateActivities(newActivities: List&lt;RecentActivity&gt;) {&#10;        activities.clear()&#10;        activities.addAll(newActivities.take(5)) // 최대 5개까지만 표시&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>