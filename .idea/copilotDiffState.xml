<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/LevelActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/LevelActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.BasicText&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;class LevelActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                LevelScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 레벨&quot;&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    @Composable&#10;    fun LevelScreen(&#10;        currentDays: Int = 15, // 예시: 실제 데이터 연동 시 파라미터로 변경&#10;        onBack: (() -&gt; Unit)? = null&#10;    ) {&#10;        val levels = listOf(&#10;            LevelInfo(&quot;작심 7일&quot;, 0, 6, Color(0xFFBDBDBD)),&#10;            LevelInfo(&quot;의지의 2주&quot;, 7, 13, Color(0xFFFFEB3B)),&#10;            LevelInfo(&quot;한달의 기적&quot;, 14, 29, Color(0xFFFF9800)),&#10;            LevelInfo(&quot;습관의 탄생&quot;, 30, 59, Color(0xFF4CAF50)),&#10;            LevelInfo(&quot;계속되는 도전&quot;, 60, 119, Color(0xFF2196F3)),&#10;            LevelInfo(&quot;거의 1년&quot;, 120, 239, Color(0xFF9C27B0)),&#10;            LevelInfo(&quot;금주 마스터&quot;, 240, 364, Color(0xFF212121)),&#10;            LevelInfo(&quot;절제의 레전드&quot;, 365, Int.MAX_VALUE, Color(0xFFFFD700)),&#10;        )&#10;        val currentLevel = levels.firstOrNull { currentDays in it.start..it.end } ?: levels.last()&#10;&#10;        Column(&#10;            modifier = Modifier.fillMaxSize().background(Color.White),&#10;        ) {&#10;            // 상단바&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;뒤로가기&quot;,&#10;                    modifier = Modifier.size(28.dp).clickable { onBack?.invoke() }&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;금주 레벨&quot;,&#10;                    fontSize = 22.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    textAlign = TextAlign.Start&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            // 레벨 카드 리스트&#10;            Column(modifier = Modifier.verticalScroll(rememberScrollState())) {&#10;                levels.forEach { level -&gt;&#10;                    LevelCard(level, currentDays)&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    data class LevelInfo(val name: String, val start: Int, val end: Int, val color: Color)&#10;&#10;    @Composable&#10;    fun LevelCard(level: LevelInfo, currentDays: Int) {&#10;        val isCurrent = currentDays in level.start..level.end&#10;        val progress = when {&#10;            currentDays &lt; level.start -&gt; 0f&#10;            currentDays &gt; level.end -&gt; 1f&#10;            else -&gt; (currentDays - level.start + 1).toFloat() / (level.end - level.start + 1)&#10;        }&#10;        Card(&#10;            shape = RoundedCornerShape(16.dp),&#10;            colors = CardDefaults.cardColors(containerColor = level.color.copy(alpha = if (isCurrent) 1f else 0.3f)),&#10;            modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp)&#10;        ) {&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                Text(&#10;                    text = level.name,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = if (isCurrent) FontWeight.Bold else FontWeight.Normal,&#10;                    color = if (isCurrent) Color.Black else Color.DarkGray&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;${level.start}~${level.end}일&quot;,&#10;                    fontSize = 14.sp,&#10;                    color = Color.Gray&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                LinearProgressIndicator(&#10;                    progress = progress,&#10;                    modifier = Modifier.fillMaxWidth().height(8.dp),&#10;                    color = if (isCurrent) Color.Black else Color.Gray&#10;                )&#10;                if (isCurrent) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;현재 진행도: ${(progress * 100).toInt()}%&quot;,&#10;                        fontSize = 13.sp,&#10;                        color = Color.Black&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewLevelScreen() {&#10;    LevelScreen(currentDays = 15)&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.text.BasicText&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;class LevelActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                LevelScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 레벨&quot;&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    @Composable&#10;    fun LevelScreen(&#10;        currentDays: Int = 15, // 예시: 실제 데이터 연동 시 파라미터로 변경&#10;        onBack: (() -&gt; Unit)? = null&#10;    ) {&#10;        val levels = listOf(&#10;            LevelInfo(&quot;작심 7일&quot;, 0, 6, Color(0xFFBDBDBD)),&#10;            LevelInfo(&quot;의지의 2주&quot;, 7, 13, Color(0xFFFFEB3B)),&#10;            LevelInfo(&quot;한달의 기적&quot;, 14, 29, Color(0xFFFF9800)),&#10;            LevelInfo(&quot;습관의 탄생&quot;, 30, 59, Color(0xFF4CAF50)),&#10;            LevelInfo(&quot;계속되는 도전&quot;, 60, 119, Color(0xFF2196F3)),&#10;            LevelInfo(&quot;거의 1년&quot;, 120, 239, Color(0xFF9C27B0)),&#10;            LevelInfo(&quot;금주 마스터&quot;, 240, 364, Color(0xFF212121)),&#10;            LevelInfo(&quot;절제의 레전드&quot;, 365, Int.MAX_VALUE, Color(0xFFFFD700)),&#10;        )&#10;        val currentLevel = levels.firstOrNull { currentDays in it.start..it.end } ?: levels.last()&#10;&#10;        Column(&#10;            modifier = Modifier.fillMaxSize().background(Color.White),&#10;        ) {&#10;            // 상단바&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.ArrowBack,&#10;                    contentDescription = &quot;뒤로가기&quot;,&#10;                    modifier = Modifier.size(28.dp).clickable { onBack?.invoke() }&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;금주 레벨&quot;,&#10;                    fontSize = 22.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    textAlign = TextAlign.Start&#10;                )&#10;            }&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;            // 레벨 카드 리스트&#10;            Column(modifier = Modifier.verticalScroll(rememberScrollState())) {&#10;                levels.forEach { level -&gt;&#10;                    LevelCard(level, currentDays)&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    data class LevelInfo(val name: String, val start: Int, val end: Int, val color: Color)&#10;&#10;    @Composable&#10;    fun LevelCard(level: LevelInfo, currentDays: Int) {&#10;        val isCurrent = currentDays in level.start..level.end&#10;        val progress = when {&#10;            currentDays &lt; level.start -&gt; 0f&#10;            currentDays &gt; level.end -&gt; 1f&#10;            else -&gt; (currentDays - level.start + 1).toFloat() / (level.end - level.start + 1)&#10;        }&#10;        Card(&#10;            shape = RoundedCornerShape(16.dp),&#10;            colors = CardDefaults.cardColors(containerColor = level.color.copy(alpha = if (isCurrent) 1f else 0.3f)),&#10;            modifier = Modifier.fillMaxWidth().padding(horizontal = 16.dp)&#10;        ) {&#10;            Column(modifier = Modifier.padding(16.dp)) {&#10;                Text(&#10;                    text = level.name,&#10;                    fontSize = 18.sp,&#10;                    fontWeight = if (isCurrent) FontWeight.Bold else FontWeight.Normal,&#10;                    color = if (isCurrent) Color.Black else Color.DarkGray&#10;                )&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;${level.start}~${level.end}일&quot;,&#10;                    fontSize = 14.sp,&#10;                    color = Color.Gray&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                LinearProgressIndicator(&#10;                    progress = progress,&#10;                    modifier = Modifier.fillMaxWidth().height(8.dp),&#10;                    color = if (isCurrent) Color.Black else Color.Gray&#10;                )&#10;                if (isCurrent) {&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;                    Text(&#10;                        text = &quot;현재 진행도: ${(progress * 100).toInt()}%&quot;,&#10;                        fontSize = 13.sp,&#10;                        color = Color.Black&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewLevelScreen() {&#10;    LevelActivity().LevelScreen(currentDays = 15)&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/NoPasteEditText.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/NoPasteEditText.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.ClipboardManager&#10;import android.content.Context&#10;import android.util.AttributeSet&#10;import android.view.ActionMode&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import android.view.inputmethod.EditorInfo&#10;import android.view.inputmethod.InputConnection&#10;import android.widget.EditText&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;/**&#10; * 붙여넣기 기능이 비활성화된 커스텀 EditText&#10; */&#10;class NoPasteEditText : EditText {&#10;    constructor(context: Context) : super(context) {&#10;        init()&#10;    }&#10;&#10;    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs) {&#10;        init()&#10;    }&#10;&#10;    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {&#10;        init()&#10;    }&#10;&#10;    private fun init() {&#10;        // 길게 누르기 비활성화&#10;        isLongClickable = false&#10;&#10;        // 텍스트 선택 비활성화&#10;        setTextIsSelectable(false)&#10;&#10;        // 컨텍스트 메뉴 비활성화&#10;        customSelectionActionModeCallback = object : ActionMode.Callback {&#10;            override fun onCreateActionMode(mode: ActionMode?, menu: Menu?): Boolean = false&#10;            override fun onPrepareActionMode(mode: ActionMode?, menu: Menu?): Boolean = false&#10;            override fun onActionItemClicked(mode: ActionMode?, item: MenuItem?): Boolean = false&#10;            override fun onDestroyActionMode(mode: ActionMode?) {}&#10;        }&#10;    }&#10;&#10;    override fun onTextContextMenuItem(id: Int): Boolean {&#10;        // 모든 컨텍스트 메뉴 항목(붙여넣기, 복사 등) 차단&#10;        return false&#10;    }&#10;&#10;    override fun onCreateInputConnection(outAttrs: EditorInfo): InputConnection {&#10;        val connection = super.onCreateInputConnection(outAttrs)&#10;&#10;        // IME 옵션 설정&#10;        outAttrs.imeOptions = outAttrs.imeOptions or&#10;                EditorInfo.IME_FLAG_NO_EXTRACT_UI or&#10;                EditorInfo.IME_FLAG_NO_FULLSCREEN&#10;&#10;        return connection&#10;    }&#10;&#10;    // 붙여넣기 방지를 위해 모든 입력 시도를 추가로 검사&#10;    override fun onTextChanged(text: CharSequence?, start: Int, lengthBefore: Int, lengthAfter: Int) {&#10;        super.onTextChanged(text, start, lengthBefore, lengthAfter)&#10;&#10;        // 텍스트가 한 번에 여러 자리 추가되는 경우 (붙여넣기로 추정)&#10;        if (lengthAfter &gt; 1 &amp;&amp; lengthBefore == 0) {&#10;            val currentText = this.text.toString()&#10;            if (start == 0 &amp;&amp; currentText.length &gt; 1) {&#10;                // 마지막 숫자만 유지&#10;                setText(currentText.substring(currentText.length - 1))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Jetpack Compose 기반으로 UI를 완전히 전환한 경우, 이 파일은 더 이상 필요하지 않으므로 삭제해도 됩니다.&#10;// 만약 붙여넣기 방지 기능이 Compose에서 필요하다면, Compose용 커스텀 TextField를 별도로 구현해야 합니다.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java" />
              <option name="updatedContent" value="package com.example.alcoholictimer;&#10;&#10;import android.os.Bundle;&#10;import android.widget.TextView;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import java.util.Calendar;&#10;&#10;public class RecordSummaryActivity extends AppCompatActivity {&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_record_summary);&#10;&#10;        // ...existing code...&#10;&#10;        TextView tvRecordTitle = findViewById(R.id.tvRecordTitle);&#10;        // 예시: 현재 월을 기록 종료 시점의 월로 사용합니다.&#10;        int month = Calendar.getInstance().get(Calendar.MONTH) + 1;&#10;        tvRecordTitle.setText(String.format(&quot;%d월의 금주&quot;, month));&#10;&#10;        // ...existing code...&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SettingsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SettingsActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.tooling.preview.Preview&#10;&#10;class SettingsActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                SettingsScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;설정&quot;&#10;&#10;    @Composable&#10;    private fun SettingsScreen() {&#10;        val context = LocalContext.current&#10;        var selectedMode by remember { mutableStateOf(Constants.TEST_MODE_REAL) }&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;설정&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            Text(&#10;                text = &quot;테스트 모드 선택&quot;,&#10;                fontSize = 18.sp,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_REAL,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_REAL }&#10;                )&#10;                Text(&quot;실제 모드&quot;)&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_MINUTE,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_MINUTE }&#10;                )&#10;                Text(&quot;분 모드&quot;)&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_SECOND,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_SECOND }&#10;                )&#10;                Text(&quot;초 모드&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Button(onClick = {&#10;                saveSettings(selectedMode)&#10;                Toast.makeText(context, &quot;설정이 저장되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;            }) {&#10;                Text(&quot;저장&quot;, fontSize = 18.sp)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveSettings(selectedMode: Int) {&#10;        val preferences = getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;        val editor = preferences.edit()&#10;        editor.putInt(Constants.PREF_KEY_TEST_MODE, selectedMode)&#10;        val success = editor.commit() // 동기 저장으로 변경하고 성공 여부 확인&#10;        Log.d(&quot;SettingsActivity&quot;, &quot;Settings saved. Mode: $selectedMode, Success: $success&quot;)&#10;&#10;        // Constants 클래스의 동적 설정 업데이트&#10;        Constants.updateTestMode(selectedMode)&#10;    }&#10;&#10;    @Composable&#10;    fun SettingsScreenPreview() {&#10;        BaseScreen {&#10;            SettingsScreen()&#10;        }&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewSettingsScreen() {&#10;        SettingsScreenPreview()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.tooling.preview.Preview&#10;&#10;class TestActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                SettingsScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;설정&quot;&#10;&#10;    @Composable&#10;    private fun SettingsScreen() {&#10;        val context = LocalContext.current&#10;        var selectedMode by remember { mutableStateOf(Constants.TEST_MODE_REAL) }&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;설정&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            Text(&#10;                text = &quot;테스트 모드 선택&quot;,&#10;                fontSize = 18.sp,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_REAL,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_REAL }&#10;                )&#10;                Text(&quot;실제 모드&quot;)&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_MINUTE,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_MINUTE }&#10;                )&#10;                Text(&quot;분 모드&quot;)&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_SECOND,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_SECOND }&#10;                )&#10;                Text(&quot;초 모드&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Button(onClick = {&#10;                saveSettings(selectedMode)&#10;                Toast.makeText(context, &quot;설정이 저장되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;            }) {&#10;                Text(&quot;저장&quot;, fontSize = 18.sp)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveSettings(selectedMode: Int) {&#10;        val preferences = getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;        val editor = preferences.edit()&#10;        editor.putInt(Constants.PREF_KEY_TEST_MODE, selectedMode)&#10;        val success = editor.commit() // 동기 저장으로 변경하고 성공 여부 확인&#10;        Log.d(&quot;SettingsActivity&quot;, &quot;Settings saved. Mode: $selectedMode, Success: $success&quot;)&#10;&#10;        // Constants 클래스의 동적 설정 업데이트&#10;        Constants.updateTestMode(selectedMode)&#10;    }&#10;&#10;    @Composable&#10;    fun SettingsScreenPreview() {&#10;        BaseScreen {&#10;            SettingsScreen()&#10;        }&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewSettingsScreen() {&#10;        SettingsScreenPreview()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java" />
              <option name="originalContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}&#10;" />
              <option name="updatedContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.model.RecentActivity&#10;&#10;class RecentActivityAdapter : RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;    private val activities = ArrayList&lt;RecentActivity&gt;()&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val ivActivityIcon: ImageView = itemView.findViewById(R.id.ivActivityIcon)&#10;        val tvEndDate: TextView = itemView.findViewById(R.id.tvEndDate)&#10;        val tvActivityTitle: TextView = itemView.findViewById(R.id.tvActivityTitle)&#10;        val tvDuration: TextView = itemView.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val tvSavedMoney: TextView = itemView.findViewById(R.id.tvSavedMoney)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        &#10;        holder.tvEndDate.text = activity.endDate&#10;        holder.tvActivityTitle.text = activity.title&#10;        holder.tvDuration.text = &quot;${activity.duration}일 ${activity.hours}시간&quot;&#10;        holder.tvStatus.text = if(activity.isSuccess) &quot;성공&quot; else &quot;실패&quot;&#10;        holder.tvSavedMoney.text = &quot;${activity.savedMoney}만원 절약&quot;&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;&#10;    fun updateActivities(newActivities: List&lt;RecentActivity&gt;) {&#10;        activities.clear()&#10;        activities.addAll(newActivities.take(5)) // 최대 5개까지만 표시&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>