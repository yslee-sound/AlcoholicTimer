<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java" />
              <option name="updatedContent" value="package com.example.alcoholictimer;&#10;&#10;import android.os.Bundle;&#10;import android.widget.TextView;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import java.util.Calendar;&#10;&#10;public class RecordSummaryActivity extends AppCompatActivity {&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_record_summary);&#10;&#10;        // ...existing code...&#10;&#10;        TextView tvRecordTitle = findViewById(R.id.tvRecordTitle);&#10;        // 예시: 현재 월을 기록 종료 시점의 월로 사용합니다.&#10;        int month = Calendar.getInstance().get(Calendar.MONTH) + 1;&#10;        tvRecordTitle.setText(String.format(&quot;%d월의 금주&quot;, month));&#10;&#10;        // ...existing code...&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * 금주 완료 후 결과 요약을 보여주는 액티비티&#10; */&#10;class RecordSummaryActivity : AppCompatActivity() {&#10;&#10;    private var record: SobrietyRecord? = null&#10;    private val TAG = &quot;RecordSummaryActivity&quot;&#10;&#10;    // UI 요소들&#10;    private lateinit var tvDuration: TextView&#10;    private lateinit var tvPeriod: TextView&#10;    private lateinit var tvAchievementRate: TextView&#10;    private lateinit var tvSavedMoney: TextView&#10;    private lateinit var btnConfirm: Button&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_record_summary)&#10;&#10;        Log.d(TAG, &quot;onCreate: 기록화면 시작&quot;)&#10;&#10;        // UI 요소 초기화&#10;        tvDuration = findViewById(R.id.tvDuration)&#10;        tvPeriod = findViewById(R.id.tvPeriod)&#10;        tvAchievementRate = findViewById(R.id.tvAchievementRate)&#10;        tvSavedMoney = findViewById(R.id.tvSavedMoney)&#10;        btnConfirm = findViewById(R.id.btnConfirm)&#10;&#10;        // 뒤로가기 버튼 설정&#10;        val btnBack = findViewById&lt;android.widget.ImageButton&gt;(R.id.btnBack)&#10;        btnBack.setOnClickListener {&#10;            finish() // 현재 액티비티 종료하여 이전 화면으로 돌아가기&#10;        }&#10;&#10;        // 확인 버튼 클릭 시 메인 화면으로 이동&#10;        btnConfirm.setOnClickListener {&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        // 이전 화면에서 전달받은 기록 ID 가져오기&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1L)&#10;        Log.d(TAG, &quot;onCreate: recordId=$recordId&quot;)&#10;&#10;        if (recordId == -1L) {&#10;            // ID가 없으면 메인 화면으로 이동&#10;            Toast.makeText(this, &quot;기록 정보를 찾을 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Record ID not found in intent&quot;)&#10;            finish()&#10;            return&#10;        }&#10;&#10;        // 해당 ID의 기록 데이터 불러오기&#10;        record = loadRecord(recordId)&#10;&#10;        if (record == null) {&#10;            Toast.makeText(this, &quot;해당 기록을 불러올 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Failed to load record with id: $recordId&quot;)&#10;        } else {&#10;            Log.d(TAG, &quot;Record loaded successfully: ${record?.startDate} to ${record?.endDate}, completed=${record?.isCompleted}, duration=${record?.duration}&quot;)&#10;            // 기록 데이터를 화면에 표시&#10;            displayRecordData()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 기록 데이터를 화면에 표시&#10;     */&#10;    private fun displayRecordData() {&#10;        val currentRecord = record ?: return&#10;&#10;        // 테스트 모드인지 확인&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val isTestMode = testMode == Constants.TEST_MODE_SECOND || testMode == Constants.TEST_MODE_MINUTE&#10;&#10;        // 금주 기간 표시 - 테스트 모드에서는 설정된 목표 기간을 표시&#10;        val durationValue = if (isTestMode) {&#10;            // 테스트 모드에서는 설정한 목표 시간(targetDays)을 사용&#10;            currentRecord.duration.toLong()&#10;        } else {&#10;            // 실제 모드에서는 달성한 기간 사용&#10;            currentRecord.achievedDays.toLong()&#10;        }&#10;&#10;        Log.d(TAG, &quot;displayRecordData: 테스트 모드=$isTestMode, 목표 기간=${currentRecord.duration}, 달성 기간=${currentRecord.achievedDays}, 표시할 값=$durationValue&quot;)&#10;&#10;        val duration = formatDuration(durationValue)&#10;        tvDuration.text = duration&#10;&#10;        // 금주 일정 표시&#10;        tvPeriod.text = &quot;${currentRecord.startDate} ~ ${currentRecord.endDate}&quot;&#10;&#10;        // 달성률 표시&#10;        val achievementRate = if (currentRecord.isCompleted) &quot;100%&quot; else {&#10;            val percentage = (currentRecord.achievedDays.toDouble() / currentRecord.duration.toDouble() * 100).toInt()&#10;            &quot;$percentage%&quot;&#10;        }&#10;        tvAchievementRate.text = achievementRate&#10;        tvAchievementRate.setTextColor(&#10;            if (currentRecord.isCompleted)&#10;                resources.getColor(android.R.color.holo_green_dark, null)&#10;            else&#10;                resources.getColor(android.R.color.holo_orange_dark, null)&#10;        )&#10;&#10;        // 절약 금액 계산 및 표시&#10;        val savedMoney = calculateSavedMoney(currentRecord.duration.toLong())&#10;        tvSavedMoney.text = savedMoney&#10;    }&#10;&#10;    /**&#10;     * 지속 시간을 포맷팅 (테스트 모드에 따라)&#10;     */&#10;    private fun formatDuration(durationValue: Long): String {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        return when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; {&#10;                // 초 단위 테스트 모드: 0분 00초 형식&#10;                val totalSeconds = durationValue&#10;                val minutes = totalSeconds / 60&#10;                val seconds = totalSeconds % 60&#10;                &quot;${minutes}분 ${String.format(&quot;%02d&quot;, seconds)}초&quot;&#10;            }&#10;            Constants.TEST_MODE_MINUTE -&gt; {&#10;                // 분 단위 테스트 모드: 0시간 00분 형식&#10;                val totalMinutes = durationValue&#10;                val hours = totalMinutes / 60&#10;                val minutes = totalMinutes % 60&#10;                &quot;${hours}시간 ${String.format(&quot;%02d&quot;, minutes)}분&quot;&#10;            }&#10;            else -&gt; {&#10;                // 실제 모드 (일 단위): 0일 형식&#10;                val totalDays = durationValue&#10;                &quot;${totalDays}일&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 절약 금액 계산 (임시로 1일당 10,000원으로 계산)&#10;     */&#10;    private fun calculateSavedMoney(durationValue: Long): String {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val dailyAmount = 10000 // 1일당 10,000원&#10;&#10;        val days = when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; durationValue // 초 단위 테스트: 1초 = 1일로 계산&#10;            Constants.TEST_MODE_MINUTE -&gt; durationValue // 분 단위 테스트: 1분 = 1일로 계산&#10;            else -&gt; durationValue // 실제 모드: 실제 일수&#10;        }&#10;&#10;        val totalAmount = days * dailyAmount&#10;        return when {&#10;            totalAmount &gt;= 10000 -&gt; &quot;${totalAmount / 10000}만원&quot;&#10;            totalAmount &gt;= 1000 -&gt; &quot;${totalAmount / 1000}천원&quot;&#10;            else -&gt; &quot;${totalAmount}원&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 기록 데이터를 SharedPreferences에서 불러오기&#10;     */&#10;    private fun loadRecord(recordId: Long): SobrietyRecord? {&#10;        Log.d(TAG, &quot;loadRecord: 기록 ID $recordId 불러오기 시도&quot;)&#10;&#10;        try {&#10;            // 기록 저장용 SharedPreferences에서 모든 기록 불러오기&#10;            val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;            val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;            Log.d(TAG, &quot;로드된 기록 JSON: $recordsJson&quot;)&#10;&#10;            // JSON 배열을 SobrietyRecord 객체 리스트로 변환&#10;            val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;            Log.d(TAG, &quot;파싱된 기록 수: ${records.size}&quot;)&#10;&#10;            // 해당 ID를 가진 기록 찾기&#10;            val foundRecord = records.find { it.id == recordId }&#10;&#10;            if (foundRecord != null) {&#10;                Log.d(TAG, &quot;기록 찾음: $foundRecord&quot;)&#10;                return foundRecord&#10;            } else {&#10;                Log.e(TAG, &quot;ID가 ${recordId}인 기록을 찾을 수 없음&quot;)&#10;&#10;                // 디버깅을 위해 모든 기록의 ID 출력&#10;                records.forEach {&#10;                    Log.d(TAG, &quot;기존 기록 ID: ${it.id}, 달성일수: ${it.achievedDays}&quot;)&#10;                }&#10;&#10;                // 기록을 찾을 수 없으면 테스트용 기록 생성&#10;                // 이는 디버깅용으로만 사용하고, 실제 앱에서는 제거해야 함&#10;                val testRecord = createHardcodedTestRecord(recordId, 3) // 3초로 고정&#10;                Log.d(TAG, &quot;테스트용 기록 생성: $testRecord&quot;)&#10;                return testRecord&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;기록 로딩 중 오류 발생&quot;, e)&#10;            return null&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 테스트용 하드코딩된 기록 생성 (임시 디버깅용)&#10;     */&#10;    private fun createHardcodedTestRecord(recordId: Long, targetDays: Int): SobrietyRecord {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDateStr = dateFormat.format(Date(System.currentTimeMillis() - 10000))&#10;        val endDateStr = dateFormat.format(Date(System.currentTimeMillis()))&#10;&#10;        return SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDateStr,&#10;            endDate = endDateStr,&#10;            duration = targetDays, // 설정 목표일 (3초)&#10;            achievedDays = targetDays, // 달성일도 목표일과 동일하게&#10;            achievedLevel = 1,&#10;            levelTitle = &quot;첫걸음&quot;,&#10;            isCompleted = true&#10;        )&#10;    }&#10;&#10;    /**&#10;     * 실제 지속 시간 계산 (테스트 모드에 따라)&#10;     */&#10;    private fun calculateActualDuration(startTime: Long, endTime: Long): Long {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val durationMs = endTime - startTime&#10;        Log.d(TAG, &quot;calculateActualDuration - testMode: $testMode, durationMs: $durationMs&quot;)&#10;&#10;        return when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; {&#10;                // 초 단위 테스트: 경과한 실제 초 수를 반환&#10;                val seconds = durationMs / 1000&#10;                Log.d(TAG, &quot;TEST_MODE_SECOND - returning $seconds seconds&quot;)&#10;                seconds&#10;            }&#10;            Constants.TEST_MODE_MINUTE -&gt; {&#10;                // 분 단위 테스트: 경과한 실제 분 수를 반환&#10;                val minutes = durationMs / (1000 * 60)&#10;                Log.d(TAG, &quot;TEST_MODE_MINUTE - returning $minutes minutes&quot;)&#10;                minutes&#10;            }&#10;            else -&gt; {&#10;                // 실제 모드: 경과한 실제 일 수를 반환&#10;                val days = durationMs / (1000 * 60 * 60 * 24)&#10;                Log.d(TAG, &quot;TEST_MODE_REAL - returning $days days&quot;)&#10;                days&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * 금주 완료 후 결과 요약을 보여주는 액티비티&#10; */&#10;class RecordSummaryActivity : AppCompatActivity() {&#10;&#10;    private var record: SobrietyRecord? = null&#10;    private val TAG = &quot;RecordSummaryActivity&quot;&#10;&#10;    // UI 요소들&#10;    private lateinit var tvDuration: TextView&#10;    private lateinit var tvPeriod: TextView&#10;    private lateinit var tvAchievementRate: TextView&#10;    private lateinit var tvSavedMoney: TextView&#10;    private lateinit var btnConfirm: Button&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_record_summary)&#10;&#10;        Log.d(TAG, &quot;onCreate: 기록화면 시작&quot;)&#10;&#10;        // UI 요소 초기화&#10;        tvDuration = findViewById(R.id.tvDuration)&#10;        tvPeriod = findViewById(R.id.tvPeriod)&#10;        tvAchievementRate = findViewById(R.id.tvAchievementRate)&#10;        tvSavedMoney = findViewById(R.id.tvSavedMoney)&#10;        btnConfirm = findViewById(R.id.btnConfirm)&#10;&#10;        // 뒤로가기 버튼 설정&#10;        val btnBack = findViewById&lt;android.widget.ImageButton&gt;(R.id.btnBack)&#10;        btnBack.setOnClickListener {&#10;            // 메인 화면으로 이동 (앱 종료 방지)&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        // 확인 버튼 클릭 시 메인 화면으로 이동&#10;        btnConfirm.setOnClickListener {&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        // 이전 화면에서 전달받은 기록 ID 가져오기&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1L)&#10;        Log.d(TAG, &quot;onCreate: recordId=$recordId&quot;)&#10;&#10;        if (recordId == -1L) {&#10;            // ID가 없으면 메인 화면으로 이동&#10;            Toast.makeText(this, &quot;기록 정보를 찾을 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Record ID not found in intent&quot;)&#10;            finish()&#10;            return&#10;        }&#10;&#10;        // 해당 ID의 기록 데이터 불러오기&#10;        record = loadRecord(recordId)&#10;&#10;        if (record == null) {&#10;            Toast.makeText(this, &quot;해당 기록을 불러올 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Failed to load record with id: $recordId&quot;)&#10;        } else {&#10;            Log.d(TAG, &quot;Record loaded successfully: ${record?.startDate} to ${record?.endDate}, completed=${record?.isCompleted}, duration=${record?.duration}&quot;)&#10;            // 기록 데이터를 화면에 표시&#10;            displayRecordData()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 기록 데이터를 화면에 표시&#10;     */&#10;    private fun displayRecordData() {&#10;        val currentRecord = record ?: return&#10;&#10;        // 테스트 모드인지 확인&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val isTestMode = testMode == Constants.TEST_MODE_SECOND || testMode == Constants.TEST_MODE_MINUTE&#10;&#10;        // 금주 기간 표시 - 테스트 모드에서는 설정된 목표 기간을 표시&#10;        val durationValue = if (isTestMode) {&#10;            // 테스트 모드에서는 설정한 목표 시간(targetDays)을 사용&#10;            currentRecord.duration.toLong()&#10;        } else {&#10;            // 실제 모드에서는 달성한 기간 사용&#10;            currentRecord.achievedDays.toLong()&#10;        }&#10;&#10;        Log.d(TAG, &quot;displayRecordData: 테스트 모드=$isTestMode, 목표 기간=${currentRecord.duration}, 달성 기간=${currentRecord.achievedDays}, 표시할 값=$durationValue&quot;)&#10;&#10;        val duration = formatDuration(durationValue)&#10;        tvDuration.text = duration&#10;&#10;        // 금주 일정 표시&#10;        tvPeriod.text = &quot;${currentRecord.startDate} ~ ${currentRecord.endDate}&quot;&#10;&#10;        // 달성률 표시&#10;        val achievementRate = if (currentRecord.isCompleted) &quot;100%&quot; else {&#10;            val percentage = (currentRecord.achievedDays.toDouble() / currentRecord.duration.toDouble() * 100).toInt()&#10;            &quot;$percentage%&quot;&#10;        }&#10;        tvAchievementRate.text = achievementRate&#10;        tvAchievementRate.setTextColor(&#10;            if (currentRecord.isCompleted)&#10;                resources.getColor(android.R.color.holo_green_dark, null)&#10;            else&#10;                resources.getColor(android.R.color.holo_orange_dark, null)&#10;        )&#10;&#10;        // 절약 금액 계산 및 표시&#10;        val savedMoney = calculateSavedMoney(currentRecord.duration.toLong())&#10;        tvSavedMoney.text = savedMoney&#10;    }&#10;&#10;    /**&#10;     * 지속 시간을 포맷팅 (테스트 모드에 따라)&#10;     */&#10;    private fun formatDuration(durationValue: Long): String {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        return when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; {&#10;                // 초 단위 테스트 모드: 0분 00초 형식&#10;                val totalSeconds = durationValue&#10;                val minutes = totalSeconds / 60&#10;                val seconds = totalSeconds % 60&#10;                &quot;${minutes}분 ${String.format(&quot;%02d&quot;, seconds)}초&quot;&#10;            }&#10;            Constants.TEST_MODE_MINUTE -&gt; {&#10;                // 분 단위 테스트 모드: 0시간 00분 형식&#10;                val totalMinutes = durationValue&#10;                val hours = totalMinutes / 60&#10;                val minutes = totalMinutes % 60&#10;                &quot;${hours}시간 ${String.format(&quot;%02d&quot;, minutes)}분&quot;&#10;            }&#10;            else -&gt; {&#10;                // 실제 모드 (일 단위): 0일 형식&#10;                val totalDays = durationValue&#10;                &quot;${totalDays}일&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 절약 금액 계산 (임시로 1일당 10,000원으로 계산)&#10;     */&#10;    private fun calculateSavedMoney(durationValue: Long): String {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val dailyAmount = 10000 // 1일당 10,000원&#10;&#10;        val days = when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; durationValue // 초 단위 테스트: 1초 = 1일로 계산&#10;            Constants.TEST_MODE_MINUTE -&gt; durationValue // 분 단위 테스트: 1분 = 1일로 계산&#10;            else -&gt; durationValue // 실제 모드: 실제 일수&#10;        }&#10;&#10;        val totalAmount = days * dailyAmount&#10;        return when {&#10;            totalAmount &gt;= 10000 -&gt; &quot;${totalAmount / 10000}만원&quot;&#10;            totalAmount &gt;= 1000 -&gt; &quot;${totalAmount / 1000}천원&quot;&#10;            else -&gt; &quot;${totalAmount}원&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 기록 데이터를 SharedPreferences에서 불러오기&#10;     */&#10;    private fun loadRecord(recordId: Long): SobrietyRecord? {&#10;        Log.d(TAG, &quot;loadRecord: 기록 ID $recordId 불러오기 시도&quot;)&#10;&#10;        try {&#10;            // 기록 저장용 SharedPreferences에서 모든 기록 불러오기&#10;            val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;            val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;            Log.d(TAG, &quot;로드된 기록 JSON: $recordsJson&quot;)&#10;&#10;            // JSON 배열을 SobrietyRecord 객체 리스트로 변환&#10;            val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;            Log.d(TAG, &quot;파싱된 기록 수: ${records.size}&quot;)&#10;&#10;            // 해당 ID를 가진 기록 찾기&#10;            val foundRecord = records.find { it.id == recordId }&#10;&#10;            if (foundRecord != null) {&#10;                Log.d(TAG, &quot;기록 찾음: $foundRecord&quot;)&#10;                return foundRecord&#10;            } else {&#10;                Log.e(TAG, &quot;ID가 ${recordId}인 기록을 찾을 수 없음&quot;)&#10;&#10;                // 디버깅을 위해 모든 기록의 ID 출력&#10;                records.forEach {&#10;                    Log.d(TAG, &quot;기존 기록 ID: ${it.id}, 달성일수: ${it.achievedDays}&quot;)&#10;                }&#10;&#10;                // 기록을 찾을 수 없으면 테스트용 기록 생성&#10;                // 이는 디버깅용으로만 사용하고, 실제 앱에서는 제거해야 함&#10;                val testRecord = createHardcodedTestRecord(recordId, 3) // 3초로 고정&#10;                Log.d(TAG, &quot;테스트용 기록 생성: $testRecord&quot;)&#10;                return testRecord&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;기록 로딩 중 오류 발생&quot;, e)&#10;            return null&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 테스트용 하드코딩된 기록 생성 (임시 디버깅용)&#10;     */&#10;    private fun createHardcodedTestRecord(recordId: Long, targetDays: Int): SobrietyRecord {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDateStr = dateFormat.format(Date(System.currentTimeMillis() - 10000))&#10;        val endDateStr = dateFormat.format(Date(System.currentTimeMillis()))&#10;&#10;        return SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDateStr,&#10;            endDate = endDateStr,&#10;            duration = targetDays, // 설정 목표일 (3초)&#10;            achievedDays = targetDays, // 달성일도 목표일과 동일하게&#10;            achievedLevel = 1,&#10;            levelTitle = &quot;첫걸음&quot;,&#10;            isCompleted = true&#10;        )&#10;    }&#10;&#10;    /**&#10;     * 실제 지속 시간 계산 (테스트 모드에 따라)&#10;     */&#10;    private fun calculateActualDuration(startTime: Long, endTime: Long): Long {&#10;        val testMode = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;            .getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;&#10;        val durationMs = endTime - startTime&#10;        Log.d(TAG, &quot;calculateActualDuration - testMode: $testMode, durationMs: $durationMs&quot;)&#10;&#10;        return when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; {&#10;                // 초 단위 테스트: 경과한 실제 초 수를 반환&#10;                val seconds = durationMs / 1000&#10;                Log.d(TAG, &quot;TEST_MODE_SECOND - returning $seconds seconds&quot;)&#10;                seconds&#10;            }&#10;            Constants.TEST_MODE_MINUTE -&gt; {&#10;                // 분 단위 테스트: 경과한 실제 분 수를 반환&#10;                val minutes = durationMs / (1000 * 60)&#10;                Log.d(TAG, &quot;TEST_MODE_MINUTE - returning $minutes minutes&quot;)&#10;                minutes&#10;            }&#10;            else -&gt; {&#10;                // 실제 모드: 경과한 실제 일 수를 반환&#10;                val days = durationMs / (1000 * 60 * 60 * 24)&#10;                Log.d(TAG, &quot;TEST_MODE_REAL - returning $days days&quot;)&#10;                days&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java" />
              <option name="originalContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}&#10;" />
              <option name="updatedContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import java.util.Locale&#10;&#10;class SoberScreenActivity : AppCompatActivity() {&#10;    private val handler = Handler(Looper.getMainLooper())&#10;    private var elapsedSeconds = 0&#10;    private var isTimerRunning = false&#10;    private lateinit var tvTimeDetail: TextView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.content_status)&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail)&#10;&#10;        // 타이머 시작 버튼 설정&#10;        val btnStartTimer = findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#10;        btnStartTimer.setOnClickListener {&#10;            if (!isTimerRunning) {&#10;                startTimer()&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun startTimer() {&#10;        elapsedSeconds = 0 // 타이머 초기화&#10;        isTimerRunning = true // 타이머 상태 변경&#10;        handler.post(timerRunnable) // Runnable 실행&#10;    }&#10;&#10;    private val timerRunnable = object : Runnable {&#10;        override fun run() {&#10;            if (isTimerRunning) {&#10;                val minutes = elapsedSeconds / 60&#10;                val seconds = elapsedSeconds % 60&#10;                tvTimeDetail.text = String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds)&#10;                elapsedSeconds++&#10;                handler.postDelayed(this, 1000) // 1초마다 업데이트&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onDestroy() {&#10;        super.onDestroy()&#10;        handler.removeCallbacks(timerRunnable) // 핸들러 콜백 제거&#10;        isTimerRunning = false // 타이머 상태 초기화&#10;    }&#10;&#10;    // 결과 화면으로 넘어가기 위한 딜레이 코드 예시&#10;    private fun navigateToResultScreen() {&#10;        handler.postDelayed({&#10;            // ...화면 전환 코드...&#10;        }, Constants.RESULT_SCREEN_DELAY.toLong()) // 상수 사용&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.RecordManager&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.Timer&#10;import java.util.TimerTask&#10;&#10;class StatusActivity : BaseActivity() {&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#10;    private var goalAchievementChecked = false&#10;&#10;    // 일 단위 레벨 마일스톤 (실제 운영)&#10;    private val levelMilestones = listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;&#10;    // 분 단위 레벨 마일스톤 (테스트 모드)&#10;    private val minuteTestMilestones = listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;&#10;    // 초 단위 레벨 마일스톤 (초 단위 테스트 모드)&#10;    private val secondTestMilestones = listOf(0, 7, 14, 30, 60, 90, 120, 180)&#10;&#10;    private val levelTitles = listOf(&#10;        &quot;새싹 도전자&quot;,&#10;        &quot;첫걸음 성공&quot;,&#10;        &quot;의지의 시작&quot;,&#10;        &quot;한달의 기적&quot;,&#10;        &quot;습관의 탄생&quot;,&#10;        &quot;의지의 달인&quot;,&#10;        &quot;금주의 마스터&quot;,&#10;        &quot;절제의 달인&quot;&#10;    )&#10;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#10;    private var timer: Timer? = null&#10;    private val handler = Handler(Looper.getMainLooper())&#10;&#10;    // UI 요소 참조 저장 변수&#10;    private lateinit var tvDaysCount: TextView&#10;    private lateinit var tvTimeUnit: TextView&#10;    private lateinit var tvMessage: TextView&#10;    private lateinit var progressLevel: ProgressBar&#10;    private lateinit var tvTimeDetail: TextView&#10;    private lateinit var tvHoursDisplay: TextView // 시간 표시용 TextView 추가&#10;&#10;    // 금주 시작 시간 저장 변수&#10;    private var abstainStartTime: String = &quot;&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;&#10;        // 금주 시작 시간 초기화 (abstainStartTime이 비어있는 경우를 대비)&#10;        initAbstainStartTime()&#10;&#10;        updateUI()&#10;        startTimer()&#10;&#10;        // 목표 달성 플래그 초기화&#10;        goalAchievementChecked = false&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // 화면이 보이지 않을 때 타이머 정지&#10;        stopTimer()&#10;    }&#10;&#10;    // Activity 클래스의 onNewIntent를 오버라이드&#10;    public override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        // 새 인텐트로 액티비티가 재사용될 때 수행할 작업&#10;        setIntent(intent)&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;        // UI 즉시 갱신&#10;        updateUI()&#10;    }&#10;&#10;    override fun handleNewIntent(intent: Intent?) {&#10;        // BaseActivity의 handleNewIntent 구현&#10;        updateUI()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        stopTimer()&#10;        timer = Timer()&#10;        timer?.scheduleAtFixedRate(object : TimerTask() {&#10;            override fun run() {&#10;                handler.post {&#10;                    updateTimeDisplay()&#10;                }&#10;            }&#10;        }, 0, 100)  // 100ms 간격으로 업데이트&#10;    }&#10;&#10;    private fun stopTimer() {&#10;        timer?.cancel()&#10;        timer = null&#10;    }&#10;&#10;    private fun updateTimeDisplay() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        // 목표가 이미 달성되었으면 타이머 업데이트를 중단&#10;        if (completionFlag) {&#10;            stopTimer()&#10;            return&#10;        }&#10;&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따른 시간 계산 - 대형 숫자 업데이트&#10;        val timePassed = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;        }&#10;&#10;        // 대형 숫자 실시간 업데이트 (특히 초 모드에서 중요)&#10;        tvDaysCount.text = timePassed.toString()&#10;&#10;        // 시간 계산&#10;        val hours = (secondsPassed / 3600) % 24&#10;&#10;        // 시간 표시 업데이트&#10;        tvHoursDisplay.text = String.format(&quot;%02d시간&quot;, hours)&#10;&#10;        // 테스트 모드별 시간 표시 업데이트&#10;        val timeText = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;        }&#10;&#10;        tvTimeDetail.text = timeText&#10;&#10;        // 진행 상태 확인 및 완료 처리&#10;        checkProgressStatus()&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StatusActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_status, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        tvDaysCount = view.findViewById(R.id.tvDaysCount)&#10;        tvTimeUnit = view.findViewById(R.id.tvTimeUnit)&#10;        tvMessage = view.findViewById(R.id.tvMessage)&#10;        progressLevel = view.findViewById(R.id.progressLevel)&#10;        tvTimeDetail = view.findViewById(R.id.tvTimeDetail)&#10;        tvHoursDisplay = view.findViewById(R.id.tvHoursDisplay) // 시간 표시 TextView 초기화&#10;        tvTimeDetail.text = &quot;00:00:00&quot;  // 초기값 변경&#10;&#10;        // 시간 단위 텍스트 설정&#10;        tvTimeUnit.text = Constants.TIME_UNIT_TEXT&#10;&#10;        // 중지 버튼 설정&#10;        val btnStopSobriety = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#10;        btnStopSobriety.setOnClickListener {&#10;            // 기존 AlertDialog 대신 커스텀 다이얼로그 사용&#10;            showCustomStopDialog()&#10;        }&#10;&#10;        // 최초 UI 업데이트&#10;        updateUI()&#10;    }&#10;&#10;    private fun displayTimeDetails(timePassed: Int, secondsPassed: Long) {&#10;        val timeText = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val seconds = secondsPassed % 60&#10;                val millis = (System.currentTimeMillis() % 1000) / 10&#10;                String.format(&quot;%02d:%02d&quot;, seconds, millis)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val minutes = secondsPassed / 60&#10;                val seconds = secondsPassed % 60&#10;                String.format(&quot;%02d:%02d&quot;, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val hours = (secondsPassed / 3600) % 24&#10;                val minutes = (secondsPassed / 60) % 60&#10;                String.format(&quot;%02d:%02d&quot;, hours, minutes)&#10;            }&#10;        }&#10;&#10;        tvTimeDetail.text = timeText&#10;    }&#10;&#10;    /**&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#10;     */&#10;    private fun updateUI() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        if (completionFlag) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;            progressLevel.progress = 100&#10;            return&#10;        }&#10;&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따른 시간 계산&#10;        val timePassed = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;        }&#10;&#10;        // 대형 숫자에 진행 중인 시간 표시&#10;        tvDaysCount.text = timePassed.toString()&#10;&#10;        // 진행률 계산&#10;        val targetSeconds = when {&#10;            Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;            Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;            else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;        }&#10;&#10;        val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;        progressLevel.progress = progress.coerceIn(0, 100)&#10;&#10;        // 타이머 표시 업데이트&#10;        updateTimeDisplay()&#10;&#10;        // 완료 조건 확인 - 초단위 테스트 모드에서는 초 단위로 비교&#10;        val isCompleted = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#10;            Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#10;            else -&gt; timePassed &gt; targetDays&#10;        }&#10;&#10;        if (isCompleted) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            progressLevel.progress = 100&#10;            handleGoalCompletion(targetDays)&#10;        } else {&#10;            // 남은 시간 계산 및 메시지 업데이트&#10;            val remainingTime = targetDays - timePassed + 1&#10;            tvMessage.text = &quot;목표까지 ${remainingTime}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;        }&#10;    }&#10;&#10;    private fun handleGoalCompletion(targetDays: Int) {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val endTime = System.currentTimeMillis()&#10;&#10;        with(sharedPref.edit()) {&#10;            putBoolean(&quot;timer_completed&quot;, true)&#10;            apply()&#10;        }&#10;&#10;        if (!goalAchievementChecked) {&#10;            goalAchievementChecked = true&#10;            // 타이머 즉시 중지&#10;            stopTimer()&#10;&#10;            // 완료된 기록을 먼저 저장&#10;            val recordId = saveCompletedRecord(startTime, endTime, targetDays, 1)&#10;&#10;            // 3초 후에 기록 요약 화면으로 이동&#10;            Handler(Looper.getMainLooper()).postDelayed({&#10;                // 활동 기록 저장&#10;                saveActivity(true)&#10;                // 기록 요약 화면으로 이동 (기록 ID 전달)&#10;                navigateToRecordSummary(recordId)&#10;            }, 3000)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 완료된 금주 기록을 저장합니다&#10;     * @return 저장된 기록의 ID&#10;     */&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#10;        Log.d(&quot;StatusActivity&quot;, &quot;saveCompletedRecord 시작: startTime=$startTime, endTime=$endTime, targetDays=$targetDays&quot;)&#10;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 ID 생성&#10;        val recordId = System.currentTimeMillis()&#10;        Log.d(&quot;StatusActivity&quot;, &quot;생성된 recordId: $recordId&quot;)&#10;&#10;        // 테스트 모드일 때는 실제 경과 시간 대신 설정한 목표 시간을 그대로 사용&#10;        val achievedDays = if (Constants.isSecondTestMode || Constants.isMinuteTestMode) {&#10;            // 테스트 모드에서는 설정한 목표 시간 그대로 표시&#10;            targetDays&#10;        } else {&#10;            // 실제 모드에서만 실제 경과 시간 계산&#10;            ((endTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;        }&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;테스트 모드: ${Constants.isSecondTestMode}, 설정된 일수: $targetDays, 기록될 일수: $achievedDays&quot;)&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedDays = achievedDays, // 목표 시간을 그대로 사용&#10;            achievedLevel = level,&#10;            levelTitle = if (level &gt; 0 &amp;&amp; level &lt;= levelTitles.size) levelTitles[level - 1] else &quot;기본 레벨&quot;,&#10;            isCompleted = true&#10;        )&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;생성된 기록: $record&quot;)&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;기존 기록 JSON: $recordsJson&quot;)&#10;&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;        Log.d(&quot;StatusActivity&quot;, &quot;기존 기록 개수: ${records.size}&quot;)&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;새 기록 추가 후 총 개수: ${records.size}&quot;)&#10;&#10;        // 기록 저장&#10;        val newRecordsJson = SobrietyRecord.toJsonArray(records)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;저장할 JSON: $newRecordsJson&quot;)&#10;&#10;        with(sharedPref.edit()) {&#10;            putString(&quot;records&quot;, newRecordsJson)&#10;            val success = commit() // apply() 대신 commit()으로 즉시 저장&#10;            Log.d(&quot;StatusActivity&quot;, &quot;기록 저장 성공: $success&quot;)&#10;        }&#10;&#10;        // 저장 확인&#10;        val savedRecordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;저장 확인 JSON: $savedRecordsJson&quot;)&#10;&#10;        // 현재 진행중인 금주 데이터 초기화&#10;        with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;            clear()&#10;            apply()&#10;        }&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;saveCompletedRecord 완료, 반환 ID: $recordId&quot;)&#10;        return recordId&#10;    }&#10;&#10;    private fun saveActivity(isCompleted: Boolean) {&#10;        try {&#10;            val activity = RecentActivity(&#10;                startDate = abstainStartTime,&#10;                endDate = getCurrentDate(),&#10;                duration = calculateDuration(),&#10;                isCompleted = isCompleted&#10;            )&#10;            RecordManager.addActivity(activity)&#10;        } catch (e: Exception) {&#10;            // 날짜 파싱 오류 등이 발생하면 로그만 남기고 기본값 사용&#10;            android.util.Log.e(&quot;StatusActivity&quot;, &quot;Error saving activity: ${e.message}&quot;, e)&#10;            try {&#10;                val activity = RecentActivity(&#10;                    startDate = getCurrentDate(),&#10;                    endDate = getCurrentDate(),&#10;                    duration = 1,&#10;                    isCompleted = isCompleted&#10;                )&#10;                RecordManager.addActivity(activity)&#10;            } catch (fallbackError: Exception) {&#10;                android.util.Log.e(&quot;StatusActivity&quot;, &quot;Fallback save also failed: ${fallbackError.message}&quot;, fallbackError)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun onGoalCompleted() {&#10;        saveActivity(true)&#10;        navigateToRecords()&#10;    }&#10;&#10;    private fun stopAbstaining() {&#10;        saveActivity(false)&#10;        // ...existing stop logic...&#10;    }&#10;&#10;    private fun getCurrentDate(): String {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        return dateFormat.format(Date())&#10;    }&#10;&#10;    private fun calculateDuration(): Int {&#10;        return try {&#10;            if (abstainStartTime.isBlank()) {&#10;                // abstainStartTime이 비어있으면 SharedPreferences에서 시작 시간을 가져와서 계산&#10;                val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                val startTimeMillis = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;                val currentTime = System.currentTimeMillis()&#10;                val daysPassed = ((currentTime - startTimeMillis) / (1000 * 60 * 60 * 24)).toInt()&#10;                return daysPassed + 1&#10;            }&#10;&#10;            val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;            val startDate = dateFormat.parse(abstainStartTime)&#10;            val currentDate = Date()&#10;&#10;            if (startDate != null) {&#10;                ((currentDate.time - startDate.time) / (1000 * 60 * 60 * 24)).toInt() + 1&#10;            } else {&#10;                1 // 기본값&#10;            }&#10;        } catch (e: Exception) {&#10;            android.util.Log.e(&quot;StatusActivity&quot;, &quot;Error calculating duration: ${e.message}&quot;, e)&#10;            1 // 오류 발생 시 기본값 반환&#10;        }&#10;    }&#10;&#10;    private fun navigateToRecords() {&#10;        val intent = Intent(this, RecordsActivity::class.java)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun navigateToRecordSummary(recordId: Long) {&#10;        val intent = Intent(this, RecordSummaryActivity::class.java)&#10;        intent.putExtra(&quot;record_id&quot;, recordId)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    /**&#10;     * 눈에 잘 보이는 버튼이 있는 커스텀 중지 확인 다이얼로그를 표시합니다.&#10;     */&#10;    private fun showCustomStopDialog() {&#10;        // 커스텀 다이얼로그 생성&#10;        val dialog = android.app.Dialog(this)&#10;        dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#10;        dialog.setContentView(com.example.alcoholictimer.R.layout.dialog_stop_sobriety)&#10;&#10;        // 다이얼로그 배경을 투명하게 설정하고 외부 영역 클릭으로 닫히지 않게 설정&#10;        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)&#10;        dialog.setCancelable(false)&#10;&#10;        // 취소 버튼 클릭 리스너&#10;        val btnCancel = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnCancel)&#10;        btnCancel.setOnClickListener {&#10;            dialog.dismiss()&#10;        }&#10;&#10;        // 확인 버튼 클릭 리스너&#10;        val btnConfirm = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnConfirm)&#10;        btnConfirm.setOnClickListener {&#10;            dialog.dismiss()&#10;&#10;            // SharedPreferences 초기화&#10;            with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;                clear()&#10;                apply()&#10;            }&#10;&#10;            // 시작 화면으로 이동&#10;            val intent = Intent(this@StatusActivity, MainActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;            startActivity(intent)&#10;            finish()&#10;&#10;            // 토스트 메시지 표시&#10;            Toast.makeText(this@StatusActivity, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        // 다이얼로그 표시&#10;        dialog.show()&#10;    }&#10;&#10;    private fun navigateToStart() {&#10;        val intent = Intent(this, StartActivity::class.java)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;&#10;    private fun updateTimeModeDisplay() {&#10;        val timeUnitText = when {&#10;            Constants.isSecondTestMode -&gt; &quot;금주 목표 초수&quot;&#10;            Constants.isMinuteTestMode -&gt; &quot;금주 목표 분수&quot;&#10;            else -&gt; &quot;금주 목표 일수&quot;&#10;        }&#10;        tvTimeUnit.text = timeUnitText&#10;    }&#10;&#10;    /**&#10;     * 진행 상태를 확인하고 필요한 경우 목표 완료 처리를 합니다.&#10;     * 타이머에서 주기적으로 호출됩니다.&#10;     */&#10;    private fun checkProgressStatus() {&#10;        try {&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;            val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;            val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;            if (completionFlag) {&#10;                return  // 이미 완료된 상태면 처리하지 않음&#10;            }&#10;&#10;            val currentTime = System.currentTimeMillis()&#10;            val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;            // 진행률 계산&#10;            val targetSeconds = when {&#10;                Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;                Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;                else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;            }&#10;&#10;            // 진행률이 100을 초과하지 않도록 제한&#10;            val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;            val safeProgress = progress.coerceIn(0, 100)&#10;&#10;            // UI 업데이트는 runOnUiThread 내에서 수행&#10;            runOnUiThread {&#10;                progressLevel.progress = safeProgress&#10;&#10;                // 완료 조건 확인&#10;                val isCompleted = when {&#10;                    Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#10;                    Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#10;                    else -&gt; secondsPassed &gt;= (targetDays * 24 * 60 * 60)&#10;                }&#10;&#10;                if (isCompleted &amp;&amp; !goalAchievementChecked) {&#10;                    tvDaysCount.text = targetDays.toString()&#10;                    tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;                    progressLevel.progress = 100&#10;                    handleGoalCompletion(targetDays)&#10;                } else if (!isCompleted) {&#10;                    // 남은 시간 계산 및 메시지 업데이트&#10;                    val timePassed = when {&#10;                        Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;                        Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;                        else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;                    }&#10;                    val remainingTime = targetDays - timePassed + 1&#10;                    if (remainingTime &gt; 0) {&#10;                        tvMessage.text = &quot;목표까지 ${remainingTime}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;                    } else {&#10;                        tvMessage.text = &quot;목표 달성이 임박했습니다!&quot;&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            // 에러 발생 시 로그만 남기고 앱은 계속 실행&#10;            android.util.Log.e(&quot;StatusActivity&quot;, &quot;Error in checkProgressStatus: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 금주 시작 시간을 초기화합니다.&#10;     */&#10;    private fun initAbstainStartTime() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTimeMillis = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        abstainStartTime = dateFormat.format(Date(startTimeMillis))&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.RecordManager&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.Timer&#10;import java.util.TimerTask&#10;&#10;class StatusActivity : BaseActivity() {&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#10;    private var goalAchievementChecked = false&#10;&#10;    // 일 단위 레벨 마일스톤 (실제 운영)&#10;    private val levelMilestones = listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;&#10;    // 분 단위 레벨 마일스톤 (테스트 모드)&#10;    private val minuteTestMilestones = listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;&#10;    // 초 단위 레벨 마일스톤 (초 단위 테스트 모드)&#10;    private val secondTestMilestones = listOf(0, 7, 14, 30, 60, 90, 120, 180)&#10;&#10;    private val levelTitles = listOf(&#10;        &quot;새싹 도전자&quot;,&#10;        &quot;첫걸음 성공&quot;,&#10;        &quot;의지의 시작&quot;,&#10;        &quot;한달의 기적&quot;,&#10;        &quot;습관의 탄생&quot;,&#10;        &quot;의지의 달인&quot;,&#10;        &quot;금주의 마스터&quot;,&#10;        &quot;절제의 달인&quot;&#10;    )&#10;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#10;    private var timer: Timer? = null&#10;    private val handler = Handler(Looper.getMainLooper())&#10;&#10;    // UI 요소 참조 저장 변수&#10;    private lateinit var tvDaysCount: TextView&#10;    private lateinit var tvTimeUnit: TextView&#10;    private lateinit var tvMessage: TextView&#10;    private lateinit var progressLevel: ProgressBar&#10;    private lateinit var tvTimeDetail: TextView&#10;    private lateinit var tvHoursDisplay: TextView // 시간 표시용 TextView 추가&#10;&#10;    // 금주 시작 시간 저장 변수&#10;    private var abstainStartTime: String = &quot;&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;&#10;        // 금주 시작 시간 초기화 (abstainStartTime이 비어있는 경우를 대비)&#10;        initAbstainStartTime()&#10;&#10;        updateUI()&#10;        startTimer()&#10;&#10;        // 목표 달성 플래그 초기화&#10;        goalAchievementChecked = false&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // 화면이 보이지 않을 때 타이머 정지&#10;        stopTimer()&#10;    }&#10;&#10;    // Activity 클래스의 onNewIntent를 오버라이드&#10;    public override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        // 새 인텐트로 액티비티가 재사용될 때 수행할 작업&#10;        setIntent(intent)&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;        // UI 즉시 갱신&#10;        updateUI()&#10;    }&#10;&#10;    override fun handleNewIntent(intent: Intent?) {&#10;        // BaseActivity의 handleNewIntent 구현&#10;        updateUI()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        stopTimer()&#10;        timer = Timer()&#10;        timer?.scheduleAtFixedRate(object : TimerTask() {&#10;            override fun run() {&#10;                handler.post {&#10;                    updateTimeDisplay()&#10;                }&#10;            }&#10;        }, 0, 100)  // 100ms 간격으로 업데이트&#10;    }&#10;&#10;    private fun stopTimer() {&#10;        timer?.cancel()&#10;        timer = null&#10;    }&#10;&#10;    private fun updateTimeDisplay() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        // 목표가 이미 달성되었으면 타이머 업데이트를 중단&#10;        if (completionFlag) {&#10;            stopTimer()&#10;            return&#10;        }&#10;&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따른 시간 계산 - 대형 숫자 업데이트&#10;        val timePassed = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;        }&#10;&#10;        // 대형 숫자 실시간 업데이트 (특히 초 모드에서 중요)&#10;        tvDaysCount.text = timePassed.toString()&#10;&#10;        // 시간 계산&#10;        val hours = (secondsPassed / 3600) % 24&#10;&#10;        // 시간 표시 업데이트&#10;        tvHoursDisplay.text = String.format(&quot;%02d시간&quot;, hours)&#10;&#10;        // 테스트 모드별 시간 표시 업데이트&#10;        val timeText = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;        }&#10;&#10;        tvTimeDetail.text = timeText&#10;&#10;        // 진행 상태 확인 및 완료 처리&#10;        checkProgressStatus()&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StatusActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_status, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        tvDaysCount = view.findViewById(R.id.tvDaysCount)&#10;        tvTimeUnit = view.findViewById(R.id.tvTimeUnit)&#10;        tvMessage = view.findViewById(R.id.tvMessage)&#10;        progressLevel = view.findViewById(R.id.progressLevel)&#10;        tvTimeDetail = view.findViewById(R.id.tvTimeDetail)&#10;        tvHoursDisplay = view.findViewById(R.id.tvHoursDisplay) // 시간 표시 TextView 초기화&#10;        tvTimeDetail.text = &quot;00:00:00&quot;  // 초기값 변경&#10;&#10;        // 시간 단위 텍스트 설정&#10;        tvTimeUnit.text = Constants.TIME_UNIT_TEXT&#10;&#10;        // 중지 버튼 설정&#10;        val btnStopSobriety = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#10;        btnStopSobriety.setOnClickListener {&#10;            // 기존 AlertDialog 대신 커스텀 다이얼로그 사용&#10;            showCustomStopDialog()&#10;        }&#10;&#10;        // 최초 UI 업데이트&#10;        updateUI()&#10;    }&#10;&#10;    private fun displayTimeDetails(timePassed: Int, secondsPassed: Long) {&#10;        val timeText = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val seconds = secondsPassed % 60&#10;                val millis = (System.currentTimeMillis() % 1000) / 10&#10;                String.format(&quot;%02d:%02d&quot;, seconds, millis)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val minutes = secondsPassed / 60&#10;                val seconds = secondsPassed % 60&#10;                String.format(&quot;%02d:%02d&quot;, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val hours = (secondsPassed / 3600) % 24&#10;                val minutes = (secondsPassed / 60) % 60&#10;                String.format(&quot;%02d:%02d&quot;, hours, minutes)&#10;            }&#10;        }&#10;&#10;        tvTimeDetail.text = timeText&#10;    }&#10;&#10;    /**&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#10;     */&#10;    private fun updateUI() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        if (completionFlag) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;            progressLevel.progress = 100&#10;            return&#10;        }&#10;&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따른 시간 계산&#10;        val timePassed = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;        }&#10;&#10;        // 대형 숫자에 진행 중인 시간 표시&#10;        tvDaysCount.text = timePassed.toString()&#10;&#10;        // 진행률 계산&#10;        val targetSeconds = when {&#10;            Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;            Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;            else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;        }&#10;&#10;        val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;        progressLevel.progress = progress.coerceIn(0, 100)&#10;&#10;        // 타이머 표시 업데이트&#10;        updateTimeDisplay()&#10;&#10;        // 완료 조건 확인 - 초단위 테스트 모드에서는 초 단위로 비교&#10;        val isCompleted = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#10;            Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#10;            else -&gt; timePassed &gt; targetDays&#10;        }&#10;&#10;        if (isCompleted) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            progressLevel.progress = 100&#10;            handleGoalCompletion(targetDays)&#10;        } else {&#10;            // 남은 시간 계산 및 메시지 업데이트&#10;            val remainingTime = targetDays - timePassed + 1&#10;            tvMessage.text = &quot;목표까지 ${remainingTime}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;        }&#10;    }&#10;&#10;    private fun handleGoalCompletion(targetDays: Int) {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val endTime = System.currentTimeMillis()&#10;&#10;        with(sharedPref.edit()) {&#10;            putBoolean(&quot;timer_completed&quot;, true)&#10;            apply()&#10;        }&#10;&#10;        if (!goalAchievementChecked) {&#10;            goalAchievementChecked = true&#10;            // 타이머 즉시 중지&#10;            stopTimer()&#10;&#10;            // 완료된 기록을 먼저 저장&#10;            val recordId = saveCompletedRecord(startTime, endTime, targetDays, 1)&#10;&#10;            // 결과 화면 전환 지연 후 기록 요약 화면으로 이동&#10;            Handler(Looper.getMainLooper()).postDelayed({&#10;                // 활동 기록 저장&#10;                saveActivity(true)&#10;                // 기록 요약 화면으로 이동 (기록 ID 전달)&#10;                navigateToRecordSummary(recordId)&#10;            }, Constants.RESULT_SCREEN_DELAY.toLong())&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 완료된 금주 기록을 저장합니다&#10;     * @return 저장된 기록의 ID&#10;     */&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#10;        Log.d(&quot;StatusActivity&quot;, &quot;saveCompletedRecord 시작: startTime=$startTime, endTime=$endTime, targetDays=$targetDays&quot;)&#10;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 ID 생성&#10;        val recordId = System.currentTimeMillis()&#10;        Log.d(&quot;StatusActivity&quot;, &quot;생성된 recordId: $recordId&quot;)&#10;&#10;        // 테스트 모드일 때는 실제 경과 시간 대신 설정한 목표 시간을 그대로 사용&#10;        val achievedDays = if (Constants.isSecondTestMode || Constants.isMinuteTestMode) {&#10;            // 테스트 모드에서는 설정한 목표 시간 그대로 표시&#10;            targetDays&#10;        } else {&#10;            // 실제 모드에서만 실제 경과 시간 계산&#10;            ((endTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;        }&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;테스트 모드: ${Constants.isSecondTestMode}, 설정된 일수: $targetDays, 기록될 일수: $achievedDays&quot;)&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedDays = achievedDays, // 목표 시간을 그대로 사용&#10;            achievedLevel = level,&#10;            levelTitle = if (level &gt; 0 &amp;&amp; level &lt;= levelTitles.size) levelTitles[level - 1] else &quot;기본 레벨&quot;,&#10;            isCompleted = true&#10;        )&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;생성된 기록: $record&quot;)&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;기존 기록 JSON: $recordsJson&quot;)&#10;&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;        Log.d(&quot;StatusActivity&quot;, &quot;기존 기록 개수: ${records.size}&quot;)&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;새 기록 추가 후 총 개수: ${records.size}&quot;)&#10;&#10;        // 기록 저장&#10;        val newRecordsJson = SobrietyRecord.toJsonArray(records)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;저장할 JSON: $newRecordsJson&quot;)&#10;&#10;        with(sharedPref.edit()) {&#10;            putString(&quot;records&quot;, newRecordsJson)&#10;            val success = commit() // apply() 대신 commit()으로 즉시 저장&#10;            Log.d(&quot;StatusActivity&quot;, &quot;기록 저장 성공: $success&quot;)&#10;        }&#10;&#10;        // 저장 확인&#10;        val savedRecordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;저장 확인 JSON: $savedRecordsJson&quot;)&#10;&#10;        // 현재 진행중인 금주 데이터 초기화&#10;        with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;            clear()&#10;            apply()&#10;        }&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;saveCompletedRecord 완료, 반환 ID: $recordId&quot;)&#10;        return recordId&#10;    }&#10;&#10;    private fun saveActivity(isCompleted: Boolean) {&#10;        try {&#10;            val activity = RecentActivity(&#10;                startDate = abstainStartTime,&#10;                endDate = getCurrentDate(),&#10;                duration = calculateDuration(),&#10;                isCompleted = isCompleted&#10;            )&#10;            RecordManager.addActivity(activity)&#10;        } catch (e: Exception) {&#10;            // 날짜 파싱 오류 등이 발생하면 로그만 남기고 기본값 사용&#10;            android.util.Log.e(&quot;StatusActivity&quot;, &quot;Error saving activity: ${e.message}&quot;, e)&#10;            try {&#10;                val activity = RecentActivity(&#10;                    startDate = getCurrentDate(),&#10;                    endDate = getCurrentDate(),&#10;                    duration = 1,&#10;                    isCompleted = isCompleted&#10;                )&#10;                RecordManager.addActivity(activity)&#10;            } catch (fallbackError: Exception) {&#10;                android.util.Log.e(&quot;StatusActivity&quot;, &quot;Fallback save also failed: ${fallbackError.message}&quot;, fallbackError)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun onGoalCompleted() {&#10;        saveActivity(true)&#10;        navigateToRecords()&#10;    }&#10;&#10;    private fun stopAbstaining() {&#10;        saveActivity(false)&#10;        // ...existing stop logic...&#10;    }&#10;&#10;    private fun getCurrentDate(): String {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        return dateFormat.format(Date())&#10;    }&#10;&#10;    private fun calculateDuration(): Int {&#10;        return try {&#10;            if (abstainStartTime.isBlank()) {&#10;                // abstainStartTime이 비어있으면 SharedPreferences에서 시작 시간을 가져와서 계산&#10;                val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                val startTimeMillis = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;                val currentTime = System.currentTimeMillis()&#10;                val daysPassed = ((currentTime - startTimeMillis) / (1000 * 60 * 60 * 24)).toInt()&#10;                return daysPassed + 1&#10;            }&#10;&#10;            val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;            val startDate = dateFormat.parse(abstainStartTime)&#10;            val currentDate = Date()&#10;&#10;            if (startDate != null) {&#10;                ((currentDate.time - startDate.time) / (1000 * 60 * 60 * 24)).toInt() + 1&#10;            } else {&#10;                1 // 기본값&#10;            }&#10;        } catch (e: Exception) {&#10;            android.util.Log.e(&quot;StatusActivity&quot;, &quot;Error calculating duration: ${e.message}&quot;, e)&#10;            1 // 오류 발생 시 기본값 반환&#10;        }&#10;    }&#10;&#10;    private fun navigateToRecords() {&#10;        val intent = Intent(this, RecordsActivity::class.java)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun navigateToRecordSummary(recordId: Long) {&#10;        val intent = Intent(this, RecordSummaryActivity::class.java)&#10;        intent.putExtra(&quot;record_id&quot;, recordId)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    /**&#10;     * 눈에 잘 보이는 버튼이 있는 커스텀 중지 확인 다이얼로그를 표시합니다.&#10;     */&#10;    private fun showCustomStopDialog() {&#10;        // 커스텀 다이얼로그 생성&#10;        val dialog = android.app.Dialog(this)&#10;        dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#10;        dialog.setContentView(com.example.alcoholictimer.R.layout.dialog_stop_sobriety)&#10;&#10;        // 다이얼로그 배경을 투명하게 설정하고 외부 영역 클릭으로 닫히지 않게 설정&#10;        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)&#10;        dialog.setCancelable(false)&#10;&#10;        // 취소 버튼 클릭 리스너&#10;        val btnCancel = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnCancel)&#10;        btnCancel.setOnClickListener {&#10;            dialog.dismiss()&#10;        }&#10;&#10;        // 확인 버튼 클릭 리스너&#10;        val btnConfirm = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnConfirm)&#10;        btnConfirm.setOnClickListener {&#10;            dialog.dismiss()&#10;&#10;            // SharedPreferences 초기화&#10;            with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;                clear()&#10;                apply()&#10;            }&#10;&#10;            // 시작 화면으로 이동&#10;            val intent = Intent(this@StatusActivity, MainActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;            startActivity(intent)&#10;            finish()&#10;&#10;            // 토스트 메시지 표시&#10;            Toast.makeText(this@StatusActivity, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        // 다이얼로그 표시&#10;        dialog.show()&#10;    }&#10;&#10;    private fun navigateToStart() {&#10;        val intent = Intent(this, StartActivity::class.java)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;&#10;    private fun updateTimeModeDisplay() {&#10;        val timeUnitText = when {&#10;            Constants.isSecondTestMode -&gt; &quot;금주 목표 초수&quot;&#10;            Constants.isMinuteTestMode -&gt; &quot;금주 목표 분수&quot;&#10;            else -&gt; &quot;금주 목표 일수&quot;&#10;        }&#10;        tvTimeUnit.text = timeUnitText&#10;    }&#10;&#10;    /**&#10;     * 진행 상태를 확인하고 필요한 경우 목표 완료 처리를 합니다.&#10;     * 타이머에서 주기적으로 호출됩니다.&#10;     */&#10;    private fun checkProgressStatus() {&#10;        try {&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;            val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;            val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;            if (completionFlag) {&#10;                return  // 이미 완료된 상태면 처리하지 않음&#10;            }&#10;&#10;            val currentTime = System.currentTimeMillis()&#10;            val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;            // 진행률 계산&#10;            val targetSeconds = when {&#10;                Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;                Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;                else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;            }&#10;&#10;            // 진행률이 100을 초과하지 않도록 제한&#10;            val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;            val safeProgress = progress.coerceIn(0, 100)&#10;&#10;            // UI 업데이트는 runOnUiThread 내에서 수행&#10;            runOnUiThread {&#10;                progressLevel.progress = safeProgress&#10;&#10;                // 완료 조건 확인&#10;                val isCompleted = when {&#10;                    Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#10;                    Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#10;                    else -&gt; secondsPassed &gt;= (targetDays * 24 * 60 * 60)&#10;                }&#10;&#10;                if (isCompleted &amp;&amp; !goalAchievementChecked) {&#10;                    tvDaysCount.text = targetDays.toString()&#10;                    tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;                    progressLevel.progress = 100&#10;                    handleGoalCompletion(targetDays)&#10;                } else if (!isCompleted) {&#10;                    // 남은 시간 계산 및 메시지 업데이트&#10;                    val timePassed = when {&#10;                        Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;                        Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;                        else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;                    }&#10;                    val remainingTime = targetDays - timePassed + 1&#10;                    if (remainingTime &gt; 0) {&#10;                        tvMessage.text = &quot;목표까지 ${remainingTime}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;                    } else {&#10;                        tvMessage.text = &quot;목표 달성이 임박했습니다!&quot;&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            // 에러 발생 시 로그만 남기고 앱은 계속 실행&#10;            android.util.Log.e(&quot;StatusActivity&quot;, &quot;Error in checkProgressStatus: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 금주 시작 시간을 초기화합니다.&#10;     */&#10;    private fun initAbstainStartTime() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTimeMillis = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        abstainStartTime = dateFormat.format(Date(startTimeMillis))&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.model.RecentActivity&#10;&#10;class RecentActivityAdapter : RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;    private val activities = ArrayList&lt;RecentActivity&gt;()&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val ivActivityIcon: ImageView = itemView.findViewById(R.id.ivActivityIcon)&#10;        val tvEndDate: TextView = itemView.findViewById(R.id.tvEndDate)&#10;        val tvActivityTitle: TextView = itemView.findViewById(R.id.tvActivityTitle)&#10;        val tvDuration: TextView = itemView.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val tvSavedMoney: TextView = itemView.findViewById(R.id.tvSavedMoney)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        &#10;        holder.tvEndDate.text = activity.endDate&#10;        holder.tvActivityTitle.text = activity.title&#10;        holder.tvDuration.text = &quot;${activity.duration}일 ${activity.hours}시간&quot;&#10;        holder.tvStatus.text = if(activity.isSuccess) &quot;성공&quot; else &quot;실패&quot;&#10;        holder.tvSavedMoney.text = &quot;${activity.savedMoney}만원 절약&quot;&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;&#10;    fun updateActivities(newActivities: List&lt;RecentActivity&gt;) {&#10;        activities.clear()&#10;        activities.addAll(newActivities.take(5)) // 최대 5개까지만 표시&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer.utils&#10;&#10;import android.content.Context&#10;&#10;object Constants {&#10;    // SharedPreferences 관련 상수&#10;    const val PREFS_NAME = &quot;AlcoholicTimerPrefs&quot;&#10;    const val PREF_KEY_TEST_MODE = &quot;test_mode&quot;&#10;    const val PREF_TEST_MODE = &quot;test_mode&quot;&#10;    const val PREF_START_TIME = &quot;start_time&quot;&#10;    const val PREF_TARGET_DAYS = &quot;target_days&quot;&#10;    const val PREF_RECORDS = &quot;records&quot;&#10;&#10;    // 테스트 모드 상수&#10;    const val TEST_MODE_REAL = 0    // 실제 모드 (1일 = 24시간)&#10;    const val TEST_MODE_MINUTE = 1  // 분 단위 테스트 모드 (1일 = 1분)&#10;    const val TEST_MODE_SECOND = 2  // 초 단위 테스트 모드 (1일 = 1초)&#10;&#10;    // 현재 선택된 테스트 모드 (기본값: 실제 모드)&#10;    var currentTestMode = TEST_MODE_REAL&#10;&#10;    // 테스트 모드 상태 (런타임에 변경 가능)&#10;    val isTestMode: Boolean&#10;        get() = currentTestMode != TEST_MODE_REAL&#10;&#10;    val isSecondTestMode: Boolean&#10;        get() = currentTestMode == TEST_MODE_SECOND&#10;&#10;    val isMinuteTestMode: Boolean&#10;        get() = currentTestMode == TEST_MODE_MINUTE&#10;&#10;    // 시간 변환 상수&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#10;&#10;    // 기타 상수&#10;    const val DEFAULT_VALUE = 2000                   // 기본값 2000&#10;&#10;    // 사용할 시간 단위 (테스트 모드에 따라 동적으로 결정)&#10;    val TIME_UNIT_MILLIS: Long&#10;        get() = when (currentTestMode) {&#10;            TEST_MODE_SECOND -&gt; SECOND_IN_MILLIS  // 초 단위 테스트 (1초 = 1일)&#10;            TEST_MODE_MINUTE -&gt; MINUTE_IN_MILLIS  // 분 단위 테스트 (1분 = 1일)&#10;            else -&gt; DAY_IN_MILLIS                 // 실제 일 단위 (1일 = 24시간)&#10;        }&#10;&#10;    // 프로그레스바용 시간 단위 (테스트 모드와 동일하게 설정)&#10;    val PROGRESS_TIME_UNIT_MILLIS: Long&#10;        get() = TIME_UNIT_MILLIS&#10;&#10;    // 단위 텍스트&#10;    val TIME_UNIT_TEXT: String&#10;        get() = when (currentTestMode) {&#10;            TEST_MODE_SECOND -&gt; &quot;초&quot;  // 초 단위 테스트 시 표시 텍스트&#10;            TEST_MODE_MINUTE -&gt; &quot;분&quot;  // 분 단위 테스트 시 표시 텍스트&#10;            else -&gt; &quot;일&quot;              // 실제 모드 시 표시 텍스트&#10;        }&#10;&#10;    // 앱 시작 시 설정 불러오기&#10;    fun init(context: Context) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        currentTestMode = prefs.getInt(PREF_KEY_TEST_MODE, TEST_MODE_REAL)&#10;    }&#10;&#10;    // 테스트 모드 업데이트&#10;    fun updateTestMode(mode: Int) {&#10;        currentTestMode = mode&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#10;&#10;import android.content.Context&#10;&#10;object Constants {&#10;    // SharedPreferences 관련 상수&#10;    const val PREFS_NAME = &quot;AlcoholicTimerPrefs&quot;&#10;    const val PREF_KEY_TEST_MODE = &quot;test_mode&quot;&#10;    const val PREF_TEST_MODE = &quot;test_mode&quot;&#10;    const val PREF_START_TIME = &quot;start_time&quot;&#10;    const val PREF_TARGET_DAYS = &quot;target_days&quot;&#10;    const val PREF_RECORDS = &quot;records&quot;&#10;&#10;    // 테스트 모드 상수&#10;    const val TEST_MODE_REAL = 0    // 실제 모드 (1일 = 24시간)&#10;    const val TEST_MODE_MINUTE = 1  // 분 단위 테스트 모드 (1일 = 1분)&#10;    const val TEST_MODE_SECOND = 2  // 초 단위 테스트 모드 (1일 = 1초)&#10;&#10;    // 현재 선택된 테스트 모드 (기본값: 실제 모드)&#10;    var currentTestMode = TEST_MODE_REAL&#10;&#10;    // 테스트 모드 상태 (런타임에 변경 가능)&#10;    val isTestMode: Boolean&#10;        get() = currentTestMode != TEST_MODE_REAL&#10;&#10;    val isSecondTestMode: Boolean&#10;        get() = currentTestMode == TEST_MODE_SECOND&#10;&#10;    val isMinuteTestMode: Boolean&#10;        get() = currentTestMode == TEST_MODE_MINUTE&#10;&#10;    // 시간 변환 상수&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#10;&#10;    // UI 관련 상수&#10;    const val RESULT_SCREEN_DELAY = 2000             // 결과 화면 전환 지연 시간 (2초)&#10;&#10;    // 기타 상수&#10;    const val DEFAULT_VALUE = 2000                   // 기본값 2000&#10;&#10;    // 사용할 시간 단위 (테스트 모드에 따라 동적으로 결정)&#10;    val TIME_UNIT_MILLIS: Long&#10;        get() = when (currentTestMode) {&#10;            TEST_MODE_SECOND -&gt; SECOND_IN_MILLIS  // 초 단위 테스트 (1초 = 1일)&#10;            TEST_MODE_MINUTE -&gt; MINUTE_IN_MILLIS  // 분 단위 테스트 (1분 = 1일)&#10;            else -&gt; DAY_IN_MILLIS                 // 실제 일 단위 (1일 = 24시간)&#10;        }&#10;&#10;    // 프로그레스바용 시간 단위 (테스트 모드와 동일하게 설정)&#10;    val PROGRESS_TIME_UNIT_MILLIS: Long&#10;        get() = TIME_UNIT_MILLIS&#10;&#10;    // 단위 텍스트&#10;    val TIME_UNIT_TEXT: String&#10;        get() = when (currentTestMode) {&#10;            TEST_MODE_SECOND -&gt; &quot;초&quot;  // 초 단위 테스트 시 표시 텍스트&#10;            TEST_MODE_MINUTE -&gt; &quot;분&quot;  // 분 단위 테스트 시 표시 텍스트&#10;            else -&gt; &quot;일&quot;              // 실제 모드 시 표시 텍스트&#10;        }&#10;&#10;    // 앱 시작 시 설정 불러오기&#10;    fun init(context: Context) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        currentTestMode = prefs.getInt(PREF_KEY_TEST_MODE, TEST_MODE_REAL)&#10;    }&#10;&#10;    // 테스트 모드 업데이트&#10;    fun updateTestMode(mode: Int) {&#10;        currentTestMode = mode&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_record_summary.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_record_summary.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;#FFFFFF&quot;&#10;    android:padding=&quot;24dp&quot;&gt;&#10;&#10;    &lt;!-- 헤더 부분: id 추가 --&gt;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvRecordTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;8월의 금주&quot;&#10;        android:textSize=&quot;20sp&quot;&#10;        android:textColor=&quot;#000000&quot;&#10;        android:paddingBottom=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;&#10;            &lt;!-- 금주 기간 카드 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:background=&quot;@android:color/white&quot;&#10;                android:padding=&quot;20dp&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                style=&quot;@style/CardBorder&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;금주 기간&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textColor=&quot;#666666&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;!-- Horizontal Divider --&gt;&#10;                &lt;View&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;1dp&quot;&#10;                    android:background=&quot;#E0E0E0&quot;&#10;                    android:layout_marginTop=&quot;4dp&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvDuration&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;7일 12시간&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textColor=&quot;#000000&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- 금주 일정 카드 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:background=&quot;@android:color/white&quot;&#10;                android:padding=&quot;20dp&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                style=&quot;@style/CardBorder&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;금주 일정&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textColor=&quot;#666666&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvPeriod&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;2025-01-01 ~ 2025-01-08&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textColor=&quot;#000000&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- 달성률 카드 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:background=&quot;@android:color/white&quot;&#10;                android:padding=&quot;20dp&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                style=&quot;@style/CardBorder&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;달성률&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textColor=&quot;#666666&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvAchievementRate&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;100%&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textColor=&quot;#4CAF50&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- 절약 금액 카드 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:background=&quot;@android:color/white&quot;&#10;                android:padding=&quot;20dp&quot;&#10;                android:layout_marginBottom=&quot;32dp&quot;&#10;                style=&quot;@style/CardBorder&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;절약 금액&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textColor=&quot;#666666&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvSavedMoney&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;25만원&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textColor=&quot;#FF9800&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/ScrollView&gt;&#10;&#10;    &lt;!-- 하단 버튼 --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnConfirm&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;56dp&quot;&#10;        android:text=&quot;확인&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textColor=&quot;#FFFFFF&quot;&#10;        android:background=&quot;#000000&quot;&#10;        android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;#FFFFFF&quot;&#10;    android:padding=&quot;24dp&quot;&gt;&#10;&#10;    &lt;!-- 헤더 부분: 뒤로가기 버튼과 제목 --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:paddingBottom=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- 뒤로가기 버튼 --&gt;&#10;        &lt;ImageButton&#10;            android:id=&quot;@+id/btnBack&quot;&#10;            android:layout_width=&quot;40dp&quot;&#10;            android:layout_height=&quot;40dp&quot;&#10;            android:background=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;            android:src=&quot;@android:drawable/ic_menu_revert&quot;&#10;            android:contentDescription=&quot;뒤로가기&quot;&#10;            android:layout_marginEnd=&quot;12dp&quot;&#10;            android:tint=&quot;#000000&quot; /&gt;&#10;&#10;        &lt;!-- 제목 --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvRecordTitle&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;8월의 금주&quot;&#10;            android:textSize=&quot;20sp&quot;&#10;            android:textColor=&quot;#000000&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;ScrollView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;0dp&quot;&#10;        android:layout_weight=&quot;1&quot;&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&gt;&#10;&#10;&#10;            &lt;!-- 금주 기간 카드 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:background=&quot;@android:color/white&quot;&#10;                android:padding=&quot;20dp&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                style=&quot;@style/CardBorder&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;금주 기간&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textColor=&quot;#666666&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;!-- Horizontal Divider --&gt;&#10;                &lt;View&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;1dp&quot;&#10;                    android:background=&quot;#E0E0E0&quot;&#10;                    android:layout_marginTop=&quot;4dp&quot;&#10;                    android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvDuration&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;7일 12시간&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textColor=&quot;#000000&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- 금주 일정 카드 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:background=&quot;@android:color/white&quot;&#10;                android:padding=&quot;20dp&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                style=&quot;@style/CardBorder&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;금주 일정&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textColor=&quot;#666666&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvPeriod&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;2025-01-01 ~ 2025-01-08&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textColor=&quot;#000000&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- 달성률 카드 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:background=&quot;@android:color/white&quot;&#10;                android:padding=&quot;20dp&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&#10;                style=&quot;@style/CardBorder&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;달성률&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textColor=&quot;#666666&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvAchievementRate&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;100%&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textColor=&quot;#4CAF50&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- 절약 금액 카드 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:background=&quot;@android:color/white&quot;&#10;                android:padding=&quot;20dp&quot;&#10;                android:layout_marginBottom=&quot;32dp&quot;&#10;                style=&quot;@style/CardBorder&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;절약 금액&quot;&#10;                    android:textSize=&quot;16sp&quot;&#10;                    android:textColor=&quot;#666666&quot;&#10;                    android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvSavedMoney&quot;&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;25만원&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textColor=&quot;#FF9800&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/ScrollView&gt;&#10;&#10;    &lt;!-- 하단 버튼 --&gt;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnConfirm&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;56dp&quot;&#10;        android:text=&quot;확인&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textColor=&quot;#FFFFFF&quot;&#10;        android:background=&quot;#000000&quot;&#10;        android:layout_marginTop=&quot;16dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>