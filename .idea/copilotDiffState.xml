<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    package=&quot;com.example.alcoholictimer&quot;&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.AlcoholicApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:launchMode=&quot;singleTask&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StartActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:launchMode=&quot;singleTop&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StatusActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:launchMode=&quot;singleTop&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RecordsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RecordSummaryActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ChallengeActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MessageActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.DetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.NotificationActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SettingsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:label=&quot;설정&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    package=&quot;com.example.alcoholictimer&quot;&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.AlcoholicApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:launchMode=&quot;singleTask&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StartActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:launchMode=&quot;singleTop&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StatusActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:launchMode=&quot;singleTop&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RecordsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ChallengeActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MessageActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.DetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.NotificationActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SettingsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:label=&quot;설정&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/DetailActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/DetailActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class DetailActivity : AppCompatActivity() {&#10;&#10;    private lateinit var btnBack: TextView&#10;    private lateinit var tvDateTime: TextView&#10;    private lateinit var tvRecordTitle: TextView&#10;    private lateinit var tvMainNumber: TextView&#10;    private lateinit var tvMainUnit: TextView&#10;    private lateinit var tvTotalDays: TextView&#10;    private lateinit var tvLevel: TextView&#10;    private lateinit var tvSavedMoney: TextView&#10;    private lateinit var tvEncouragementMessage: TextView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_detail)&#10;&#10;        initViews()&#10;        setupClickListeners()&#10;        loadRecordData()&#10;    }&#10;&#10;    private fun initViews() {&#10;        btnBack = findViewById(R.id.btnBack)&#10;        tvDateTime = findViewById(R.id.tvDateTime)&#10;        tvRecordTitle = findViewById(R.id.tvRecordTitle)&#10;        tvMainNumber = findViewById(R.id.tvMainNumber)&#10;        tvMainUnit = findViewById(R.id.tvMainUnit)&#10;        tvTotalDays = findViewById(R.id.tvTotalDays)&#10;        tvLevel = findViewById(R.id.tvLevel)&#10;        tvSavedMoney = findViewById(R.id.tvSavedMoney)&#10;        tvEncouragementMessage = findViewById(R.id.tvEncouragementMessage)&#10;    }&#10;&#10;    private fun setupClickListeners() {&#10;        btnBack.setOnClickListener {&#10;            // 메인 화면으로 돌아가기&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun loadRecordData() {&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1)&#10;&#10;        if (recordId != -1L) {&#10;            // SharedPreferences에서 기록 데이터 로드&#10;            val prefs = getSharedPreferences(&quot;abstain_records&quot;, MODE_PRIVATE)&#10;            val startTime = prefs.getLong(&quot;start_time_$recordId&quot;, 0)&#10;            val endTime = prefs.getLong(&quot;end_time_$recordId&quot;, 0)&#10;            val targetDays = prefs.getInt(&quot;target_days_$recordId&quot;, 0)&#10;            val testMode = prefs.getInt(&quot;test_mode_$recordId&quot;, Constants.TEST_MODE_REAL)&#10;&#10;            displayRecordData(startTime, endTime, targetDays, testMode)&#10;        }&#10;    }&#10;&#10;    private fun displayRecordData(startTime: Long, endTime: Long, targetDays: Int, testMode: Int) {&#10;        // 현재 날짜/시간 표시&#10;        val currentTime = SimpleDateFormat(&quot;M월 d일 - a h:mm&quot;, Locale.KOREA)&#10;        tvDateTime.text = currentTime.format(Date())&#10;&#10;        // 기록 제목 생성&#10;        val calendar = Calendar.getInstance()&#10;        val month = calendar.get(Calendar.MONTH) + 1&#10;        val weekOfMonth = calendar.get(Calendar.WEEK_OF_MONTH)&#10;        tvRecordTitle.text = &quot;${month}월 ${weekOfMonth}주 금주 기록&quot;&#10;&#10;        // 메인 숫자와 단위 설정 - 초 단위 테스트 모드에서는 1초 = 1일로 표시&#10;        tvMainNumber.text = targetDays.toString()&#10;&#10;        val unitText = when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; &quot;일&quot;  // 초 단위 테스트에서도 &quot;일&quot;로 표시&#10;            Constants.TEST_MODE_MINUTE -&gt; &quot;분&quot;&#10;            else -&gt; &quot;일&quot;&#10;        }&#10;        tvMainUnit.text = unitText&#10;&#10;        // 통계 정보 설정 - 초 단위 테스트에서도 &quot;일&quot; 단위로 표시&#10;        tvTotalDays.text = &quot;총 ${targetDays}일&quot;&#10;&#10;        // 레벨 계산&#10;        val level = calculateLevel(targetDays, testMode)&#10;        tvLevel.text = &quot;Level $level&quot;&#10;&#10;        // 절약 금액 계산 - 초 단위 테스트에서도 일 단위 금액으로 계산&#10;        val savedAmount = when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; targetDays * 2000  // 1초 = 1일이므로 일당 2,000원&#10;            Constants.TEST_MODE_MINUTE -&gt; targetDays * 100   // 분당 100원&#10;            else -&gt; targetDays * 2000  // 일당 2,000원&#10;        }&#10;        tvSavedMoney.text = String.format(&quot;%,d원&quot;, savedAmount)&#10;&#10;        // 응원 메시지 설정 - 초 단위 테스트에서도 &quot;일&quot; 단위로 메시지 표시&#10;        val encouragementMessage = getEncouragementMessage(level, targetDays, &quot;일&quot;)&#10;        tvEncouragementMessage.text = &quot;\&quot;$encouragementMessage\&quot;&quot;&#10;    }&#10;&#10;    private fun calculateLevel(targetDays: Int, testMode: Int): Int {&#10;        return when (testMode) {&#10;            Constants.TEST_MODE_SECOND -&gt; {&#10;                when {&#10;                    targetDays &gt;= 180 -&gt; 7  // 3분&#10;                    targetDays &gt;= 120 -&gt; 6  // 2분&#10;                    targetDays &gt;= 90 -&gt; 5   // 1분 30초&#10;                    targetDays &gt;= 60 -&gt; 4   // 1분&#10;                    targetDays &gt;= 30 -&gt; 3   // 30초&#10;                    targetDays &gt;= 14 -&gt; 2   // 14초&#10;                    targetDays &gt;= 7 -&gt; 1    // 7초&#10;                    else -&gt; 1&#10;                }&#10;            }&#10;            Constants.TEST_MODE_MINUTE -&gt; {&#10;                when {&#10;                    targetDays &gt;= 30 -&gt; 7   // 30분&#10;                    targetDays &gt;= 20 -&gt; 6   // 20분&#10;                    targetDays &gt;= 15 -&gt; 5   // 15분&#10;                    targetDays &gt;= 10 -&gt; 4   // 10분&#10;                    targetDays &gt;= 5 -&gt; 3    // 5분&#10;                    targetDays &gt;= 2 -&gt; 2    // 2분&#10;                    targetDays &gt;= 1 -&gt; 1    // 1분&#10;                    else -&gt; 1&#10;                }&#10;            }&#10;            else -&gt; {&#10;                when {&#10;                    targetDays &gt;= 365 -&gt; 7  // 1년&#10;                    targetDays &gt;= 240 -&gt; 6  // 8개월&#10;                    targetDays &gt;= 120 -&gt; 5  // 4개월&#10;                    targetDays &gt;= 60 -&gt; 4   // 2개월&#10;                    targetDays &gt;= 30 -&gt; 3   // 1개월&#10;                    targetDays &gt;= 14 -&gt; 2   // 2주&#10;                    targetDays &gt;= 7 -&gt; 1    // 1주&#10;                    else -&gt; 1&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun getEncouragementMessage(level: Int, targetDays: Int, unit: String): String {&#10;        return when (level) {&#10;            1 -&gt; &quot;첫걸음 성공! 계속 도전하세요.&quot;&#10;            2 -&gt; &quot;${targetDays}${unit} 달성! 좋은 습관이 만들어지고 있어요.&quot;&#10;            3 -&gt; &quot;정말 대단해요! ${targetDays}${unit}를 완주하셨군요!&quot;&#10;            4 -&gt; &quot;놀라운 의지력이에요! 계속해서 건강한 생활을 유지하세요.&quot;&#10;            5 -&gt; &quot;정말 자랑스러워요! ${targetDays}${unit}는 쉽지 않은 도전이었을 텐데요.&quot;&#10;            6 -&gt; &quot;대단한 성취입니다! 당신의 의지력에 박수를 보냅니다.&quot;&#10;            7 -&gt; &quot;완벽한 도전 완수! 당신은 진정한 금주 마스터입니다! &quot;&#10;            else -&gt; &quot;훌륭한 도전이었습니다!&quot;&#10;        }&#10;    }&#10;&#10;    override fun onBackPressed() {&#10;        // 시스템 뒤로가기 버튼도 같은 동작&#10;        val intent = Intent(this, MainActivity::class.java)&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;class DetailActivity : AppCompatActivity() {&#10;&#10;    private lateinit var btnBack: TextView&#10;    private lateinit var tvDateTime: TextView&#10;    private lateinit var tvRecordTitle: TextView&#10;    private lateinit var tvMainNumber: TextView&#10;    private lateinit var tvMainUnit: TextView&#10;    private lateinit var tvTotalDays: TextView&#10;    private lateinit var tvLevel: TextView&#10;    private lateinit var tvSavedMoney: TextView&#10;    private lateinit var tvEncouragementMessage: TextView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_detail)&#10;&#10;        initViews()&#10;        setupClickListeners()&#10;        loadRecordData()&#10;    }&#10;&#10;    private fun initViews() {&#10;        btnBack = findViewById(R.id.btnBack)&#10;        tvDateTime = findViewById(R.id.tvDateTime)&#10;        tvRecordTitle = findViewById(R.id.tvRecordTitle)&#10;        tvMainNumber = findViewById(R.id.tvMainNumber)&#10;        tvMainUnit = findViewById(R.id.tvMainUnit)&#10;        tvTotalDays = findViewById(R.id.tvTotalDays)&#10;        tvLevel = findViewById(R.id.tvLevel)&#10;        tvSavedMoney = findViewById(R.id.tvSavedMoney)&#10;        tvEncouragementMessage = findViewById(R.id.tvEncouragementMessage)&#10;    }&#10;&#10;    private fun setupClickListeners() {&#10;        btnBack.setOnClickListener {&#10;            // 메인 화면으로 돌아가기&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;    }&#10;&#10;    private fun loadRecordData() {&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1)&#10;&#10;        if (recordId != -1L) {&#10;            // SharedPreferences에서 저장된 모든 기록을 로드&#10;            val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;            val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;            &#10;            if (!recordsJson.isNullOrEmpty()) {&#10;                try {&#10;                    val records = com.example.alcoholictimer.utils.SobrietyRecord.fromJsonArray(recordsJson)&#10;                    // recordId로 해당 기록 찾기&#10;                    val targetRecord = records.find { it.id == recordId }&#10;                    &#10;                    if (targetRecord != null) {&#10;                        // 찾은 기록으로 화면 표시&#10;                        displayRecordFromSobrietyRecord(targetRecord)&#10;                    } else {&#10;                        // 기록을 찾지 못한 경우 기본값으로 표시&#10;                        displayDefaultRecord()&#10;                    }&#10;                } catch (e: Exception) {&#10;                    // JSON 파싱 오류 시 기본값으로 표시&#10;                    displayDefaultRecord()&#10;                }&#10;            } else {&#10;                // 기록이 없는 경우 기본값으로 표시&#10;                displayDefaultRecord()&#10;            }&#10;        } else {&#10;            // recordId가 없는 경우 기본값으로 표시&#10;            displayDefaultRecord()&#10;        }&#10;    }&#10;&#10;    private fun displayRecordFromSobrietyRecord(record: com.example.alcoholictimer.utils.SobrietyRecord) {&#10;        // 현재 날짜/시간 표시&#10;        val currentTime = SimpleDateFormat(&quot;M월 d일 - a h:mm&quot;, Locale.KOREA)&#10;        tvDateTime.text = currentTime.format(Date())&#10;&#10;        // 기록 제목 생성&#10;        val calendar = Calendar.getInstance()&#10;        val month = calendar.get(Calendar.MONTH) + 1&#10;        val weekOfMonth = calendar.get(Calendar.WEEK_OF_MONTH)&#10;        tvRecordTitle.text = &quot;${month}월 ${weekOfMonth}주 금주 기록&quot;&#10;&#10;        // 메인 숫자와 단위 설정 (항상 &quot;일&quot;로 표시)&#10;        tvMainNumber.text = record.duration.toString()&#10;        tvMainUnit.text = &quot;일&quot;&#10;&#10;        // 통계 정보 설정&#10;        tvTotalDays.text = &quot;총 ${record.duration}일&quot;&#10;        tvLevel.text = &quot;Level ${record.achievedLevel}&quot;&#10;&#10;        // 절약 금액 계산 (일당 2,000원)&#10;        val savedAmount = record.duration * 2000&#10;        tvSavedMoney.text = String.format(&quot;%,d원&quot;, savedAmount)&#10;&#10;        // 응원 메시지 설정&#10;        val encouragementMessage = getEncouragementMessage(record.achievedLevel, record.duration, &quot;일&quot;)&#10;        tvEncouragementMessage.text = &quot;\&quot;$encouragementMessage\&quot;&quot;&#10;    }&#10;&#10;    private fun displayDefaultRecord() {&#10;        // 기본값으로 화면 표시&#10;        val currentTime = SimpleDateFormat(&quot;M월 d일 - a h:mm&quot;, Locale.KOREA)&#10;        tvDateTime.text = currentTime.format(Date())&#10;        &#10;        val calendar = Calendar.getInstance()&#10;        val month = calendar.get(Calendar.MONTH) + 1&#10;        val weekOfMonth = calendar.get(Calendar.WEEK_OF_MONTH)&#10;        tvRecordTitle.text = &quot;${month}월 ${weekOfMonth}주 금주 기록&quot;&#10;        &#10;        tvMainNumber.text = &quot;7&quot;&#10;        tvMainUnit.text = &quot;일&quot;&#10;        tvTotalDays.text = &quot;총 7일&quot;&#10;        tvLevel.text = &quot;Level 1&quot;&#10;        tvSavedMoney.text = &quot;14,000원&quot;&#10;        tvEncouragementMessage.text = &quot;\&quot;첫걸음 성공! 계속 도전하세요.\&quot;&quot;&#10;    }&#10;&#10;    private fun getEncouragementMessage(level: Int, targetDays: Int, unit: String): String {&#10;        return when (level) {&#10;            1 -&gt; &quot;첫걸음 성공! 계속 도전하세요.&quot;&#10;            2 -&gt; &quot;${targetDays}${unit} 달성! 좋은 습관이 만들어지고 있어요.&quot;&#10;            3 -&gt; &quot;정말 대단해요! ${targetDays}${unit}를 완주하셨군요!&quot;&#10;            4 -&gt; &quot;놀라운 의지력이에요! 계속해서 건강한 생활을 유지하세요.&quot;&#10;            5 -&gt; &quot;정말 자랑스러워요! ${targetDays}${unit}는 쉽지 않은 도전이었을 텐데요.&quot;&#10;            6 -&gt; &quot;대단한 성취입니다! 당신의 의지력에 박수를 보냅니다.&quot;&#10;            7 -&gt; &quot;완벽한 도전 완수! 당신은 진정한 금주 마스터입니다! &quot;&#10;            else -&gt; &quot;훌륭한 도전이었습니다!&quot;&#10;        }&#10;    }&#10;&#10;    @Deprecated(&quot;Use onBackPressedDispatcher instead&quot;)&#10;    override fun onBackPressed() {&#10;        // 시스템 뒤로가기 버튼도 같은 동작&#10;        val intent = Intent(this, MainActivity::class.java)&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java" />
              <option name="updatedContent" value="package com.example.alcoholictimer;&#10;&#10;import android.os.Bundle;&#10;import android.widget.TextView;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import java.util.Calendar;&#10;&#10;public class RecordSummaryActivity extends AppCompatActivity {&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_record_summary);&#10;&#10;        // ...existing code...&#10;&#10;        TextView tvRecordTitle = findViewById(R.id.tvRecordTitle);&#10;        // 예시: 현재 월을 기록 종료 시점의 월로 사용합니다.&#10;        int month = Calendar.getInstance().get(Calendar.MONTH) + 1;&#10;        tvRecordTitle.setText(String.format(&quot;%d월의 금주&quot;, month));&#10;&#10;        // ...existing code...&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordsActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.graphics.Color&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.FrameLayout&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.adapters.LevelHistoryAdapter&#10;import com.example.alcoholictimer.adapters.RecentActivityAdapter&#10;import com.example.alcoholictimer.models.LevelHistoryItem&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import com.example.alcoholictimer.utils.RecentActivityManager&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;import java.time.temporal.ChronoUnit&#10;import java.time.temporal.WeekFields&#10;import java.util.Locale&#10;&#10;class RecordsActivity : BaseActivity() {&#10;&#10;    private lateinit var tvWeeklyCount: TextView&#10;    private lateinit var tvMonthlyCount: TextView&#10;    private lateinit var tvTotalCount: TextView&#10;    private lateinit var tvSummary: TextView&#10;    private lateinit var tvPeriodSummary: TextView&#10;    private lateinit var tvTotalAbstinence: TextView&#10;    private lateinit var tvLongestStreak: TextView&#10;    private lateinit var tvLastFailure: TextView&#10;    private lateinit var chartContainer: FrameLayout&#10;    private lateinit var rvLevelHistory: RecyclerView&#10;    private lateinit var rvRecentActivities: RecyclerView&#10;&#10;    private lateinit var btnWeek: TextView&#10;    private lateinit var btnMonth: TextView&#10;    private lateinit var btnYear: TextView&#10;    private lateinit var btnAll: TextView&#10;&#10;    private lateinit var recentActivityAdapter: RecentActivityAdapter&#10;&#10;    private var startDate: LocalDate? = null&#10;    private var currentPeriod = Period.MONTH  // 기본값을 월로 변경&#10;&#10;    private enum class Period {&#10;        WEEK, MONTH, YEAR, ALL&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 데이터 로드 및 표시&#10;        loadAndDisplayData()&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // RecordsActivity의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.activity_records, contentFrame, true)&#10;&#10;        // View 초기화&#10;        initViews(view)&#10;&#10;        // 버튼 클릭 리스너 설정&#10;        setupButtonListeners()&#10;&#10;        // 초기 UI 상태를 월 기준으로 설정 (뷰 초기화 후에 호출)&#10;        updatePeriodUI()&#10;    }&#10;&#10;    private fun initViews(view: View) {&#10;        tvWeeklyCount = view.findViewById(R.id.tvWeeklyCount)&#10;        tvMonthlyCount = view.findViewById(R.id.tvMonthlyCount)&#10;        tvTotalCount = view.findViewById(R.id.tvTotalCount)&#10;        tvSummary = view.findViewById(R.id.tvSummary)&#10;        tvPeriodSummary = view.findViewById(R.id.tvPeriodSummary)&#10;        tvTotalAbstinence = view.findViewById(R.id.tvTotalAbstinence)&#10;        tvLongestStreak = view.findViewById(R.id.tvLongestStreak)&#10;        tvLastFailure = view.findViewById(R.id.tvLastFailure)&#10;        chartContainer = view.findViewById(R.id.chartContainer)&#10;        rvLevelHistory = view.findViewById(R.id.rvLevelHistory)&#10;&#10;        btnWeek = view.findViewById(R.id.btnWeek)&#10;        btnMonth = view.findViewById(R.id.btnMonth)&#10;        btnYear = view.findViewById(R.id.btnYear)&#10;        btnAll = view.findViewById(R.id.btnAll)&#10;&#10;        // RecyclerView 설정&#10;        rvLevelHistory.layoutManager = LinearLayoutManager(this)&#10;&#10;        // 최근 활동 RecyclerView 초기화&#10;        rvRecentActivities = view.findViewById(R.id.rvRecentActivities)&#10;        rvRecentActivities.layoutManager = LinearLayoutManager(this)&#10;    }&#10;&#10;    private fun setupButtonListeners() {&#10;        btnWeek.setOnClickListener {&#10;            currentPeriod = Period.WEEK&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnMonth.setOnClickListener {&#10;            currentPeriod = Period.MONTH&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnYear.setOnClickListener {&#10;            currentPeriod = Period.YEAR&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnAll.setOnClickListener {&#10;            currentPeriod = Period.ALL&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;    }&#10;&#10;    private fun updatePeriodUI() {&#10;        // 모든 탭 선택 해제&#10;        btnWeek.isSelected = false&#10;        btnMonth.isSelected = false&#10;        btnYear.isSelected = false&#10;        btnAll.isSelected = false&#10;&#10;        // 선택된 탭 표시&#10;        when(currentPeriod) {&#10;            Period.WEEK -&gt; {&#10;                btnWeek.isSelected = true&#10;                tvPeriodSummary.text = &quot;선택 기간: 주&quot;&#10;            }&#10;            Period.MONTH -&gt; {&#10;                btnMonth.isSelected = true&#10;                tvPeriodSummary.text = &quot;선택 기간: 월&quot;&#10;            }&#10;            Period.YEAR -&gt; {&#10;                btnYear.isSelected = true&#10;                tvPeriodSummary.text = &quot;선택 기간: 년&quot;&#10;            }&#10;            Period.ALL -&gt; {&#10;                btnAll.isSelected = true&#10;                tvPeriodSummary.text = &quot;선택 기간: 전체&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadAndDisplayData() {&#10;        // RecentActivityManager 초기화&#10;        RecentActivityManager.init(this)&#10;&#10;        // 저장된 금주 기록 로드&#10;        loadSobrietyRecords()&#10;&#10;        // 최근 활동 데이터 로드 및 표시&#10;        loadRecentActivities()&#10;    }&#10;&#10;    /**&#10;     * 통계 데이터를 로드합니다&#10;     */&#10;    private fun loadStatistics() {&#10;        loadSobrietyRecords()&#10;    }&#10;&#10;    /**&#10;     * 레벨 히스토리를 로드합니다&#10;     */&#10;    private fun loadLevelHistory() {&#10;        loadSobrietyRecords()&#10;    }&#10;&#10;    /**&#10;     * 최근 활동 데이터를 로드하고 RecyclerView에 표시합니다&#10;     */&#10;    private fun loadRecentActivities() {&#10;        val recentActivities = RecentActivityManager.getRecentActivities()&#10;&#10;        // RecentActivityAdapter 초기화 (아직 생성되지 않은 경우)&#10;        if (!::recentActivityAdapter.isInitialized) {&#10;            recentActivityAdapter = RecentActivityAdapter(recentActivities)&#10;            rvRecentActivities.adapter = recentActivityAdapter&#10;        } else {&#10;            // 기존 어댑터 데이터 업데이트&#10;            recentActivityAdapter.updateData(recentActivities)&#10;        }&#10;    }&#10;&#10;    private fun loadSobrietyRecords() {&#10;        // SharedPreferences에서 저장된 금주 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;&#10;        // 통계 계산 및 UI 업데이트&#10;        updateStatisticsFromRecords(records)&#10;        updateLevelHistoryFromRecords(records)&#10;        loadRecentActivitiesFromRecords(records)&#10;    }&#10;&#10;    private fun updateStatisticsFromRecords(records: List&lt;SobrietyRecord&gt;) {&#10;        if (records.isEmpty()) {&#10;            // 기록이 없는 경우 기본값 표시&#10;            tvWeeklyCount.text = &quot;0일&quot;&#10;            tvMonthlyCount.text = &quot;0일&quot;&#10;            tvTotalCount.text = &quot;0일&quot;&#10;            tvSummary.text = &quot;아직 완료된 금주 기록이 없습니다.&quot;&#10;            tvTotalAbstinence.text = &quot;전체 누적 금주 시간: 0일&quot;&#10;            tvLongestStreak.text = &quot;최장 연속 금주 기록: 0일&quot;&#10;            tvLastFailure.text = &quot;기록 없음&quot;&#10;            return&#10;        }&#10;&#10;        // 완료된 기록들만 필터링&#10;        val completedRecords = records.filter { it.isCompleted }&#10;&#10;        // 전체 누적 금주 시간 계산 (모든 완료된 기록의 duration 합계)&#10;        val totalDuration = completedRecords.sumOf { it.duration }&#10;&#10;        // 최장 연속 금주 기록 찾기&#10;        val longestStreak = completedRecords.maxOfOrNull { it.duration } ?: 0&#10;&#10;        // 최근 완료 기록 수 계산&#10;        val today = LocalDate.now()&#10;        val thisWeekStart = today.minusDays(today.dayOfWeek.value.toLong() - 1)&#10;        val thisMonthStart = today.withDayOfMonth(1)&#10;&#10;        val weeklyCount = completedRecords.count { record -&gt;&#10;            try {&#10;                val endDate = LocalDate.parse(record.endDate.substring(0, 10))&#10;                !endDate.isBefore(thisWeekStart)&#10;            } catch (e: Exception) {&#10;                false&#10;            }&#10;        }&#10;&#10;        val monthlyCount = completedRecords.count { record -&gt;&#10;            try {&#10;                val endDate = LocalDate.parse(record.endDate.substring(0, 10))&#10;                !endDate.isBefore(thisMonthStart)&#10;            } catch (e: Exception) {&#10;                false&#10;            }&#10;        }&#10;&#10;        // UI 업데이트 - 테스트 모드에 따른 단위 표시&#10;        val timeUnit = getTimeUnitForDisplay()&#10;        tvWeeklyCount.text = &quot;${weeklyCount}회&quot;&#10;        tvMonthlyCount.text = &quot;${monthlyCount}회&quot;&#10;        tvTotalCount.text = &quot;${completedRecords.size}회&quot;&#10;&#10;        // 요약 메시지&#10;        val summaryMessage = when {&#10;            completedRecords.size &gt;= 10 -&gt; &quot;10회 이상 금주를 완료하셨네요! 정말 대단합니다! &quot;&#10;            completedRecords.size &gt;= 5 -&gt; &quot;5회 이상 금주를 성공하셨어요! &quot;&#10;            completedRecords.size &gt;= 3 -&gt; &quot;꾸준히 금주를 실천하고 계시네요! &quot;&#10;            completedRecords.size &gt;= 1 -&gt; &quot;금주를 성공적으로 완료하셨어요! ⭐&quot;&#10;            else -&gt; &quot;아직 완료된 금주 기록이 없습니다.&quot;&#10;        }&#10;        tvSummary.text = summaryMessage&#10;&#10;        // 최고 기록 업데이트&#10;        tvTotalAbstinence.text = &quot;전체 누적 금주 시간: $totalDuration$timeUnit&quot;&#10;        tvLongestStreak.text = &quot;최장 연속 금주 기록: $longestStreak$timeUnit&quot;&#10;&#10;        // 마지막 실패 기록 (중도 포기한 기록 중 가장 최근)&#10;        val lastFailure = records.filter { !it.isCompleted }&#10;            .maxByOrNull { it.endDate }&#10;        tvLastFailure.text = if (lastFailure != null) {&#10;            &quot;마지막 금주 중단: ${lastFailure.endDate.substring(0, 10)}&quot;&#10;        } else {&#10;            &quot;중단 기록 없음&quot;&#10;        }&#10;    }&#10;&#10;    private fun getTimeUnitForDisplay(): String {&#10;        return when (com.example.alcoholictimer.utils.Constants.currentTestMode) {&#10;            com.example.alcoholictimer.utils.Constants.TEST_MODE_SECOND -&gt; &quot;초&quot;&#10;            com.example.alcoholictimer.utils.Constants.TEST_MODE_MINUTE -&gt; &quot;분&quot;&#10;            else -&gt; &quot;일&quot;&#10;        }&#10;    }&#10;&#10;    private fun updateLevelHistoryFromRecords(records: List&lt;SobrietyRecord&gt;) {&#10;        val levelHistory = mutableListOf&lt;LevelHistoryItem&gt;()&#10;&#10;        // 완료된 기록들을 날짜순으로 정렬&#10;        val completedRecords = records.filter { it.isCompleted }&#10;            .sortedBy { it.endDate }&#10;&#10;        completedRecords.forEach { record -&gt;&#10;            val endDate = record.endDate.substring(0, 10) // &quot;yyyy-MM-dd&quot; 형식으로 자르기&#10;            val levelTitle = if (record.levelTitle.isNotEmpty()) {&#10;                record.levelTitle&#10;            } else {&#10;                &quot;레벨 ${record.achievedLevel}&quot;&#10;            }&#10;&#10;            levelHistory.add(LevelHistoryItem(&#10;                endDate,&#10;                &quot;$levelTitle 달성 (${record.duration}${getTimeUnitForDisplay()})&quot;&#10;            ))&#10;        }&#10;&#10;        // 기록이 없는 경우 안내 메시지 추가&#10;        if (levelHistory.isEmpty()) {&#10;            levelHistory.add(LevelHistoryItem(&#10;                LocalDate.now().toString(),&#10;                &quot;아직 달성한 레벨이 없습니다&quot;&#10;            ))&#10;        }&#10;&#10;        // RecyclerView에 어댑터 설정&#10;        rvLevelHistory.adapter = LevelHistoryAdapter(levelHistory)&#10;    }&#10;&#10;    private fun loadRecentActivitiesFromRecords(records: List&lt;SobrietyRecord&gt;) {&#10;        // 모든 기록을 최근 활동으로 변환 (최근 5개)&#10;        val recentActivities = records.sortedByDescending { it.endDate }&#10;            .take(5)&#10;            .map { record -&gt;&#10;                RecentActivity(&#10;                    startDate = record.startDate,&#10;                    endDate = record.endDate,&#10;                    duration = record.duration,&#10;                    isSuccess = record.isCompleted&#10;                )&#10;            }&#10;&#10;        // 기록이 없는 경우 안내 메시지&#10;        if (recentActivities.isEmpty()) {&#10;            // 빈 상태 표시를 위한 더미 데이터&#10;            val emptyActivity = RecentActivity(&#10;                startDate = LocalDate.now().toString(),&#10;                endDate = LocalDate.now().toString(),&#10;                duration = 0,&#10;                isSuccess = false&#10;            )&#10;            recentActivityAdapter = RecentActivityAdapter(listOf(emptyActivity)) { activity -&gt;&#10;                // 빈 활동은 클릭해도 아무 동작 안함&#10;            }&#10;        } else {&#10;            recentActivityAdapter = RecentActivityAdapter(recentActivities) { activity -&gt;&#10;                // 카드 클릭 시 세부정보 화면으로 이동&#10;                navigateToActivityDetail(activity)&#10;            }&#10;        }&#10;&#10;        rvRecentActivities.adapter = recentActivityAdapter&#10;    }&#10;&#10;    /**&#10;     * 활동 세부정보 화면으로 이동&#10;     */&#10;    private fun navigateToActivityDetail(activity: RecentActivity) {&#10;        val intent = Intent(this, ActivityDetailActivity::class.java)&#10;        intent.putExtra(&quot;activity_json&quot;, activity.toJson().toString())&#10;        startActivity(intent)&#10;    }&#10;&#10;    private fun navigateToMain() {&#10;        val intent = Intent(this, MainActivity::class.java)&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#13;&#10;&#13;&#10;import android.content.Intent&#13;&#10;import android.graphics.Color&#13;&#10;import android.os.Bundle&#13;&#10;import android.view.LayoutInflater&#13;&#10;import android.view.View&#13;&#10;import android.view.ViewGroup&#13;&#10;import android.widget.Button&#13;&#10;import android.widget.FrameLayout&#13;&#10;import android.widget.TextView&#13;&#10;import androidx.recyclerview.widget.LinearLayoutManager&#13;&#10;import androidx.recyclerview.widget.RecyclerView&#13;&#10;import com.example.alcoholictimer.adapters.LevelHistoryAdapter&#13;&#10;import com.example.alcoholictimer.adapters.RecentActivityAdapter&#13;&#10;import com.example.alcoholictimer.models.LevelHistoryItem&#13;&#10;import com.example.alcoholictimer.models.RecentActivity&#13;&#10;import com.example.alcoholictimer.utils.RecentActivityManager&#13;&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#13;&#10;import java.time.LocalDate&#13;&#10;import java.time.format.DateTimeFormatter&#13;&#10;import java.time.temporal.ChronoUnit&#13;&#10;import java.time.temporal.WeekFields&#13;&#10;import java.util.Locale&#13;&#10;&#13;&#10;class RecordsActivity : BaseActivity() {&#13;&#10;&#13;&#10;    private lateinit var tvWeeklyCount: TextView&#13;&#10;    private lateinit var tvMonthlyCount: TextView&#13;&#10;    private lateinit var tvTotalCount: TextView&#13;&#10;    private lateinit var tvSummary: TextView&#13;&#10;    private lateinit var tvPeriodSummary: TextView&#13;&#10;    private lateinit var tvTotalAbstinence: TextView&#13;&#10;    private lateinit var tvLongestStreak: TextView&#13;&#10;    private lateinit var tvLastFailure: TextView&#13;&#10;    private lateinit var chartContainer: FrameLayout&#13;&#10;    private lateinit var rvLevelHistory: RecyclerView&#13;&#10;    private lateinit var rvRecentActivities: RecyclerView&#13;&#10;&#13;&#10;    private lateinit var btnWeek: TextView&#13;&#10;    private lateinit var btnMonth: TextView&#13;&#10;    private lateinit var btnYear: TextView&#13;&#10;    private lateinit var btnAll: TextView&#13;&#10;&#13;&#10;    private lateinit var recentActivityAdapter: RecentActivityAdapter&#13;&#10;&#13;&#10;    private var startDate: LocalDate? = null&#13;&#10;    private var currentPeriod = Period.MONTH  // 기본값을 월로 변경&#13;&#10;&#13;&#10;    private enum class Period {&#13;&#10;        WEEK, MONTH, YEAR, ALL&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;&#13;&#10;        // 데이터 로드 및 표시&#13;&#10;        loadAndDisplayData()&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun setupContentView() {&#13;&#10;        // RecordsActivity의 컨텐츠를 contentFrame에 추가&#13;&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#13;&#10;        val view = LayoutInflater.from(this).inflate(R.layout.activity_records, contentFrame, true)&#13;&#10;&#13;&#10;        // View 초기화&#13;&#10;        initViews(view)&#13;&#10;&#13;&#10;        // 버튼 클릭 리스너 설정&#13;&#10;        setupButtonListeners()&#13;&#10;&#13;&#10;        // 초기 UI 상태를 월 기준으로 설정 (뷰 초기화 후에 호출)&#13;&#10;        updatePeriodUI()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun initViews(view: View) {&#13;&#10;        tvWeeklyCount = view.findViewById(R.id.tvWeeklyCount)&#13;&#10;        tvMonthlyCount = view.findViewById(R.id.tvMonthlyCount)&#13;&#10;        tvTotalCount = view.findViewById(R.id.tvTotalCount)&#13;&#10;        tvSummary = view.findViewById(R.id.tvSummary)&#13;&#10;        tvPeriodSummary = view.findViewById(R.id.tvPeriodSummary)&#13;&#10;        tvTotalAbstinence = view.findViewById(R.id.tvTotalAbstinence)&#13;&#10;        tvLongestStreak = view.findViewById(R.id.tvLongestStreak)&#13;&#10;        tvLastFailure = view.findViewById(R.id.tvLastFailure)&#13;&#10;        chartContainer = view.findViewById(R.id.chartContainer)&#13;&#10;        rvLevelHistory = view.findViewById(R.id.rvLevelHistory)&#13;&#10;&#13;&#10;        btnWeek = view.findViewById(R.id.btnWeek)&#13;&#10;        btnMonth = view.findViewById(R.id.btnMonth)&#13;&#10;        btnYear = view.findViewById(R.id.btnYear)&#13;&#10;        btnAll = view.findViewById(R.id.btnAll)&#13;&#10;&#13;&#10;        // RecyclerView 설정&#13;&#10;        rvLevelHistory.layoutManager = LinearLayoutManager(this)&#13;&#10;&#13;&#10;        // 최근 활동 RecyclerView 초기화&#13;&#10;        rvRecentActivities = view.findViewById(R.id.rvRecentActivities)&#13;&#10;        rvRecentActivities.layoutManager = LinearLayoutManager(this)&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun setupButtonListeners() {&#13;&#10;        btnWeek.setOnClickListener {&#13;&#10;            currentPeriod = Period.WEEK&#13;&#10;            updatePeriodUI()&#13;&#10;            loadAndDisplayData()&#13;&#10;        }&#13;&#10;&#13;&#10;        btnMonth.setOnClickListener {&#13;&#10;            currentPeriod = Period.MONTH&#13;&#10;            updatePeriodUI()&#13;&#10;            loadAndDisplayData()&#13;&#10;        }&#13;&#10;&#13;&#10;        btnYear.setOnClickListener {&#13;&#10;            currentPeriod = Period.YEAR&#13;&#10;            updatePeriodUI()&#13;&#10;            loadAndDisplayData()&#13;&#10;        }&#13;&#10;&#13;&#10;        btnAll.setOnClickListener {&#13;&#10;            currentPeriod = Period.ALL&#13;&#10;            updatePeriodUI()&#13;&#10;            loadAndDisplayData()&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun updatePeriodUI() {&#13;&#10;        // 모든 탭 선택 해제&#13;&#10;        btnWeek.isSelected = false&#13;&#10;        btnMonth.isSelected = false&#13;&#10;        btnYear.isSelected = false&#13;&#10;        btnAll.isSelected = false&#13;&#10;&#13;&#10;        // 선택된 탭 표시&#13;&#10;        when(currentPeriod) {&#13;&#10;            Period.WEEK -&gt; {&#13;&#10;                btnWeek.isSelected = true&#13;&#10;                tvPeriodSummary.text = &quot;선택 기간: 주&quot;&#13;&#10;            }&#13;&#10;            Period.MONTH -&gt; {&#13;&#10;                btnMonth.isSelected = true&#13;&#10;                tvPeriodSummary.text = &quot;선택 기간: 월&quot;&#13;&#10;            }&#13;&#10;            Period.YEAR -&gt; {&#13;&#10;                btnYear.isSelected = true&#13;&#10;                tvPeriodSummary.text = &quot;선택 기간: 년&quot;&#13;&#10;            }&#13;&#10;            Period.ALL -&gt; {&#13;&#10;                btnAll.isSelected = true&#13;&#10;                tvPeriodSummary.text = &quot;선택 기간: 전체&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun loadAndDisplayData() {&#13;&#10;        // RecentActivityManager 초기화&#13;&#10;        RecentActivityManager.init(this)&#13;&#10;&#13;&#10;        // 저장된 금주 기록 로드&#13;&#10;        loadSobrietyRecords()&#13;&#10;&#13;&#10;        // 최근 활동 데이터 로드 및 표시&#13;&#10;        loadRecentActivities()&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 통계 데이터를 로드합니다&#13;&#10;     */&#13;&#10;    private fun loadStatistics() {&#13;&#10;        loadSobrietyRecords()&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 레벨 히스토리를 로드합니다&#13;&#10;     */&#13;&#10;    private fun loadLevelHistory() {&#13;&#10;        loadSobrietyRecords()&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 최근 활동 데이터를 로드하고 RecyclerView에 표시합니다&#13;&#10;     */&#13;&#10;    private fun loadRecentActivities() {&#13;&#10;        val recentActivities = RecentActivityManager.getRecentActivities()&#13;&#10;&#13;&#10;        // RecentActivityAdapter 초기화 (아직 생성되지 않은 경우)&#13;&#10;        if (!::recentActivityAdapter.isInitialized) {&#13;&#10;            recentActivityAdapter = RecentActivityAdapter(recentActivities)&#13;&#10;            rvRecentActivities.adapter = recentActivityAdapter&#13;&#10;        } else {&#13;&#10;            // 기존 어댑터 데이터 업데이트&#13;&#10;            recentActivityAdapter.updateData(recentActivities)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun loadSobrietyRecords() {&#13;&#10;        // SharedPreferences에서 저장된 금주 기록 불러오기&#13;&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#13;&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#13;&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#13;&#10;&#13;&#10;        // 통계 계산 및 UI 업데이트&#13;&#10;        updateStatisticsFromRecords(records)&#13;&#10;        updateLevelHistoryFromRecords(records)&#13;&#10;        loadRecentActivitiesFromRecords(records)&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun updateStatisticsFromRecords(records: List&lt;SobrietyRecord&gt;) {&#13;&#10;        if (records.isEmpty()) {&#13;&#10;            // 기록이 없는 경우 기본값 표시&#13;&#10;            tvWeeklyCount.text = &quot;0일&quot;&#13;&#10;            tvMonthlyCount.text = &quot;0일&quot;&#13;&#10;            tvTotalCount.text = &quot;0일&quot;&#13;&#10;            tvSummary.text = &quot;아직 완료된 금주 기록이 없습니다.&quot;&#13;&#10;            tvTotalAbstinence.text = &quot;전체 누적 금주 시간: 0일&quot;&#13;&#10;            tvLongestStreak.text = &quot;최장 연속 금주 기록: 0일&quot;&#13;&#10;            tvLastFailure.text = &quot;기록 없음&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;&#13;&#10;        // 완료된 기록들만 필터링&#13;&#10;        val completedRecords = records.filter { it.isCompleted }&#13;&#10;&#13;&#10;        // 전체 누적 금주 시간 계산 (모든 완료된 기록의 duration 합계)&#13;&#10;        val totalDuration = completedRecords.sumOf { it.duration }&#13;&#10;&#13;&#10;        // 최장 연속 금주 기록 찾기&#13;&#10;        val longestStreak = completedRecords.maxOfOrNull { it.duration } ?: 0&#13;&#10;&#13;&#10;        // 최근 완료 기록 수 계산&#13;&#10;        val today = LocalDate.now()&#13;&#10;        val thisWeekStart = today.minusDays(today.dayOfWeek.value.toLong() - 1)&#13;&#10;        val thisMonthStart = today.withDayOfMonth(1)&#13;&#10;&#13;&#10;        val weeklyCount = completedRecords.count { record -&gt;&#13;&#10;            try {&#13;&#10;                val endDate = LocalDate.parse(record.endDate.substring(0, 10))&#13;&#10;                !endDate.isBefore(thisWeekStart)&#13;&#10;            } catch (e: Exception) {&#13;&#10;                false&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        val monthlyCount = completedRecords.count { record -&gt;&#13;&#10;            try {&#13;&#10;                val endDate = LocalDate.parse(record.endDate.substring(0, 10))&#13;&#10;                !endDate.isBefore(thisMonthStart)&#13;&#10;            } catch (e: Exception) {&#13;&#10;                false&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // UI 업데이트 - 테스트 모드에 따른 단위 표시&#13;&#10;        val timeUnit = getTimeUnitForDisplay()&#13;&#10;        tvWeeklyCount.text = &quot;${weeklyCount}회&quot;&#13;&#10;        tvMonthlyCount.text = &quot;${monthlyCount}회&quot;&#13;&#10;        tvTotalCount.text = &quot;${completedRecords.size}회&quot;&#13;&#10;&#13;&#10;        // 요약 메시지&#13;&#10;        val summaryMessage = when {&#13;&#10;            completedRecords.size &gt;= 10 -&gt; &quot;10회 이상 금주를 완료하셨네요! 정말 대단합니다! &quot;&#13;&#10;            completedRecords.size &gt;= 5 -&gt; &quot;5회 이상 금주를 성공하셨어요! &quot;&#13;&#10;            completedRecords.size &gt;= 3 -&gt; &quot;꾸준히 금주를 실천하고 계시네요! &quot;&#13;&#10;            completedRecords.size &gt;= 1 -&gt; &quot;금주를 성공적으로 완료하셨어요! ⭐&quot;&#13;&#10;            else -&gt; &quot;아직 완료된 금주 기록이 없습니다.&quot;&#13;&#10;        }&#13;&#10;        tvSummary.text = summaryMessage&#13;&#10;&#13;&#10;        // 최고 기록 업데이트&#13;&#10;        tvTotalAbstinence.text = &quot;전체 누적 금주 시간: $totalDuration$timeUnit&quot;&#13;&#10;        tvLongestStreak.text = &quot;최장 연속 금주 기록: $longestStreak$timeUnit&quot;&#13;&#10;&#13;&#10;        // 마지막 실패 기록 (중도 포기한 기록 중 가장 최근)&#13;&#10;        val lastFailure = records.filter { !it.isCompleted }&#13;&#10;            .maxByOrNull { it.endDate }&#13;&#10;        tvLastFailure.text = if (lastFailure != null) {&#13;&#10;            &quot;마지막 금주 중단: ${lastFailure.endDate.substring(0, 10)}&quot;&#13;&#10;        } else {&#13;&#10;            &quot;중단 기록 없음&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun getTimeUnitForDisplay(): String {&#13;&#10;        return when (com.example.alcoholictimer.utils.Constants.currentTestMode) {&#13;&#10;            com.example.alcoholictimer.utils.Constants.TEST_MODE_SECOND -&gt; &quot;초&quot;&#13;&#10;            com.example.alcoholictimer.utils.Constants.TEST_MODE_MINUTE -&gt; &quot;분&quot;&#13;&#10;            else -&gt; &quot;일&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun updateLevelHistoryFromRecords(records: List&lt;SobrietyRecord&gt;) {&#13;&#10;        val levelHistory = mutableListOf&lt;LevelHistoryItem&gt;()&#13;&#10;&#13;&#10;        // 완료된 기록들을 날짜순으로 정렬&#13;&#10;        val completedRecords = records.filter { it.isCompleted }&#13;&#10;            .sortedBy { it.endDate }&#13;&#10;&#13;&#10;        completedRecords.forEach { record -&gt;&#13;&#10;            val endDate = record.endDate.substring(0, 10) // &quot;yyyy-MM-dd&quot; 형식으로 자르기&#13;&#10;            val levelTitle = if (record.levelTitle.isNotEmpty()) {&#13;&#10;                record.levelTitle&#13;&#10;            } else {&#13;&#10;                &quot;레벨 ${record.achievedLevel}&quot;&#13;&#10;            }&#13;&#10;&#13;&#10;            levelHistory.add(LevelHistoryItem(&#13;&#10;                endDate,&#13;&#10;                &quot;$levelTitle 달성 (${record.duration}${getTimeUnitForDisplay()})&quot;&#13;&#10;            ))&#13;&#10;        }&#13;&#10;&#13;&#10;        // 기록이 없는 경우 안내 메시지 추가&#13;&#10;        if (levelHistory.isEmpty()) {&#13;&#10;            levelHistory.add(LevelHistoryItem(&#13;&#10;                LocalDate.now().toString(),&#13;&#10;                &quot;아직 달성한 레벨이 없습니다&quot;&#13;&#10;            ))&#13;&#10;        }&#13;&#10;&#13;&#10;        // RecyclerView에 어댑터 설정&#13;&#10;        rvLevelHistory.adapter = LevelHistoryAdapter(levelHistory)&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun loadRecentActivitiesFromRecords(records: List&lt;SobrietyRecord&gt;) {&#13;&#10;        // 모든 기록을 최근 활동으로 변환 (최근 5개)&#13;&#10;        val recentActivities = records.sortedByDescending { it.endDate }&#13;&#10;            .take(5)&#13;&#10;            .map { record -&gt;&#13;&#10;                RecentActivity(&#13;&#10;                    startDate = record.startDate,&#13;&#10;                    endDate = record.endDate,&#13;&#10;                    duration = record.duration,&#13;&#10;                    isSuccess = record.isCompleted&#13;&#10;                )&#13;&#10;            }&#13;&#10;&#13;&#10;        // 기록이 없는 경우 안내 메시지&#13;&#10;        if (recentActivities.isEmpty()) {&#13;&#10;            // 빈 상태 표시를 위한 더미 데이터&#13;&#10;            val emptyActivity = RecentActivity(&#13;&#10;                startDate = LocalDate.now().toString(),&#13;&#10;                endDate = LocalDate.now().toString(),&#13;&#10;                duration = 0,&#13;&#10;                isSuccess = false&#13;&#10;            )&#13;&#10;            recentActivityAdapter = RecentActivityAdapter(listOf(emptyActivity)) { activity -&gt;&#13;&#10;                // 빈 활동은 클릭해도 아무 동작 안함&#13;&#10;            }&#13;&#10;        } else {&#13;&#10;            recentActivityAdapter = RecentActivityAdapter(recentActivities) { activity -&gt;&#13;&#10;                // 카드 클릭 시 세부정보 화면으로 이동&#13;&#10;                navigateToActivityDetail(activity)&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        rvRecentActivities.adapter = recentActivityAdapter&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 활동 세부정보 화면으로 이동합니다.&#13;&#10;     */&#13;&#10;    private fun navigateToActivityDetail(activity: RecentActivity) {&#13;&#10;        val intent = Intent(this, DetailActivity::class.java)&#13;&#10;        intent.putExtra(&quot;activity_json&quot;, activity.toJson().toString())&#13;&#10;        startActivity(intent)&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun navigateToMain() {&#13;&#10;        val intent = Intent(this, MainActivity::class.java)&#13;&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#13;&#10;        startActivity(intent)&#13;&#10;        overridePendingTransition(0, 0)&#13;&#10;        finish()&#13;&#10;        overridePendingTransition(0, 0)&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java" />
              <option name="originalContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}&#10;" />
              <option name="updatedContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.RecordManager&#10;import com.example.alcoholictimer.utils.RecentActivityManager&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.Timer&#10;import java.util.TimerTask&#10;&#10;class StatusActivity : BaseActivity() {&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#10;    private var goalAchievementChecked = false&#10;&#10;    // 일 단위 레벨 마일스톤 (실제 운영)&#10;    private val levelMilestones = listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;&#10;    // 분 단위 레벨 마일스톤 (테스트 모드)&#10;    private val minuteTestMilestones = listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;&#10;    // 초 단위 레벨 마일스톤 (초 단위 테스트 모드)&#10;    private val secondTestMilestones = listOf(0, 7, 14, 30, 60, 90, 120, 180)&#10;&#10;    private val levelTitles = listOf(&#10;        &quot;새싹 도전자&quot;,&#10;        &quot;첫걸음 성공&quot;,&#10;        &quot;의지의 시작&quot;,&#10;        &quot;한달의 기적&quot;,&#10;        &quot;습관의 탄생&quot;,&#10;        &quot;의지의 달인&quot;,&#10;        &quot;금주의 마스터&quot;,&#10;        &quot;절제의 달인&quot;&#10;    )&#10;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#10;    private var timer: Timer? = null&#10;    private val handler = Handler(Looper.getMainLooper())&#10;&#10;    // UI 요소 참조 저장 변수&#10;    private lateinit var tvDaysCount: TextView&#10;    private lateinit var tvTimeUnit: TextView&#10;    private lateinit var tvMessage: TextView&#10;    private lateinit var progressLevel: ProgressBar&#10;    private lateinit var tvTimeDetail: TextView&#10;    private lateinit var tvHoursDisplay: TextView // 시간 표시용 TextView 추가&#10;&#10;    // 금주 시작 시간 저장 변수&#10;    private var abstainStartTime: String = &quot;&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;&#10;        // SharedPreferences에서 현재 테스트 모드를 읽어와서 Constants 업데이트&#10;        val sharedPref = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;        val currentTestMode = sharedPref.getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;        Constants.updateTestMode(currentTestMode)&#10;&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;&#10;        // 금주 시작 시간 초기화 (abstainStartTime이 비어있는 경우를 대비)&#10;        initAbstainStartTime()&#10;&#10;        updateUI()&#10;        startTimer()&#10;&#10;        // 목표 달성 플래그 초기화&#10;        goalAchievementChecked = false&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // 화면이 보이지 않을 때 타이머 정지&#10;        stopTimer()&#10;    }&#10;&#10;    // Activity 클래스의 onNewIntent를 오버라이드&#10;    public override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        // 새 인텐트로 액티비티가 재사용될 때 수행할 작업&#10;        setIntent(intent)&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;        // UI 즉시 갱신&#10;        updateUI()&#10;    }&#10;&#10;    override fun handleNewIntent(intent: Intent?) {&#10;        // BaseActivity의 handleNewIntent 구현&#10;        updateUI()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        stopTimer()&#10;        timer = Timer()&#10;        timer?.scheduleAtFixedRate(object : TimerTask() {&#10;            override fun run() {&#10;                handler.post {&#10;                    updateTimeDisplay()&#10;                }&#10;            }&#10;        }, 0, 100)  // 100ms 간격으로 업데이트&#10;    }&#10;&#10;    private fun stopTimer() {&#10;        timer?.cancel()&#10;        timer = null&#10;    }&#10;&#10;    private fun updateTimeDisplay() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        // 목표가 이미 달성되었으면 타이머 업데이트를 중단&#10;        if (completionFlag) {&#10;            stopTimer()&#10;            return&#10;        }&#10;&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따른 시간 계산 - 대형 숫자 업데이트&#10;        val timePassed = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;        }&#10;&#10;        // 대형 숫자 실시간 업데이트 (특히 초 모드에서 중요)&#10;        tvDaysCount.text = timePassed.toString()&#10;&#10;        // 시간 계산&#10;        val hours = (secondsPassed / 3600) % 24&#10;&#10;        // 시간 표시 업데이트&#10;        tvHoursDisplay.text = String.format(&quot;%02d시간&quot;, hours)&#10;&#10;        // 테스트 모드별 시간 표시 업데이트&#10;        val timeText = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;        }&#10;&#10;        tvTimeDetail.text = timeText&#10;&#10;        // 진행 상태 확인 및 완료 처리&#10;        checkProgressStatus()&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StatusActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_status, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        tvDaysCount = view.findViewById(R.id.tvDaysCount)&#10;        tvTimeUnit = view.findViewById(R.id.tvTimeUnit)&#10;        tvMessage = view.findViewById(R.id.tvMessage)&#10;        progressLevel = view.findViewById(R.id.progressLevel)&#10;        tvTimeDetail = view.findViewById(R.id.tvTimeDetail)&#10;        tvHoursDisplay = view.findViewById(R.id.tvHoursDisplay) // 시간 표시 TextView 초기화&#10;        tvTimeDetail.text = &quot;00:00:00&quot;  // 초기값 변경&#10;&#10;        // 시간 단위 텍스트 설정&#10;        tvTimeUnit.text = Constants.TIME_UNIT_TEXT&#10;&#10;        // 중지 버튼 설정&#10;        val btnStopSobriety = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#10;        btnStopSobriety.setOnClickListener {&#10;            // 기존 AlertDialog 대신 커스텀 다이얼로그 사용&#10;            showCustomStopDialog()&#10;        }&#10;&#10;        // 최초 UI 업데이트&#10;        updateUI()&#10;    }&#10;&#10;    private fun displayTimeDetails(timePassed: Int, secondsPassed: Long) {&#10;        val timeText = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val seconds = secondsPassed % 60&#10;                val millis = (System.currentTimeMillis() % 1000) / 10&#10;                String.format(&quot;%02d:%02d&quot;, seconds, millis)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val minutes = secondsPassed / 60&#10;                val seconds = secondsPassed % 60&#10;                String.format(&quot;%02d:%02d&quot;, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val hours = (secondsPassed / 3600) % 24&#10;                val minutes = (secondsPassed / 60) % 60&#10;                String.format(&quot;%02d:%02d&quot;, hours, minutes)&#10;            }&#10;        }&#10;&#10;        tvTimeDetail.text = timeText&#10;    }&#10;&#10;    /**&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#10;     */&#10;    private fun updateUI() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        if (completionFlag) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;            progressLevel.progress = 100&#10;            return&#10;        }&#10;&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따른 시간 계산&#10;        val timePassed = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;        }&#10;&#10;        // 대형 숫자에 진행 중인 시간 표시&#10;        tvDaysCount.text = timePassed.toString()&#10;&#10;        // 진행률 계산&#10;        val targetSeconds = when {&#10;            Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;            Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;            else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;        }&#10;&#10;        val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;        progressLevel.progress = progress.coerceIn(0, 100)&#10;&#10;        // 타이머 표시 업데이트&#10;        updateTimeDisplay()&#10;&#10;        // 완료 조건 확인 - 초단위 테스트 모드에서는 초 단위로 비교&#10;        val isCompleted = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#10;            Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#10;            else -&gt; timePassed &gt; targetDays&#10;        }&#10;&#10;        if (isCompleted) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            progressLevel.progress = 100&#10;            handleGoalCompletion(targetDays)&#10;        } else {&#10;            // 남은 시간 계산 및 메시지 업데이트&#10;            val remainingTime = targetDays - timePassed + 1&#10;            tvMessage.text = &quot;목표까지 ${remainingTime}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;        }&#10;    }&#10;&#10;    private fun handleGoalCompletion(targetDays: Int) {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val endTime = System.currentTimeMillis()&#10;&#10;        with(sharedPref.edit()) {&#10;            putBoolean(&quot;timer_completed&quot;, true)&#10;            apply()&#10;        }&#10;&#10;        if (!goalAchievementChecked) {&#10;            goalAchievementChecked = true&#10;            // 타이머 즉시 중지&#10;            stopTimer()&#10;&#10;            // RecentActivityManager 초기화&#10;            RecentActivityManager.init(this)&#10;&#10;            // 완료된 활동을 RecentActivityManager에 저장&#10;            RecentActivityManager.saveCompletedActivity(&#10;                startTime,&#10;                endTime,&#10;                targetDays,&#10;                Constants.currentTestMode&#10;            )&#10;&#10;            // 완료된 기록을 먼저 저장&#10;            val recordId = saveCompletedRecord(startTime, endTime, targetDays, 1)&#10;&#10;            // 결과 화면 전환 지연 후 기록 요약 화면으로 이동&#10;            Handler(Looper.getMainLooper()).postDelayed({&#10;                // 기록 요약 화면으로 이동 (기록 ID 전달)&#10;                navigateToRecordSummary(recordId)&#10;            }, Constants.RESULT_SCREEN_DELAY.toLong())&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 완료된 금주 기록을 저장합니다&#10;     * @return 저장된 기록의 ID&#10;     */&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#10;        Log.d(&quot;StatusActivity&quot;, &quot;saveCompletedRecord 시작: startTime=$startTime, endTime=$endTime, targetDays=$targetDays&quot;)&#10;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 ID 생성&#10;        val recordId = System.currentTimeMillis()&#10;        Log.d(&quot;StatusActivity&quot;, &quot;생성된 recordId: $recordId&quot;)&#10;&#10;        // 테스트 모드일 때는 실제 경과 시간 대신 설정한 목표 시간을 그대로 사용&#10;        val achievedDays = if (Constants.isSecondTestMode || Constants.isMinuteTestMode) {&#10;            // 테스트 모드에서는 설정한 목표 시간 그대로 표시&#10;            targetDays&#10;        } else {&#10;            // 실제 모드에서만 실제 경과 시간 계산&#10;            ((endTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;        }&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;테스트 모드: ${Constants.isSecondTestMode}, 설정된 일수: $targetDays, 기록될 일수: $achievedDays&quot;)&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedDays = achievedDays, // 목표 시간을 그대로 사용&#10;            achievedLevel = level,&#10;            levelTitle = if (level &gt; 0 &amp;&amp; level &lt;= levelTitles.size) levelTitles[level - 1] else &quot;기본 레벨&quot;,&#10;            isCompleted = true&#10;        )&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;생성된 기록: $record&quot;)&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;기존 기록 JSON: $recordsJson&quot;)&#10;&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;        Log.d(&quot;StatusActivity&quot;, &quot;기존 기록 개수: ${records.size}&quot;)&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;새 기록 추가 후 총 개수: ${records.size}&quot;)&#10;&#10;        // 기록 저장&#10;        val newRecordsJson = SobrietyRecord.toJsonArray(records)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;저장할 JSON: $newRecordsJson&quot;)&#10;&#10;        with(sharedPref.edit()) {&#10;            putString(&quot;records&quot;, newRecordsJson)&#10;            val success = commit() // apply() 대신 commit()으로 즉시 저장&#10;            Log.d(&quot;StatusActivity&quot;, &quot;기록 저장 성공: $success&quot;)&#10;        }&#10;&#10;        // 저장 확인&#10;        val savedRecordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;저장 확인 JSON: $savedRecordsJson&quot;)&#10;&#10;        // 현재 진행중인 금주 데이터 초기화&#10;        with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;            clear()&#10;            apply()&#10;        }&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;saveCompletedRecord 완료, 반환 ID: $recordId&quot;)&#10;        return recordId&#10;    }&#10;&#10;    private fun saveActivity(isCompleted: Boolean) {&#10;        try {&#10;            val activity = RecentActivity(&#10;                startDate = abstainStartTime,&#10;                endDate = getCurrentDate(),&#10;                duration = calculateDuration(),&#10;                isSuccess = isCompleted&#10;            )&#10;            RecordManager.addActivity(activity)&#10;        } catch (e: Exception) {&#10;            // 날짜 파싱 오류 등이 발생하면 로그만 남기고 기본값 사용&#10;            android.util.Log.e(&quot;StatusActivity&quot;, &quot;Error saving activity: ${e.message}&quot;, e)&#10;            try {&#10;                val activity = RecentActivity(&#10;                    startDate = getCurrentDate(),&#10;                    endDate = getCurrentDate(),&#10;                    duration = 1,&#10;                    isSuccess = isCompleted&#10;                )&#10;                RecordManager.addActivity(activity)&#10;            } catch (fallbackError: Exception) {&#10;                android.util.Log.e(&quot;StatusActivity&quot;, &quot;Fallback save also failed: ${fallbackError.message}&quot;, fallbackError)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun onGoalCompleted() {&#10;        saveActivity(true)&#10;        navigateToRecords()&#10;    }&#10;&#10;    private fun stopAbstaining() {&#10;        saveActivity(false)&#10;        // ...existing stop logic...&#10;    }&#10;&#10;    private fun getCurrentDate(): String {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        return dateFormat.format(Date())&#10;    }&#10;&#10;    private fun calculateDuration(): Int {&#10;        return try {&#10;            if (abstainStartTime.isBlank()) {&#10;                // abstainStartTime이 비어있으면 SharedPreferences에서 시작 시간을 가져와서 계산&#10;                val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                val startTimeMillis = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;                val currentTime = System.currentTimeMillis()&#10;                val daysPassed = ((currentTime - startTimeMillis) / (1000 * 60 * 60 * 24)).toInt()&#10;                return daysPassed + 1&#10;            }&#10;&#10;            val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;            val startDate = dateFormat.parse(abstainStartTime)&#10;            val currentDate = Date()&#10;&#10;            if (startDate != null) {&#10;                ((currentDate.time - startDate.time) / (1000 * 60 * 60 * 24)).toInt() + 1&#10;            } else {&#10;                1 // 기본값&#10;            }&#10;        } catch (e: Exception) {&#10;            android.util.Log.e(&quot;StatusActivity&quot;, &quot;Error calculating duration: ${e.message}&quot;, e)&#10;            1 // 오류 발생 시 기본값 반환&#10;        }&#10;    }&#10;&#10;    private fun navigateToRecords() {&#10;        val intent = Intent(this, RecordsActivity::class.java)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun navigateToRecordSummary(recordId: Long) {&#10;        val intent = Intent(this, RecordSummaryActivity::class.java)&#10;        intent.putExtra(&quot;record_id&quot;, recordId)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    /**&#10;     * 눈에 잘 보이는 버튼이 있는 커스텀 중지 확인 다이얼로그를 표시합니다.&#10;     */&#10;    private fun showCustomStopDialog() {&#10;        // 커스텀 다이얼로그 생성&#10;        val dialog = android.app.Dialog(this)&#10;        dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#10;        dialog.setContentView(com.example.alcoholictimer.R.layout.dialog_stop_sobriety)&#10;&#10;        // 다이얼로그 배경을 투명하게 설정하고 외부 영역 클릭으로 닫히지 않게 설정&#10;        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)&#10;        dialog.setCancelable(false)&#10;&#10;        // 취소 버튼 클릭 리스너&#10;        val btnCancel = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnCancel)&#10;        btnCancel.setOnClickListener {&#10;            dialog.dismiss()&#10;        }&#10;&#10;        // 확인 버튼 클릭 리스너&#10;        val btnConfirm = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnConfirm)&#10;        btnConfirm.setOnClickListener {&#10;            dialog.dismiss()&#10;&#10;            // 중단된 활동 기록 저장&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;            val endTime = System.currentTimeMillis()&#10;&#10;            // RecentActivityManager 초기화 및 중단된 활동 저장&#10;            RecentActivityManager.init(this@StatusActivity)&#10;            RecentActivityManager.saveStoppedActivity(startTime, endTime, Constants.currentTestMode)&#10;&#10;            // SharedPreferences 초기화&#10;            with(sharedPref.edit()) {&#10;                clear()&#10;                apply()&#10;            }&#10;&#10;            // 시작 화면으로 이동&#10;            val intent = Intent(this@StatusActivity, MainActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;            startActivity(intent)&#10;            finish()&#10;&#10;            // 토스트 메시지 표시&#10;            Toast.makeText(this@StatusActivity, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        // 다이얼로그 표시&#10;        dialog.show()&#10;    }&#10;&#10;    private fun navigateToStart() {&#10;        val intent = Intent(this, StartActivity::class.java)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;&#10;    private fun updateTimeModeDisplay() {&#10;        val timeUnitText = when {&#10;            Constants.isSecondTestMode -&gt; &quot;금주 목표 초수&quot;&#10;            Constants.isMinuteTestMode -&gt; &quot;금주 목표 분수&quot;&#10;            else -&gt; &quot;금주 목표 일수&quot;&#10;        }&#10;        tvTimeUnit.text = timeUnitText&#10;    }&#10;&#10;    /**&#10;     * 진행 상태를 확인하고 필요한 경우 목표 완료 처리를 합니다.&#10;     * 타이머에서 주기적으로 호출됩니다.&#10;     */&#10;    private fun checkProgressStatus() {&#10;        try {&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;            val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;            val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;            if (completionFlag) {&#10;                return  // 이미 완료된 상태면 처리하지 않음&#10;            }&#10;&#10;            val currentTime = System.currentTimeMillis()&#10;            val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;            // 진행률 계산&#10;            val targetSeconds = when {&#10;                Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;                Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;                else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;            }&#10;&#10;            // 진행률이 100을 초과하지 않도록 제한&#10;            val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;            val safeProgress = progress.coerceIn(0, 100)&#10;&#10;            // UI 업데이트는 runOnUiThread 내에서 수행&#10;            runOnUiThread {&#10;                progressLevel.progress = safeProgress&#10;&#10;                // 완료 조건 확인&#10;                val isCompleted = when {&#10;                    Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#10;                    Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#10;                    else -&gt; secondsPassed &gt;= (targetDays * 24 * 60 * 60)&#10;                }&#10;&#10;                if (isCompleted &amp;&amp; !goalAchievementChecked) {&#10;                    tvDaysCount.text = targetDays.toString()&#10;                    tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;                    progressLevel.progress = 100&#10;                    handleGoalCompletion(targetDays)&#10;                } else if (!isCompleted) {&#10;                    // 남은 시간 계산 및 메시지 업데이트&#10;                    val timePassed = when {&#10;                        Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;                        Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;                        else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;                    }&#10;                    val remainingTime = targetDays - timePassed + 1&#10;                    if (remainingTime &gt; 0) {&#10;                        tvMessage.text = &quot;목표까지 ${remainingTime}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;                    } else {&#10;                        tvMessage.text = &quot;목표 달성이 임박했습니다!&quot;&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            // 에러 발생 시 로그만 남기고 앱은 계속 실행&#10;            android.util.Log.e(&quot;StatusActivity&quot;, &quot;Error in checkProgressStatus: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 금주 시작 시간을 초기화합니다.&#10;     */&#10;    private fun initAbstainStartTime() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTimeMillis = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        abstainStartTime = dateFormat.format(Date(startTimeMillis))&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#13;&#10;&#13;&#10;import android.content.Intent&#13;&#10;import android.os.Bundle&#13;&#10;import android.os.Handler&#13;&#10;import android.os.Looper&#13;&#10;import android.util.Log&#13;&#10;import android.view.LayoutInflater&#13;&#10;import android.view.ViewGroup&#13;&#10;import android.widget.ProgressBar&#13;&#10;import android.widget.TextView&#13;&#10;import android.widget.Toast&#13;&#10;import com.example.alcoholictimer.models.RecentActivity&#13;&#10;import com.example.alcoholictimer.utils.Constants&#13;&#10;import com.example.alcoholictimer.utils.RecordManager&#13;&#10;import com.example.alcoholictimer.utils.RecentActivityManager&#13;&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#13;&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#13;&#10;import java.text.SimpleDateFormat&#13;&#10;import java.util.Date&#13;&#10;import java.util.Locale&#13;&#10;import java.util.Timer&#13;&#10;import java.util.TimerTask&#13;&#10;&#13;&#10;class StatusActivity : BaseActivity() {&#13;&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#13;&#10;    private var goalAchievementChecked = false&#13;&#10;&#13;&#10;    // 일 단위 레벨 마일스톤 (실제 운영)&#13;&#10;    private val levelMilestones = listOf(0, 7, 14, 30, 60, 120, 240, 365)&#13;&#10;&#13;&#10;    // 분 단위 레벨 마일스톤 (테스트 모드)&#13;&#10;    private val minuteTestMilestones = listOf(0, 1, 2, 5, 10, 15, 20, 30)&#13;&#10;&#13;&#10;    // 초 단위 레벨 마일스톤 (초 단위 테스트 모드)&#13;&#10;    private val secondTestMilestones = listOf(0, 7, 14, 30, 60, 90, 120, 180)&#13;&#10;&#13;&#10;    private val levelTitles = listOf(&#13;&#10;        &quot;새싹 도전자&quot;,&#13;&#10;        &quot;첫걸음 성공&quot;,&#13;&#10;        &quot;의지의 시작&quot;,&#13;&#10;        &quot;한달의 기적&quot;,&#13;&#10;        &quot;습관의 탄생&quot;,&#13;&#10;        &quot;의지의 달인&quot;,&#13;&#10;        &quot;금주의 마스터&quot;,&#13;&#10;        &quot;절제의 달인&quot;&#13;&#10;    )&#13;&#10;&#13;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#13;&#10;    private var timer: Timer? = null&#13;&#10;    private val handler = Handler(Looper.getMainLooper())&#13;&#10;&#13;&#10;    // UI 요소 참조 저장 변수&#13;&#10;    private lateinit var tvDaysCount: TextView&#13;&#10;    private lateinit var tvTimeUnit: TextView&#13;&#10;    private lateinit var tvMessage: TextView&#13;&#10;    private lateinit var progressLevel: ProgressBar&#13;&#10;    private lateinit var tvTimeDetail: TextView&#13;&#10;    private lateinit var tvHoursDisplay: TextView // 시간 표시용 TextView 추가&#13;&#10;&#13;&#10;    // 금주 시작 시간 저장 변수&#13;&#10;    private var abstainStartTime: String = &quot;&quot;&#13;&#10;&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun onResume() {&#13;&#10;        super.onResume()&#13;&#10;&#13;&#10;        // SharedPreferences에서 현재 테스트 모드를 읽어와서 Constants 업데이트&#13;&#10;        val sharedPref = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#13;&#10;        val currentTestMode = sharedPref.getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#13;&#10;        Constants.updateTestMode(currentTestMode)&#13;&#10;&#13;&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#13;&#10;&#13;&#10;        // 금주 시작 시간 초기화 (abstainStartTime이 비어있는 경우를 대비)&#13;&#10;        initAbstainStartTime()&#13;&#10;&#13;&#10;        updateUI()&#13;&#10;        startTimer()&#13;&#10;&#13;&#10;        // 목표 달성 플래그 초기화&#13;&#10;        goalAchievementChecked = false&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun onPause() {&#13;&#10;        super.onPause()&#13;&#10;        // 화면이 보이지 않을 때 타이머 정지&#13;&#10;        stopTimer()&#13;&#10;    }&#13;&#10;&#13;&#10;    // Activity 클래스의 onNewIntent를 오버라이드&#13;&#10;    public override fun onNewIntent(intent: Intent) {&#13;&#10;        super.onNewIntent(intent)&#13;&#10;        // 새 인텐트로 액티비티가 재사용될 때 수행할 작업&#13;&#10;        setIntent(intent)&#13;&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#13;&#10;        // UI 즉시 갱신&#13;&#10;        updateUI()&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun handleNewIntent(intent: Intent?) {&#13;&#10;        // BaseActivity의 handleNewIntent 구현&#13;&#10;        updateUI()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun startTimer() {&#13;&#10;        stopTimer()&#13;&#10;        timer = Timer()&#13;&#10;        timer?.scheduleAtFixedRate(object : TimerTask() {&#13;&#10;            override fun run() {&#13;&#10;                handler.post {&#13;&#10;                    updateTimeDisplay()&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }, 0, 100)  // 100ms 간격으로 업데이트&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun stopTimer() {&#13;&#10;        timer?.cancel()&#13;&#10;        timer = null&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun updateTimeDisplay() {&#13;&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#13;&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#13;&#10;&#13;&#10;        // 목표가 이미 달성되었으면 타이머 업데이트를 중단&#13;&#10;        if (completionFlag) {&#13;&#10;            stopTimer()&#13;&#10;            return&#13;&#10;        }&#13;&#10;&#13;&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#13;&#10;        val currentTime = System.currentTimeMillis()&#13;&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#13;&#10;&#13;&#10;        // 테스트 모드에 따른 시간 계산 - 대형 숫자 업데이트&#13;&#10;        val timePassed = when {&#13;&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#13;&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#13;&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#13;&#10;        }&#13;&#10;&#13;&#10;        // 대형 숫자 실시간 업데이트 (특히 초 모드에서 중요)&#13;&#10;        tvDaysCount.text = timePassed.toString()&#13;&#10;&#13;&#10;        // 시간 계산&#13;&#10;        val hours = (secondsPassed / 3600) % 24&#13;&#10;&#13;&#10;        // 시간 표시 업데이트&#13;&#10;        tvHoursDisplay.text = String.format(&quot;%02d시간&quot;, hours)&#13;&#10;&#13;&#10;        // 테스트 모드별 시간 표시 업데이트&#13;&#10;        val timeText = when {&#13;&#10;            Constants.isSecondTestMode -&gt; {&#13;&#10;                val totalSeconds = secondsPassed&#13;&#10;                val hours = totalSeconds / 3600&#13;&#10;                val minutes = (totalSeconds % 3600) / 60&#13;&#10;                val seconds = totalSeconds % 60&#13;&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#13;&#10;            }&#13;&#10;            Constants.isMinuteTestMode -&gt; {&#13;&#10;                val totalSeconds = secondsPassed&#13;&#10;                val hours = totalSeconds / 3600&#13;&#10;                val minutes = (totalSeconds % 3600) / 60&#13;&#10;                val seconds = totalSeconds % 60&#13;&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#13;&#10;            }&#13;&#10;            else -&gt; {&#13;&#10;                val totalSeconds = secondsPassed&#13;&#10;                val hours = totalSeconds / 3600&#13;&#10;                val minutes = (totalSeconds % 3600) / 60&#13;&#10;                val seconds = totalSeconds % 60&#13;&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        tvTimeDetail.text = timeText&#13;&#10;&#13;&#10;        // 진행 상태 확인 및 완료 처리&#13;&#10;        checkProgressStatus()&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun setupContentView() {&#13;&#10;        // StatusActivity 고유의 컨텐츠를 contentFrame에 추가&#13;&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#13;&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_status, contentFrame, true)&#13;&#10;&#13;&#10;        // UI 요소 초기화&#13;&#10;        tvDaysCount = view.findViewById(R.id.tvDaysCount)&#13;&#10;        tvTimeUnit = view.findViewById(R.id.tvTimeUnit)&#13;&#10;        tvMessage = view.findViewById(R.id.tvMessage)&#13;&#10;        progressLevel = view.findViewById(R.id.progressLevel)&#13;&#10;        tvTimeDetail = view.findViewById(R.id.tvTimeDetail)&#13;&#10;        tvHoursDisplay = view.findViewById(R.id.tvHoursDisplay) // 시간 표시 TextView 초기화&#13;&#10;        tvTimeDetail.text = &quot;00:00:00&quot;  // 초기값 변경&#13;&#10;&#13;&#10;        // 시간 단위 텍스트 설정&#13;&#10;        tvTimeUnit.text = Constants.TIME_UNIT_TEXT&#13;&#10;&#13;&#10;        // 중지 버튼 설정&#13;&#10;        val btnStopSobriety = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#13;&#10;        btnStopSobriety.setOnClickListener {&#13;&#10;            // 기존 AlertDialog 대신 커스텀 다이얼로그 사용&#13;&#10;            showCustomStopDialog()&#13;&#10;        }&#13;&#10;&#13;&#10;        // 최초 UI 업데이트&#13;&#10;        updateUI()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun displayTimeDetails(timePassed: Int, secondsPassed: Long) {&#13;&#10;        val timeText = when {&#13;&#10;            Constants.isSecondTestMode -&gt; {&#13;&#10;                val seconds = secondsPassed % 60&#13;&#10;                val millis = (System.currentTimeMillis() % 1000) / 10&#13;&#10;                String.format(&quot;%02d:%02d&quot;, seconds, millis)&#13;&#10;            }&#13;&#10;            Constants.isMinuteTestMode -&gt; {&#13;&#10;                val minutes = secondsPassed / 60&#13;&#10;                val seconds = secondsPassed % 60&#13;&#10;                String.format(&quot;%02d:%02d&quot;, minutes, seconds)&#13;&#10;            }&#13;&#10;            else -&gt; {&#13;&#10;                val hours = (secondsPassed / 3600) % 24&#13;&#10;                val minutes = (secondsPassed / 60) % 60&#13;&#10;                String.format(&quot;%02d:%02d&quot;, hours, minutes)&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        tvTimeDetail.text = timeText&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#13;&#10;     */&#13;&#10;    private fun updateUI() {&#13;&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#13;&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#13;&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#13;&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#13;&#10;&#13;&#10;        if (completionFlag) {&#13;&#10;            tvDaysCount.text = targetDays.toString()&#13;&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#13;&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#13;&#10;            progressLevel.progress = 100&#13;&#10;            return&#13;&#10;        }&#13;&#10;&#13;&#10;        val currentTime = System.currentTimeMillis()&#13;&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#13;&#10;&#13;&#10;        // 테스트 모드에 따른 시간 계산&#13;&#10;        val timePassed = when {&#13;&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#13;&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#13;&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#13;&#10;        }&#13;&#10;&#13;&#10;        // 대형 숫자에 진행 중인 시간 표시&#13;&#10;        tvDaysCount.text = timePassed.toString()&#13;&#10;&#13;&#10;        // 진행률 계산&#13;&#10;        val targetSeconds = when {&#13;&#10;            Constants.isSecondTestMode -&gt; targetDays.toLong()&#13;&#10;            Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#13;&#10;            else -&gt; targetDays.toLong() * 24 * 60 * 60&#13;&#10;        }&#13;&#10;&#13;&#10;        val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#13;&#10;        progressLevel.progress = progress.coerceIn(0, 100)&#13;&#10;&#13;&#10;        // 타이머 표시 업데이트&#13;&#10;        updateTimeDisplay()&#13;&#10;&#13;&#10;        // 완료 조건 확인 - 초단위 테스트 모드에서는 초 단위로 비교&#13;&#10;        val isCompleted = when {&#13;&#10;            Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#13;&#10;            Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#13;&#10;            else -&gt; timePassed &gt; targetDays&#13;&#10;        }&#13;&#10;&#13;&#10;        if (isCompleted) {&#13;&#10;            tvDaysCount.text = targetDays.toString()&#13;&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#13;&#10;            progressLevel.progress = 100&#13;&#10;            handleGoalCompletion(targetDays)&#13;&#10;        } else {&#13;&#10;            // 남은 시간 계산 및 메시지 업데이트&#13;&#10;            val remainingTime = targetDays - timePassed + 1&#13;&#10;            tvMessage.text = &quot;목표까지 ${remainingTime}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun handleGoalCompletion(targetDays: Int) {&#13;&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#13;&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#13;&#10;        val endTime = System.currentTimeMillis()&#13;&#10;&#13;&#10;        with(sharedPref.edit()) {&#13;&#10;            putBoolean(&quot;timer_completed&quot;, true)&#13;&#10;            apply()&#13;&#10;        }&#13;&#10;&#13;&#10;        if (!goalAchievementChecked) {&#13;&#10;            goalAchievementChecked = true&#13;&#10;            // 타이머 즉시 중지&#13;&#10;            stopTimer()&#13;&#10;&#13;&#10;            // RecentActivityManager 초기화&#13;&#10;            RecentActivityManager.init(this)&#13;&#10;&#13;&#10;            // 완료된 활동을 RecentActivityManager에 저장&#13;&#10;            RecentActivityManager.saveCompletedActivity(&#13;&#10;                startTime,&#13;&#10;                endTime,&#13;&#10;                targetDays,&#13;&#10;                Constants.currentTestMode&#13;&#10;            )&#13;&#10;&#13;&#10;            // 완료된 기록을 먼저 저장&#13;&#10;            val recordId = saveCompletedRecord(startTime, endTime, targetDays, 1)&#13;&#10;&#13;&#10;            // 결과 화면 전환 지연 후 기록 요약 화면으로 이동&#13;&#10;            Handler(Looper.getMainLooper()).postDelayed({&#13;&#10;                // 기록 요약 화면으로 이동 (기록 ID 전달)&#13;&#10;                navigateToRecordSummary(recordId)&#13;&#10;            }, Constants.RESULT_SCREEN_DELAY.toLong())&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 완료된 금주 기록을 저장합니다&#13;&#10;     * @return 저장된 기록의 ID&#13;&#10;     */&#13;&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#13;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;saveCompletedRecord 시작: startTime=$startTime, endTime=$endTime, targetDays=$targetDays&quot;)&#13;&#10;&#13;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#13;&#10;        val startDate = dateFormat.format(Date(startTime))&#13;&#10;        val endDate = dateFormat.format(Date(endTime))&#13;&#10;&#13;&#10;        // 기록 ID 생성&#13;&#10;        val recordId = System.currentTimeMillis()&#13;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;생성된 recordId: $recordId&quot;)&#13;&#10;&#13;&#10;        // 테스트 모드일 때는 실제 경과 시간 대신 설정한 목표 시간을 그대로 사용&#13;&#10;        val achievedDays = if (Constants.isSecondTestMode || Constants.isMinuteTestMode) {&#13;&#10;            // 테스트 모드에서는 설정한 목표 시간 그대로 표시&#13;&#10;            targetDays&#13;&#10;        } else {&#13;&#10;            // 실제 모드에서만 실제 경과 시간 계산&#13;&#10;            ((endTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#13;&#10;        }&#13;&#10;&#13;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;테스트 모드: ${Constants.isSecondTestMode}, 설정된 일수: $targetDays, 기록될 일수: $achievedDays&quot;)&#13;&#10;&#13;&#10;        // 기록 객체 생성&#13;&#10;        val record = SobrietyRecord(&#13;&#10;            id = recordId,&#13;&#10;            startDate = startDate,&#13;&#10;            endDate = endDate,&#13;&#10;            duration = targetDays,&#13;&#10;            achievedDays = achievedDays, // 목표 시간을 그대로 사용&#13;&#10;            achievedLevel = level,&#13;&#10;            levelTitle = if (level &gt; 0 &amp;&amp; level &lt;= levelTitles.size) levelTitles[level - 1] else &quot;기본 레벨&quot;,&#13;&#10;            isCompleted = true&#13;&#10;        )&#13;&#10;&#13;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;생성된 기록: $record&quot;)&#13;&#10;&#13;&#10;        // 기존 기록 불러오기&#13;&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#13;&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#13;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;기존 기록 JSON: $recordsJson&quot;)&#13;&#10;&#13;&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#13;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;기존 기록 개수: ${records.size}&quot;)&#13;&#10;&#13;&#10;        // 새 기록 추가&#13;&#10;        records.add(record)&#13;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;새 기록 추가 후 총 개수: ${records.size}&quot;)&#13;&#10;&#13;&#10;        // 기록 저장&#13;&#10;        val newRecordsJson = SobrietyRecord.toJsonArray(records)&#13;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;저장할 JSON: $newRecordsJson&quot;)&#13;&#10;&#13;&#10;        with(sharedPref.edit()) {&#13;&#10;            putString(&quot;records&quot;, newRecordsJson)&#13;&#10;            val success = commit() // apply() 대신 commit()으로 즉시 저장&#13;&#10;            Log.d(&quot;StatusActivity&quot;, &quot;기록 저장 성공: $success&quot;)&#13;&#10;        }&#13;&#10;&#13;&#10;        // 저장 확인&#13;&#10;        val savedRecordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#13;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;저장 확인 JSON: $savedRecordsJson&quot;)&#13;&#10;&#13;&#10;        // 현재 진행중인 금주 데이터 초기화&#13;&#10;        with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#13;&#10;            clear()&#13;&#10;            apply()&#13;&#10;        }&#13;&#10;&#13;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;saveCompletedRecord 완료, 반환 ID: $recordId&quot;)&#13;&#10;        return recordId&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun saveActivity(isCompleted: Boolean) {&#13;&#10;        try {&#13;&#10;            val activity = RecentActivity(&#13;&#10;                startDate = abstainStartTime,&#13;&#10;                endDate = getCurrentDate(),&#13;&#10;                duration = calculateDuration(),&#13;&#10;                isSuccess = isCompleted&#13;&#10;            )&#13;&#10;            RecordManager.addActivity(activity)&#13;&#10;        } catch (e: Exception) {&#13;&#10;            // 날짜 파싱 오류 등이 발생하면 로그만 남기고 기본값 사용&#13;&#10;            android.util.Log.e(&quot;StatusActivity&quot;, &quot;Error saving activity: ${e.message}&quot;, e)&#13;&#10;            try {&#13;&#10;                val activity = RecentActivity(&#13;&#10;                    startDate = getCurrentDate(),&#13;&#10;                    endDate = getCurrentDate(),&#13;&#10;                    duration = 1,&#13;&#10;                    isSuccess = isCompleted&#13;&#10;                )&#13;&#10;                RecordManager.addActivity(activity)&#13;&#10;            } catch (fallbackError: Exception) {&#13;&#10;                android.util.Log.e(&quot;StatusActivity&quot;, &quot;Fallback save also failed: ${fallbackError.message}&quot;, fallbackError)&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun onGoalCompleted() {&#13;&#10;        saveActivity(true)&#13;&#10;        navigateToRecords()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun stopAbstaining() {&#13;&#10;        saveActivity(false)&#13;&#10;        // ...existing stop logic...&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun getCurrentDate(): String {&#13;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#13;&#10;        return dateFormat.format(Date())&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun calculateDuration(): Int {&#13;&#10;        return try {&#13;&#10;            if (abstainStartTime.isBlank()) {&#13;&#10;                // abstainStartTime이 비어있으면 SharedPreferences에서 시작 시간을 가져와서 계산&#13;&#10;                val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#13;&#10;                val startTimeMillis = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#13;&#10;                val currentTime = System.currentTimeMillis()&#13;&#10;                val daysPassed = ((currentTime - startTimeMillis) / (1000 * 60 * 60 * 24)).toInt()&#13;&#10;                return daysPassed + 1&#13;&#10;            }&#13;&#10;&#13;&#10;            val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#13;&#10;            val startDate = dateFormat.parse(abstainStartTime)&#13;&#10;            val currentDate = Date()&#13;&#10;&#13;&#10;            if (startDate != null) {&#13;&#10;                ((currentDate.time - startDate.time) / (1000 * 60 * 60 * 24)).toInt() + 1&#13;&#10;            } else {&#13;&#10;                1 // 기본값&#13;&#10;            }&#13;&#10;        } catch (e: Exception) {&#13;&#10;            android.util.Log.e(&quot;StatusActivity&quot;, &quot;Error calculating duration: ${e.message}&quot;, e)&#13;&#10;            1 // 오류 발생 시 기본값 반환&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun navigateToRecords() {&#13;&#10;        val intent = Intent(this, RecordsActivity::class.java)&#13;&#10;        startActivity(intent)&#13;&#10;        finish()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun navigateToRecordSummary(recordId: Long) {&#13;&#10;        val intent = Intent(this, DetailActivity::class.java)&#13;&#10;        intent.putExtra(&quot;record_id&quot;, recordId)&#13;&#10;        startActivity(intent)&#13;&#10;        finish()&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 눈에 잘 보이는 버튼이 있는 커스텀 중지 확인 다이얼로그를 표시합니다.&#13;&#10;     */&#13;&#10;    private fun showCustomStopDialog() {&#13;&#10;        // 커스텀 다이얼로그 생성&#13;&#10;        val dialog = android.app.Dialog(this)&#13;&#10;        dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#13;&#10;        dialog.setContentView(com.example.alcoholictimer.R.layout.dialog_stop_sobriety)&#13;&#10;&#13;&#10;        // 다이얼로그 배경을 투명하게 설정하고 외부 영역 클릭으로 닫히지 않게 설정&#13;&#10;        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)&#13;&#10;        dialog.setCancelable(false)&#13;&#10;&#13;&#10;        // 취소 버튼 클릭 리스너&#13;&#10;        val btnCancel = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnCancel)&#13;&#10;        btnCancel.setOnClickListener {&#13;&#10;            dialog.dismiss()&#13;&#10;        }&#13;&#10;&#13;&#10;        // 확인 버튼 클릭 리스너&#13;&#10;        val btnConfirm = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnConfirm)&#13;&#10;        btnConfirm.setOnClickListener {&#13;&#10;            dialog.dismiss()&#13;&#10;&#13;&#10;            // 중단된 활동 기록 저장&#13;&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#13;&#10;            val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#13;&#10;            val endTime = System.currentTimeMillis()&#13;&#10;&#13;&#10;            // RecentActivityManager 초기화 및 중단된 활동 저장&#13;&#10;            RecentActivityManager.init(this@StatusActivity)&#13;&#10;            RecentActivityManager.saveStoppedActivity(startTime, endTime, Constants.currentTestMode)&#13;&#10;&#13;&#10;            // SharedPreferences 초기화&#13;&#10;            with(sharedPref.edit()) {&#13;&#10;                clear()&#13;&#10;                apply()&#13;&#10;            }&#13;&#10;&#13;&#10;            // 시작 화면으로 이동&#13;&#10;            val intent = Intent(this@StatusActivity, MainActivity::class.java)&#13;&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#13;&#10;            startActivity(intent)&#13;&#10;            finish()&#13;&#10;&#13;&#10;            // 토스트 메시지 표시&#13;&#10;            Toast.makeText(this@StatusActivity, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;        }&#13;&#10;&#13;&#10;        // 다이얼로그 표시&#13;&#10;        dialog.show()&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun navigateToStart() {&#13;&#10;        val intent = Intent(this, StartActivity::class.java)&#13;&#10;        startActivity(intent)&#13;&#10;        overridePendingTransition(0, 0)&#13;&#10;        finish()&#13;&#10;        overridePendingTransition(0, 0)&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun updateTimeModeDisplay() {&#13;&#10;        val timeUnitText = when {&#13;&#10;            Constants.isSecondTestMode -&gt; &quot;금주 목표 초수&quot;&#13;&#10;            Constants.isMinuteTestMode -&gt; &quot;금주 목표 분수&quot;&#13;&#10;            else -&gt; &quot;금주 목표 일수&quot;&#13;&#10;        }&#13;&#10;        tvTimeUnit.text = timeUnitText&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 진행 상태를 확인하고 필요한 경우 목표 완료 처리를 합니다.&#13;&#10;     * 타이머에서 주기적으로 호출됩니다.&#13;&#10;     */&#13;&#10;    private fun checkProgressStatus() {&#13;&#10;        try {&#13;&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#13;&#10;            val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#13;&#10;            val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#13;&#10;            val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#13;&#10;&#13;&#10;            if (completionFlag) {&#13;&#10;                return  // 이미 완료된 상태면 처리하지 않음&#13;&#10;            }&#13;&#10;&#13;&#10;            val currentTime = System.currentTimeMillis()&#13;&#10;            val secondsPassed = (currentTime - startTime) / 1000L&#13;&#10;&#13;&#10;            // 진행률 계산&#13;&#10;            val targetSeconds = when {&#13;&#10;                Constants.isSecondTestMode -&gt; targetDays.toLong()&#13;&#10;                Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#13;&#10;                else -&gt; targetDays.toLong() * 24 * 60 * 60&#13;&#10;            }&#13;&#10;&#13;&#10;            // 진행률이 100을 초과하지 않도록 제한&#13;&#10;            val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#13;&#10;            val safeProgress = progress.coerceIn(0, 100)&#13;&#10;&#13;&#10;            // UI 업데이트는 runOnUiThread 내에서 수행&#13;&#10;            runOnUiThread {&#13;&#10;                progressLevel.progress = safeProgress&#13;&#10;&#13;&#10;                // 완료 조건 확인&#13;&#10;                val isCompleted = when {&#13;&#10;                    Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#13;&#10;                    Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#13;&#10;                    else -&gt; secondsPassed &gt;= (targetDays * 24 * 60 * 60)&#13;&#10;                }&#13;&#10;&#13;&#10;                if (isCompleted &amp;&amp; !goalAchievementChecked) {&#13;&#10;                    tvDaysCount.text = targetDays.toString()&#13;&#10;                    tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#13;&#10;                    progressLevel.progress = 100&#13;&#10;                    handleGoalCompletion(targetDays)&#13;&#10;                } else if (!isCompleted) {&#13;&#10;                    // 남은 시간 계산 및 메시지 업데이트&#13;&#10;                    val timePassed = when {&#13;&#10;                        Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#13;&#10;                        Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#13;&#10;                        else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#13;&#10;                    }&#13;&#10;                    val remainingTime = targetDays - timePassed + 1&#13;&#10;                    if (remainingTime &gt; 0) {&#13;&#10;                        tvMessage.text = &quot;목표까지 ${remainingTime}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#13;&#10;                    } else {&#13;&#10;                        tvMessage.text = &quot;목표 달성이 임박했습니다!&quot;&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;        } catch (e: Exception) {&#13;&#10;            // 에러 발생 시 로그만 남기고 앱은 계속 실행&#13;&#10;            android.util.Log.e(&quot;StatusActivity&quot;, &quot;Error in checkProgressStatus: ${e.message}&quot;, e)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 금주 시작 시간을 초기화합니다.&#13;&#10;     */&#13;&#10;    private fun initAbstainStartTime() {&#13;&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#13;&#10;        val startTimeMillis = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#13;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#13;&#10;        abstainStartTime = dateFormat.format(Date(startTimeMillis))&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.model.RecentActivity&#10;&#10;class RecentActivityAdapter : RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;    private val activities = ArrayList&lt;RecentActivity&gt;()&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val ivActivityIcon: ImageView = itemView.findViewById(R.id.ivActivityIcon)&#10;        val tvEndDate: TextView = itemView.findViewById(R.id.tvEndDate)&#10;        val tvActivityTitle: TextView = itemView.findViewById(R.id.tvActivityTitle)&#10;        val tvDuration: TextView = itemView.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val tvSavedMoney: TextView = itemView.findViewById(R.id.tvSavedMoney)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        &#10;        holder.tvEndDate.text = activity.endDate&#10;        holder.tvActivityTitle.text = activity.title&#10;        holder.tvDuration.text = &quot;${activity.duration}일 ${activity.hours}시간&quot;&#10;        holder.tvStatus.text = if(activity.isSuccess) &quot;성공&quot; else &quot;실패&quot;&#10;        holder.tvSavedMoney.text = &quot;${activity.savedMoney}만원 절약&quot;&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;&#10;    fun updateActivities(newActivities: List&lt;RecentActivity&gt;) {&#10;        activities.clear()&#10;        activities.addAll(newActivities.take(5)) // 최대 5개까지만 표시&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_detail.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_detail.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;#FFFFFF&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;0dp&quot;&gt;&#10;&#10;        &lt;!-- 상단 헤더 라인 --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;2dp&quot;&#10;            android:background=&quot;#000000&quot; /&gt;&#10;&#10;        &lt;!-- 제목 섹션 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:padding=&quot;16dp&quot;&#10;            android:background=&quot;#FFFFFF&quot;&gt;&#10;&#10;            &lt;!-- 뒤로가기 버튼 --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/btnBack&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;&lt;&quot;&#10;                android:textSize=&quot;20sp&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:paddingEnd=&quot;16dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot; /&gt;&#10;&#10;            &lt;!-- 제목 --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;알중 일기&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:gravity=&quot;center&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 구분선 --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;2dp&quot;&#10;            android:background=&quot;#000000&quot; /&gt;&#10;&#10;        &lt;!-- 날짜/시간 정보 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvDateTime&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;오늘 - 오후 11:38&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvRecordTitle&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;5월 1주 금주 기록&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 구분선 --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;2dp&quot;&#10;            android:background=&quot;#000000&quot; /&gt;&#10;&#10;        &lt;!-- 메인 통계 섹션 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&gt;&#10;&#10;            &lt;!-- 큰 숫자 --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvMainNumber&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;7&quot;&#10;                android:textSize=&quot;48sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;!-- 단위 --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvMainUnit&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;일&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;            &lt;!-- 통계 정보 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvTotalDays&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:text=&quot;총 7일&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;#000000&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;  |  &quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;#000000&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvLevel&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:text=&quot;Level 1&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;#000000&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;  |  &quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;#000000&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvSavedMoney&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:text=&quot;14,000원&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;#000000&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 구분선 --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;2dp&quot;&#10;            android:background=&quot;#000000&quot; /&gt;&#10;&#10;        &lt;!-- 응원 메시지 섹션 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;응원 메시지:&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvEncouragementMessage&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;첫걸음 성공! 계속 도전하세요.&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:textStyle=&quot;italic&quot;&#10;                android:gravity=&quot;start&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 하단 구분선 --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;2dp&quot;&#10;            android:background=&quot;#000000&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;#FFFFFF&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;0dp&quot;&gt;&#10;&#10;        &lt;!-- 상단 헤더 라인 --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;2dp&quot;&#10;            android:background=&quot;#000000&quot; /&gt;&#10;&#10;        &lt;!-- 제목 섹션 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center_vertical&quot;&#10;            android:padding=&quot;16dp&quot;&#10;            android:background=&quot;#FFFFFF&quot;&gt;&#10;&#10;            &lt;!-- 뒤로가기 버튼 --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/btnBack&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;&amp;lt;&quot;&#10;                android:textSize=&quot;20sp&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:paddingEnd=&quot;16dp&quot;&#10;                android:clickable=&quot;true&quot;&#10;                android:focusable=&quot;true&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot; /&gt;&#10;&#10;            &lt;!-- 제목 --&gt;&#10;            &lt;TextView&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;알중 일기&quot;&#10;                android:textSize=&quot;18sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:gravity=&quot;center&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 구분선 --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;2dp&quot;&#10;            android:background=&quot;#000000&quot; /&gt;&#10;&#10;        &lt;!-- 날짜/시간 정보 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvDateTime&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;오늘 - 오후 11:38&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvRecordTitle&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;5월 1주 금주 기록&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 구분선 --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;2dp&quot;&#10;            android:background=&quot;#000000&quot; /&gt;&#10;&#10;        &lt;!-- 메인 통계 섹션 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&gt;&#10;&#10;            &lt;!-- 큰 숫자 --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvMainNumber&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;7&quot;&#10;                android:textSize=&quot;48sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;!-- 단위 --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvMainUnit&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;일&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;            &lt;!-- 통계 정보 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvTotalDays&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:text=&quot;총 7일&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;#000000&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;  |  &quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;#000000&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvLevel&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:text=&quot;Level 1&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;#000000&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;wrap_content&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;  |  &quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;#000000&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvSavedMoney&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:text=&quot;14,000원&quot;&#10;                    android:textSize=&quot;14sp&quot;&#10;                    android:textColor=&quot;#000000&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 구분선 --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;2dp&quot;&#10;            android:background=&quot;#000000&quot; /&gt;&#10;&#10;        &lt;!-- 응원 메시지 섹션 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:padding=&quot;16dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;응원 메시지:&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvEncouragementMessage&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;첫걸음 성공! 계속 도전하세요.&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;#000000&quot;&#10;                android:textStyle=&quot;italic&quot;&#10;                android:gravity=&quot;start&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 하단 구분선 --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;2dp&quot;&#10;            android:background=&quot;#000000&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>