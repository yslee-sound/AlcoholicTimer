<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.google.android.material.navigation.NavigationView&#10;import java.util.Date&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity() {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 최신 상태로 업데이트&#10;            updateNavigationDrawer()&#10;            drawerLayout.open()&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener { menuItem -&gt;&#10;            when (menuItem.itemId) {&#10;                R.id.nav_start -&gt; {&#10;                    if (this !is StartActivity) {&#10;                        startActivity(Intent(this, StartActivity::class.java))&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_records -&gt; {&#10;                    // 활동 보기 화면으로 이동&#10;                    if (this !is RecordsActivity) {&#10;                        val intent = Intent(this, RecordsActivity::class.java)&#10;                        startActivity(intent)&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_challenge -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_messages -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_settings -&gt; {&#10;                    Toast.makeText(this, &quot;설정 기능은 준비 중입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;            drawerLayout.close()&#10;            true&#10;        }&#10;&#10;        // 각 액티비티의 레이아웃을 contentFrame에 추가&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태와 헤더 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationDrawer() {&#10;        // 네비게이션 메뉴 상태 업데이트&#10;        updateNavigationMenuState()&#10;&#10;        // 네비게이션 헤더 정보 업데이트&#10;        updateNavigationHeader()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 이미 금주를 시작했다면 금주 시작 메뉴를 비활성화합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주가 이미 시작되었으면 시작 메뉴 비활성화&#10;        val startMenuItem = navigationView.menu.findItem(R.id.nav_start)&#10;        startMenuItem.isEnabled = !hasStarted&#10;&#10;        // 금주가 시작되었을 때만 상태 메뉴 활성화&#10;        val statusMenuItem = navigationView.menu.findItem(R.id.nav_records)&#10;        statusMenuItem.isEnabled = hasStarted&#10;    }&#10;&#10;    /**&#10;     * 네비게이션 헤더의 사용자 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationHeader() {&#10;        val headerView = navigationView.getHeaderView(0)&#10;        if (headerView != null) {&#10;            val tvUserNickname = headerView.findViewById&lt;TextView&gt;(R.id.tvUserNickname)&#10;            val tvUserLevelDays = headerView.findViewById&lt;TextView&gt;(R.id.tvUserLevelDays)&#10;&#10;            // 사용자 이름은 기본값으로 &quot;알중이&quot; 사용&#10;            tvUserNickname.text = &quot;알중이&quot;&#10;&#10;            // 금주 상태에 따른 레벨 및 일수 정보 업데이트&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            if (sharedPref.contains(&quot;start_time&quot;)) {&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, Date().time)&#10;                val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;                // 레벨 계산 (시간 단위에 따라 적절한 마일스톤 사용)&#10;                val adjustedMilestones = when {&#10;                    Constants.SECOND_TEST_MODE -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                    Constants.TEST_MODE -&gt; listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;                    else -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                }&#10;&#10;                var currentLevel = 1&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i + 1&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                tvUserLevelDays.text = &quot;Level $currentLevel · ${timePassed}${Constants.TIME_UNIT_TEXT} 금주 중&quot;&#10;            } else {&#10;                tvUserLevelDays.text = &quot;금주를 시작해보세요!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.google.android.material.navigation.NavigationView&#10;import java.util.Date&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity() {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 최신 상태로 업데이트&#10;            updateNavigationDrawer()&#10;            drawerLayout.open()&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener { menuItem -&gt;&#10;            when (menuItem.itemId) {&#10;                R.id.nav_start -&gt; {&#10;                    if (this !is StartActivity) {&#10;                        startActivity(Intent(this, StartActivity::class.java))&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_records -&gt; {&#10;                    // 활동 보기 화면으로 이동&#10;                    Toast.makeText(this, &quot;활동 보기로 이동합니다&quot;, Toast.LENGTH_SHORT).show()&#10;                    if (this !is RecordsActivity) {&#10;                        val intent = Intent(this, RecordsActivity::class.java)&#10;                        startActivity(intent)&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_challenge -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_messages -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_settings -&gt; {&#10;                    Toast.makeText(this, &quot;설정 기능은 준비 중입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;            drawerLayout.close()&#10;            true&#10;        }&#10;&#10;        // 각 액티비티의 레이아웃을 contentFrame에 추가&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태와 헤더 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationDrawer() {&#10;        // 네비게이션 메뉴 상태 업데이트&#10;        updateNavigationMenuState()&#10;&#10;        // 네비게이션 헤더 정보 업데이트&#10;        updateNavigationHeader()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 이미 금주를 시작했다면 금주 시작 메뉴를 비활성화합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주가 이미 시작되었으면 시작 메뉴 비활성화&#10;        val startMenuItem = navigationView.menu.findItem(R.id.nav_start)&#10;        startMenuItem.isEnabled = !hasStarted&#10;&#10;        // 금주가 시작되었을 때만 상태 메뉴 활성화&#10;        val statusMenuItem = navigationView.menu.findItem(R.id.nav_records)&#10;        statusMenuItem.isEnabled = hasStarted&#10;    }&#10;&#10;    /**&#10;     * 네비게이션 헤더의 사용자 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationHeader() {&#10;        val headerView = navigationView.getHeaderView(0)&#10;        if (headerView != null) {&#10;            val tvUserNickname = headerView.findViewById&lt;TextView&gt;(R.id.tvUserNickname)&#10;            val tvUserLevelDays = headerView.findViewById&lt;TextView&gt;(R.id.tvUserLevelDays)&#10;&#10;            // 사용자 이름은 기본값으로 &quot;알중이&quot; 사용&#10;            tvUserNickname.text = &quot;알중이&quot;&#10;&#10;            // 금주 상태에 따른 레벨 및 일수 정보 업데이트&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            if (sharedPref.contains(&quot;start_time&quot;)) {&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, Date().time)&#10;                val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;                // 레벨 계산 (시간 단위에 따라 적절한 마일스톤 사용)&#10;                val adjustedMilestones = when {&#10;                    Constants.SECOND_TEST_MODE -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                    Constants.TEST_MODE -&gt; listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;                    else -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                }&#10;&#10;                var currentLevel = 1&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i + 1&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                tvUserLevelDays.text = &quot;Level $currentLevel · ${timePassed}${Constants.TIME_UNIT_TEXT} 금주 중&quot;&#10;            } else {&#10;                tvUserLevelDays.text = &quot;금주를 시작해보세요!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/LevelHistoryAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/LevelHistoryAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;&#10;class LevelHistoryAdapter(private val historyList: List&lt;LevelHistoryItem&gt;) : &#10;    RecyclerView.Adapter&lt;LevelHistoryAdapter.HistoryViewHolder&gt;() {&#10;    &#10;    class HistoryViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val tvDate: TextView = itemView.findViewById(R.id.tvDate)&#10;        val tvAchievement: TextView = itemView.findViewById(R.id.tvAchievement)&#10;    }&#10;    &#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): HistoryViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_level_history, parent, false)&#10;        return HistoryViewHolder(view)&#10;    }&#10;    &#10;    override fun onBindViewHolder(holder: HistoryViewHolder, position: Int) {&#10;        val item = historyList[position]&#10;        holder.tvDate.text = item.date&#10;        holder.tvAchievement.text = item.achievement&#10;    }&#10;    &#10;    override fun getItemCount() = historyList.size&#10;}&#10;&#10;data class LevelHistoryItem(&#10;    val date: String,&#10;    val achievement: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordsActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.graphics.Color&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.widget.Button&#10;import android.widget.FrameLayout&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;import java.time.temporal.ChronoUnit&#10;import java.time.temporal.WeekFields&#10;import java.util.Locale&#10;&#10;class RecordsActivity : AppCompatActivity() {&#10;&#10;    private lateinit var tvWeeklyCount: TextView&#10;    private lateinit var tvMonthlyCount: TextView&#10;    private lateinit var tvTotalCount: TextView&#10;    private lateinit var tvSummary: TextView&#10;    private lateinit var tvPeriodSummary: TextView&#10;    private lateinit var tvTotalAbstinence: TextView&#10;    private lateinit var tvLongestStreak: TextView&#10;    private lateinit var tvLastFailure: TextView&#10;    private lateinit var chartContainer: FrameLayout&#10;    private lateinit var rvLevelHistory: RecyclerView&#10;&#10;    private lateinit var btnWeek: Button&#10;    private lateinit var btnMonth: Button&#10;    private lateinit var btnYear: Button&#10;    private lateinit var btnAll: Button&#10;&#10;    private var startDate: LocalDate? = null&#10;    private var currentPeriod = Period.ALL&#10;&#10;    private enum class Period {&#10;        WEEK, MONTH, YEAR, ALL&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_records)&#10;&#10;        // View 초기화&#10;        initViews()&#10;&#10;        // 버튼 클릭 리스너 설정&#10;        setupButtonListeners()&#10;&#10;        // 데이터 로드 및 표시&#10;        loadAndDisplayData()&#10;    }&#10;&#10;    private fun initViews() {&#10;        tvWeeklyCount = findViewById(R.id.tvWeeklyCount)&#10;        tvMonthlyCount = findViewById(R.id.tvMonthlyCount)&#10;        tvTotalCount = findViewById(R.id.tvTotalCount)&#10;        tvSummary = findViewById(R.id.tvSummary)&#10;        tvPeriodSummary = findViewById(R.id.tvPeriodSummary)&#10;        tvTotalAbstinence = findViewById(R.id.tvTotalAbstinence)&#10;        tvLongestStreak = findViewById(R.id.tvLongestStreak)&#10;        tvLastFailure = findViewById(R.id.tvLastFailure)&#10;        chartContainer = findViewById(R.id.chartContainer)&#10;        rvLevelHistory = findViewById(R.id.rvLevelHistory)&#10;&#10;        btnWeek = findViewById(R.id.btnWeek)&#10;        btnMonth = findViewById(R.id.btnMonth)&#10;        btnYear = findViewById(R.id.btnYear)&#10;        btnAll = findViewById(R.id.btnAll)&#10;&#10;        // RecyclerView 설정&#10;        rvLevelHistory.layoutManager = LinearLayoutManager(this)&#10;    }&#10;&#10;    private fun setupButtonListeners() {&#10;        btnWeek.setOnClickListener {&#10;            currentPeriod = Period.WEEK&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnMonth.setOnClickListener {&#10;            currentPeriod = Period.MONTH&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnYear.setOnClickListener {&#10;            currentPeriod = Period.YEAR&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnAll.setOnClickListener {&#10;            currentPeriod = Period.ALL&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;    }&#10;&#10;    private fun updatePeriodUI() {&#10;        // 모든 버튼 기본 스타일로 초기화&#10;        btnWeek.setBackgroundColor(Color.LTGRAY)&#10;        btnMonth.setBackgroundColor(Color.LTGRAY)&#10;        btnYear.setBackgroundColor(Color.LTGRAY)&#10;        btnAll.setBackgroundColor(Color.LTGRAY)&#10;&#10;        // 선택된 버튼 강조&#10;        when(currentPeriod) {&#10;            Period.WEEK -&gt; {&#10;                btnWeek.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 주&quot;&#10;            }&#10;            Period.MONTH -&gt; {&#10;                btnMonth.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 월&quot;&#10;            }&#10;            Period.YEAR -&gt; {&#10;                btnYear.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 년&quot;&#10;            }&#10;            Period.ALL -&gt; {&#10;                btnAll.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 전체&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadAndDisplayData() {&#10;        // SharedPreferences에서 시작일 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;AlcoholicPrefs&quot;, MODE_PRIVATE)&#10;        val startDateStr = sharedPref.getString(&quot;start_date&quot;, null)&#10;&#10;        if (startDateStr != null) {&#10;            startDate = LocalDate.parse(startDateStr)&#10;            val today = LocalDate.now()&#10;&#10;            // 기본 통계 업데이트&#10;            updateBasicStatistics(today)&#10;&#10;            // 기간별 통계 업데이트&#10;            updatePeriodStatistics(today)&#10;&#10;            // 레벨 히스토리 업데이트&#10;            updateLevelHistory()&#10;        }&#10;    }&#10;&#10;    private fun updateBasicStatistics(today: LocalDate) {&#10;        startDate?.let { start -&gt;&#10;            // 전체 금주 일수&#10;            val totalDays = ChronoUnit.DAYS.between(start, today).toInt() + 1 // 오늘 포함&#10;&#10;            // 이번 주 금주 일수&#10;            val weekFields = WeekFields.of(Locale.getDefault())&#10;            val thisWeekStart = today.with(weekFields.dayOfWeek(), 1)&#10;            val weeklyDays = if (start.isAfter(thisWeekStart)) {&#10;                ChronoUnit.DAYS.between(start, today).toInt() + 1&#10;            } else {&#10;                ChronoUnit.DAYS.between(thisWeekStart, today).toInt() + 1&#10;            }&#10;&#10;            // 이번 달 금주 일수&#10;            val thisMonthStart = today.withDayOfMonth(1)&#10;            val monthlyDays = if (start.isAfter(thisMonthStart)) {&#10;                ChronoUnit.DAYS.between(start, today).toInt() + 1&#10;            } else {&#10;                ChronoUnit.DAYS.between(thisMonthStart, today).toInt() + 1&#10;            }&#10;&#10;            // UI 업데이트&#10;            tvWeeklyCount.text = &quot;${weeklyDays}일&quot;&#10;            tvMonthlyCount.text = &quot;${monthlyDays}일&quot;&#10;            tvTotalCount.text = &quot;${totalDays}일&quot;&#10;&#10;            // 요약 메시지&#10;            val summaryMessage = when {&#10;                totalDays &gt;= 365 -&gt; &quot;1년 이상 금주를 실천하셨네요! 정말 대단합니다! &quot;&#10;                totalDays &gt;= 180 -&gt; &quot;6개월 이상 금주를 지속하고 계시네요! &quot;&#10;                totalDays &gt;= 90 -&gt; &quot;3개월 동안 꾸준히 실천하셨어요! &quot;&#10;                totalDays &gt;= 30 -&gt; &quot;한 달 동안 잘 해내고 계세요! ⭐&quot;&#10;                else -&gt; &quot;금주를 시작한지 ${totalDays}일이 지났습니다.&quot;&#10;            }&#10;            tvSummary.text = summaryMessage&#10;&#10;            // 최고 기록 업데이트&#10;            tvTotalAbstinence.text = &quot;전체 누적 금주 일수: ${totalDays}일&quot;&#10;            tvLongestStreak.text = &quot;최장 연속 금주 기록: ${totalDays}일&quot; // 예제에서는 실패 없이 연속으로 진행&#10;            tvLastFailure.text = &quot;마지막 금주 실패: 없음&quot; // 예제에서는 실패가 없다고 가정&#10;        }&#10;    }&#10;&#10;    private fun updatePeriodStatistics(today: LocalDate) {&#10;        // 여기서 기간별 통계를 표시할 수 있습니다&#10;        // 이 예제에서는 단순화를 위해 코드를 생략합니다&#10;        // 실제로는 기간에 따른 그래프 등을 표시할 수 있습니다&#10;    }&#10;&#10;    private fun updateLevelHistory() {&#10;        // 예시 데이터 (실제로는 SharedPreferences나 DB에서 가져와야 함)&#10;        val formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;)&#10;        val levelHistory = mutableListOf&lt;LevelHistoryItem&gt;()&#10;&#10;        startDate?.let { start -&gt;&#10;            val today = LocalDate.now()&#10;            var currentDate = start&#10;            var level = 1&#10;&#10;            // 레벨 달성 예시 데이터 생성&#10;            // 실제 앱에서는 저장된 레벨 달성 히스토리를 가져와야 함&#10;            while (!currentDate.isAfter(today) &amp;&amp; level &lt;= 7) {&#10;                // 7일마다 레벨업 (예시)&#10;                if (ChronoUnit.DAYS.between(start, currentDate) % 7 == 0) {&#10;                    levelHistory.add(LevelHistoryItem(&#10;                        currentDate.format(formatter),&#10;                        &quot;Level ${level} 달성!&quot;&#10;                    ))&#10;                    level++&#10;                }&#10;                // 일부 날짜는 금주 성공 기록 추가&#10;                else if (ChronoUnit.DAYS.between(start, currentDate) % 3 == 0) {&#10;                    levelHistory.add(LevelHistoryItem(&#10;                        currentDate.format(formatter),&#10;                        &quot;금주 성공&quot;&#10;                    ))&#10;                }&#10;&#10;                currentDate = currentDate.plusDays(1)&#10;            }&#10;&#10;            // RecyclerView에 어댑터 설정&#10;            rvLevelHistory.adapter = LevelHistoryAdapter(levelHistory)&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.graphics.Color&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.widget.Button&#10;import android.widget.FrameLayout&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import java.time.LocalDate&#10;import java.time.format.DateTimeFormatter&#10;import java.time.temporal.ChronoUnit&#10;import java.time.temporal.WeekFields&#10;import java.util.Locale&#10;&#10;class RecordsActivity : AppCompatActivity() {&#10;&#10;    private lateinit var tvWeeklyCount: TextView&#10;    private lateinit var tvMonthlyCount: TextView&#10;    private lateinit var tvTotalCount: TextView&#10;    private lateinit var tvSummary: TextView&#10;    private lateinit var tvPeriodSummary: TextView&#10;    private lateinit var tvTotalAbstinence: TextView&#10;    private lateinit var tvLongestStreak: TextView&#10;    private lateinit var tvLastFailure: TextView&#10;    private lateinit var chartContainer: FrameLayout&#10;    private lateinit var rvLevelHistory: RecyclerView&#10;&#10;    private lateinit var btnWeek: Button&#10;    private lateinit var btnMonth: Button&#10;    private lateinit var btnYear: Button&#10;    private lateinit var btnAll: Button&#10;&#10;    private var startDate: LocalDate? = null&#10;    private var currentPeriod = Period.ALL&#10;&#10;    private enum class Period {&#10;        WEEK, MONTH, YEAR, ALL&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_records)&#10;&#10;        // View 초기화&#10;        initViews()&#10;&#10;        // 버튼 클릭 리스너 설정&#10;        setupButtonListeners()&#10;&#10;        // 데이터 로드 및 표시&#10;        loadAndDisplayData()&#10;    }&#10;&#10;    private fun initViews() {&#10;        tvWeeklyCount = findViewById(R.id.tvWeeklyCount)&#10;        tvMonthlyCount = findViewById(R.id.tvMonthlyCount)&#10;        tvTotalCount = findViewById(R.id.tvTotalCount)&#10;        tvSummary = findViewById(R.id.tvSummary)&#10;        tvPeriodSummary = findViewById(R.id.tvPeriodSummary)&#10;        tvTotalAbstinence = findViewById(R.id.tvTotalAbstinence)&#10;        tvLongestStreak = findViewById(R.id.tvLongestStreak)&#10;        tvLastFailure = findViewById(R.id.tvLastFailure)&#10;        chartContainer = findViewById(R.id.chartContainer)&#10;        rvLevelHistory = findViewById(R.id.rvLevelHistory)&#10;&#10;        btnWeek = findViewById(R.id.btnWeek)&#10;        btnMonth = findViewById(R.id.btnMonth)&#10;        btnYear = findViewById(R.id.btnYear)&#10;        btnAll = findViewById(R.id.btnAll)&#10;&#10;        // RecyclerView 설정&#10;        rvLevelHistory.layoutManager = LinearLayoutManager(this)&#10;    }&#10;&#10;    private fun setupButtonListeners() {&#10;        btnWeek.setOnClickListener {&#10;            currentPeriod = Period.WEEK&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnMonth.setOnClickListener {&#10;            currentPeriod = Period.MONTH&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnYear.setOnClickListener {&#10;            currentPeriod = Period.YEAR&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;&#10;        btnAll.setOnClickListener {&#10;            currentPeriod = Period.ALL&#10;            updatePeriodUI()&#10;            loadAndDisplayData()&#10;        }&#10;    }&#10;&#10;    private fun updatePeriodUI() {&#10;        // 모든 버튼 기본 스타일로 초기화&#10;        btnWeek.setBackgroundColor(Color.LTGRAY)&#10;        btnMonth.setBackgroundColor(Color.LTGRAY)&#10;        btnYear.setBackgroundColor(Color.LTGRAY)&#10;        btnAll.setBackgroundColor(Color.LTGRAY)&#10;&#10;        // 선택된 버튼 강조&#10;        when(currentPeriod) {&#10;            Period.WEEK -&gt; {&#10;                btnWeek.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 주&quot;&#10;            }&#10;            Period.MONTH -&gt; {&#10;                btnMonth.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 월&quot;&#10;            }&#10;            Period.YEAR -&gt; {&#10;                btnYear.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 년&quot;&#10;            }&#10;            Period.ALL -&gt; {&#10;                btnAll.setBackgroundColor(Color.DKGRAY)&#10;                tvPeriodSummary.text = &quot;선택 기간: 전체&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun loadAndDisplayData() {&#10;        // SharedPreferences에서 시작일 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;AlcoholicPrefs&quot;, MODE_PRIVATE)&#10;        val startDateStr = sharedPref.getString(&quot;start_date&quot;, null)&#10;&#10;        if (startDateStr != null) {&#10;            startDate = LocalDate.parse(startDateStr)&#10;            val today = LocalDate.now()&#10;&#10;            // 기본 통계 업데이트&#10;            updateBasicStatistics(today)&#10;&#10;            // 기간별 통계 업데이트&#10;            updatePeriodStatistics(today)&#10;&#10;            // 레벨 히스토리 업데이트&#10;            updateLevelHistory()&#10;        }&#10;    }&#10;&#10;    private fun updateBasicStatistics(today: LocalDate) {&#10;        startDate?.let { start -&gt;&#10;            // 전체 금주 일수&#10;            val totalDays = ChronoUnit.DAYS.between(start, today).toInt() + 1 // 오늘 포함&#10;&#10;            // 이번 주 금주 일수&#10;            val weekFields = WeekFields.of(Locale.getDefault())&#10;            val thisWeekStart = today.with(weekFields.dayOfWeek(), 1)&#10;            val weeklyDays = if (start.isAfter(thisWeekStart)) {&#10;                ChronoUnit.DAYS.between(start, today).toInt() + 1&#10;            } else {&#10;                ChronoUnit.DAYS.between(thisWeekStart, today).toInt() + 1&#10;            }&#10;&#10;            // 이번 달 금주 일수&#10;            val thisMonthStart = today.withDayOfMonth(1)&#10;            val monthlyDays = if (start.isAfter(thisMonthStart)) {&#10;                ChronoUnit.DAYS.between(start, today).toInt() + 1&#10;            } else {&#10;                ChronoUnit.DAYS.between(thisMonthStart, today).toInt() + 1&#10;            }&#10;&#10;            // UI 업데이트&#10;            tvWeeklyCount.text = &quot;${weeklyDays}일&quot;&#10;            tvMonthlyCount.text = &quot;${monthlyDays}일&quot;&#10;            tvTotalCount.text = &quot;${totalDays}일&quot;&#10;&#10;            // 요약 메시지&#10;            val summaryMessage = when {&#10;                totalDays &gt;= 365 -&gt; &quot;1년 이상 금주를 실천하셨네요! 정말 대단합니다! &quot;&#10;                totalDays &gt;= 180 -&gt; &quot;6개월 이상 금주를 지속하고 계시네요! &quot;&#10;                totalDays &gt;= 90 -&gt; &quot;3개월 동안 꾸준히 실천하셨어요! &quot;&#10;                totalDays &gt;= 30 -&gt; &quot;한 달 동안 잘 해내고 계세요! ⭐&quot;&#10;                else -&gt; &quot;금주를 시작한지 ${totalDays}일이 지났습니다.&quot;&#10;            }&#10;            tvSummary.text = summaryMessage&#10;&#10;            // 최고 기록 업데이트&#10;            tvTotalAbstinence.text = &quot;전체 누적 금주 일수: ${totalDays}일&quot;&#10;            tvLongestStreak.text = &quot;최장 연속 금주 기록: ${totalDays}일&quot; // 예제에서는 실패 없이 연속으로 진행&#10;            tvLastFailure.text = &quot;마지막 금주 실패: 없음&quot; // 예제에서는 실패가 없다고 가정&#10;        }&#10;    }&#10;&#10;    private fun updatePeriodStatistics(today: LocalDate) {&#10;        // 여기서 기간별 통계를 표시할 수 있습니다&#10;        // 이 예제에서는 단순화를 위해 코드를 생략합니다&#10;        // 실제로는 기간에 따른 그래프 등을 표시할 수 있습니다&#10;    }&#10;&#10;    private fun updateLevelHistory() {&#10;        // 예시 데이터 (실제로는 SharedPreferences나 DB에서 가져와야 함)&#10;        val formatter = DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;)&#10;        val levelHistory = mutableListOf&lt;LevelHistoryItem&gt;()&#10;&#10;        startDate?.let { start -&gt;&#10;            val today = LocalDate.now()&#10;            var currentDate = start&#10;            var level = 1&#10;&#10;            // 레벨 달성 예시 데이터 생성&#10;            // 실제 앱에서는 저장된 레벨 달성 히스토리를 가져와야 함&#10;            while (!currentDate.isAfter(today) &amp;&amp; level &lt;= 7) {&#10;                // 7일마다 레벨업 (예시)&#10;                val daysBetween = ChronoUnit.DAYS.between(start, currentDate)&#10;                if (daysBetween % 7L == 0L) {&#10;                    levelHistory.add(LevelHistoryItem(&#10;                        currentDate.format(formatter),&#10;                        &quot;Level ${level} 달성!&quot;&#10;                    ))&#10;                    level++&#10;                }&#10;                // 일부 날짜는 금주 성공 기록 추가&#10;                else if (daysBetween % 3L == 0L) {&#10;                    levelHistory.add(LevelHistoryItem(&#10;                        currentDate.format(formatter),&#10;                        &quot;금주 성공&quot;&#10;                    ))&#10;                }&#10;&#10;                currentDate = currentDate.plusDays(1)&#10;            }&#10;&#10;            // RecyclerView에 어댑터 설정&#10;            rvLevelHistory.adapter = LevelHistoryAdapter(levelHistory)&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/circle_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/circle_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;@color/text_accent&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_records.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_records.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:padding=&quot;24dp&quot;&#10;    android:background=&quot;@color/background&quot;&gt;&#10;&#10;    &lt;TextView&#10;        style=&quot;@style/TextTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;금주 활동 기록&quot;&#10;        android:layout_gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;24dp&quot;/&gt;&#10;&#10;    &lt;!-- 통계 카드 --&gt;&#10;    &lt;LinearLayout&#10;        style=&quot;@style/CardLevel&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- 주간 통계 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;이번 주&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;@color/text_primary&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvWeeklyCount&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;0일&quot;&#10;                android:textSize=&quot;24sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/text_accent&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 월간 통계 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;이번 달&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;@color/text_primary&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvMonthlyCount&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;0일&quot;&#10;                android:textSize=&quot;24sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/text_accent&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 전체 통계 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&gt;&#10;&#10;            &lt;TextView&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;전체&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;@color/text_primary&quot;/&gt;&#10;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvTotalCount&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;0일&quot;&#10;                android:textSize=&quot;24sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;@color/text_accent&quot;&#10;                android:layout_marginTop=&quot;8dp&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvSummary&quot;&#10;        style=&quot;@style/TextMessage&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;금주를 시작한지 0일이 지났습니다.&quot;&#10;        android:layout_marginTop=&quot;16dp&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    android:background=&quot;@color/background&quot;&gt;&#13;&#10;&#13;&#10;    &lt;LinearLayout&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:orientation=&quot;vertical&quot;&#13;&#10;        android:padding=&quot;16dp&quot;&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            style=&quot;@style/TextTitle&quot;&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:text=&quot;금주 활동 기록&quot;&#13;&#10;            android:layout_gravity=&quot;center&quot;&#13;&#10;            android:layout_marginBottom=&quot;16dp&quot;/&gt;&#13;&#10;&#13;&#10;        &lt;!-- 기간 선택 탭 --&gt;&#13;&#10;        &lt;HorizontalScrollView&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:scrollbars=&quot;none&quot;&gt;&#13;&#10;            &#13;&#10;            &lt;LinearLayout&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:orientation=&quot;horizontal&quot;&gt;&#13;&#10;                &#13;&#10;                &lt;Button&#13;&#10;                    android:id=&quot;@+id/btnWeek&quot;&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;주&quot;&#13;&#10;                    android:layout_marginEnd=&quot;8dp&quot;&#13;&#10;                    style=&quot;@style/Widget.AppCompat.Button.Colored&quot;/&gt;&#13;&#10;                &#13;&#10;                &lt;Button&#13;&#10;                    android:id=&quot;@+id/btnMonth&quot;&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;월&quot;&#13;&#10;                    android:layout_marginEnd=&quot;8dp&quot;&#13;&#10;                    style=&quot;@style/Widget.AppCompat.Button.Colored&quot;/&gt;&#13;&#10;                &#13;&#10;                &lt;Button&#13;&#10;                    android:id=&quot;@+id/btnYear&quot;&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;년&quot;&#13;&#10;                    android:layout_marginEnd=&quot;8dp&quot;&#13;&#10;                    style=&quot;@style/Widget.AppCompat.Button.Colored&quot;/&gt;&#13;&#10;                &#13;&#10;                &lt;Button&#13;&#10;                    android:id=&quot;@+id/btnAll&quot;&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;전체&quot;&#13;&#10;                    style=&quot;@style/Widget.AppCompat.Button.Colored&quot;/&gt;&#13;&#10;            &lt;/LinearLayout&gt;&#13;&#10;        &lt;/HorizontalScrollView&gt;&#13;&#10;&#13;&#10;        &lt;!-- 요약 정보 --&gt;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/tvPeriodSummary&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:text=&quot;선택 기간: 전체&quot;&#13;&#10;            android:textStyle=&quot;bold&quot;&#13;&#10;            android:layout_marginTop=&quot;16dp&quot;&#13;&#10;            android:layout_marginBottom=&quot;8dp&quot;/&gt;&#13;&#10;&#13;&#10;        &lt;!-- 통계 카드 --&gt;&#13;&#10;        &lt;LinearLayout&#13;&#10;            style=&quot;@style/CardLevel&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:orientation=&quot;horizontal&quot;&#13;&#10;            android:layout_marginBottom=&quot;16dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;!-- 주간 통계 --&gt;&#13;&#10;            &lt;LinearLayout&#13;&#10;                android:layout_width=&quot;0dp&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_weight=&quot;1&quot;&#13;&#10;                android:orientation=&quot;vertical&quot;&#13;&#10;                android:gravity=&quot;center&quot;&gt;&#13;&#10;&#13;&#10;                &lt;TextView&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;이번 주&quot;&#13;&#10;                    android:textSize=&quot;16sp&quot;&#13;&#10;                    android:textColor=&quot;@color/text_primary&quot;/&gt;&#13;&#10;&#13;&#10;                &lt;TextView&#13;&#10;                    android:id=&quot;@+id/tvWeeklyCount&quot;&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;0일&quot;&#13;&#10;                    android:textSize=&quot;24sp&quot;&#13;&#10;                    android:textStyle=&quot;bold&quot;&#13;&#10;                    android:textColor=&quot;@color/text_accent&quot;&#13;&#10;                    android:layout_marginTop=&quot;8dp&quot;/&gt;&#13;&#10;            &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;            &lt;!-- 월간 통계 --&gt;&#13;&#10;            &lt;LinearLayout&#13;&#10;                android:layout_width=&quot;0dp&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_weight=&quot;1&quot;&#13;&#10;                android:orientation=&quot;vertical&quot;&#13;&#10;                android:gravity=&quot;center&quot;&gt;&#13;&#10;&#13;&#10;                &lt;TextView&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;이번 달&quot;&#13;&#10;                    android:textSize=&quot;16sp&quot;&#13;&#10;                    android:textColor=&quot;@color/text_primary&quot;/&gt;&#13;&#10;&#13;&#10;                &lt;TextView&#13;&#10;                    android:id=&quot;@+id/tvMonthlyCount&quot;&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;0일&quot;&#13;&#10;                    android:textSize=&quot;24sp&quot;&#13;&#10;                    android:textStyle=&quot;bold&quot;&#13;&#10;                    android:textColor=&quot;@color/text_accent&quot;&#13;&#10;                    android:layout_marginTop=&quot;8dp&quot;/&gt;&#13;&#10;            &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;            &lt;!-- 전체 통계 --&gt;&#13;&#10;            &lt;LinearLayout&#13;&#10;                android:layout_width=&quot;0dp&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_weight=&quot;1&quot;&#13;&#10;                android:orientation=&quot;vertical&quot;&#13;&#10;                android:gravity=&quot;center&quot;&gt;&#13;&#10;&#13;&#10;                &lt;TextView&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;전체&quot;&#13;&#10;                    android:textSize=&quot;16sp&quot;&#13;&#10;                    android:textColor=&quot;@color/text_primary&quot;/&gt;&#13;&#10;&#13;&#10;                &lt;TextView&#13;&#10;                    android:id=&quot;@+id/tvTotalCount&quot;&#13;&#10;                    android:layout_width=&quot;wrap_content&quot;&#13;&#10;                    android:layout_height=&quot;wrap_content&quot;&#13;&#10;                    android:text=&quot;0일&quot;&#13;&#10;                    android:textSize=&quot;24sp&quot;&#13;&#10;                    android:textStyle=&quot;bold&quot;&#13;&#10;                    android:textColor=&quot;@color/text_accent&quot;&#13;&#10;                    android:layout_marginTop=&quot;8dp&quot;/&gt;&#13;&#10;            &lt;/LinearLayout&gt;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/tvSummary&quot;&#13;&#10;            style=&quot;@style/TextMessage&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:text=&quot;금주를 시작한지 0일이 지났습니다.&quot;&#13;&#10;            android:layout_marginBottom=&quot;16dp&quot;/&gt;&#13;&#10;&#13;&#10;        &lt;!-- 중단: 통계 및 그래프 --&gt;&#13;&#10;        &lt;TextView&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:text=&quot;통계 및 그래프&quot;&#13;&#10;            android:textStyle=&quot;bold&quot;&#13;&#10;            android:textSize=&quot;18sp&quot;&#13;&#10;            android:layout_marginTop=&quot;8dp&quot;&#13;&#10;            android:layout_marginBottom=&quot;8dp&quot;/&gt;&#13;&#10;            &#13;&#10;        &lt;!-- 금주 일수 그래프 --&gt;&#13;&#10;        &lt;FrameLayout&#13;&#10;            android:id=&quot;@+id/chartContainer&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;200dp&quot;&#13;&#10;            android:background=&quot;#F5F5F5&quot;&#13;&#10;            android:layout_marginBottom=&quot;16dp&quot;&gt;&#13;&#10;            &#13;&#10;            &lt;!-- 그래프는 코드에서 동적으로 추가됨 --&gt;&#13;&#10;            &lt;TextView&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_gravity=&quot;center&quot;&#13;&#10;                android:text=&quot;금주 일수 누적 그래프&quot;&#13;&#10;                android:textSize=&quot;16sp&quot;/&gt;&#13;&#10;        &lt;/FrameLayout&gt;&#13;&#10;        &#13;&#10;        &lt;!-- 최고 기록/최장 금주 일수 --&gt;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:orientation=&quot;vertical&quot;&#13;&#10;            android:background=&quot;#F5F5F5&quot;&#13;&#10;            android:padding=&quot;16dp&quot;&#13;&#10;            android:layout_marginBottom=&quot;16dp&quot;&gt;&#13;&#10;            &#13;&#10;            &lt;TextView&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:text=&quot;최고 기록&quot;&#13;&#10;                android:textStyle=&quot;bold&quot;&#13;&#10;                android:textSize=&quot;16sp&quot;&#13;&#10;                android:layout_marginBottom=&quot;8dp&quot;/&gt;&#13;&#10;                &#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/tvTotalAbstinence&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:text=&quot;전체 누적 금주 일수: 0일&quot;&#13;&#10;                android:layout_marginBottom=&quot;4dp&quot;/&gt;&#13;&#10;                &#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/tvLongestStreak&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:text=&quot;최장 연속 금주 기록: 0일&quot;&#13;&#10;                android:layout_marginBottom=&quot;4dp&quot;/&gt;&#13;&#10;                &#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/tvLastFailure&quot;&#13;&#10;                android:layout_width=&quot;match_parent&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:text=&quot;마지막 금주 실패: 없음&quot;/&gt;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;        &#13;&#10;        &lt;!-- 하단: 상세 기록 리스트 --&gt;&#13;&#10;        &lt;TextView&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:text=&quot;레벨 달성 히스토리&quot;&#13;&#10;            android:textStyle=&quot;bold&quot;&#13;&#10;            android:textSize=&quot;18sp&quot;&#13;&#10;            android:layout_marginTop=&quot;8dp&quot;&#13;&#10;            android:layout_marginBottom=&quot;8dp&quot;/&gt;&#13;&#10;            &#13;&#10;        &lt;!-- 레벨 달성 히스토리 목록 --&gt;&#13;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#13;&#10;            android:id=&quot;@+id/rvLevelHistory&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:minHeight=&quot;200dp&quot;/&gt;&#13;&#10;            &#13;&#10;    &lt;/LinearLayout&gt;&#13;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_level_history.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_level_history.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:padding=&quot;12dp&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:gravity=&quot;center_vertical&quot;&gt;&#10;    &#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvDate&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;2024-07-30&quot;&#10;        android:textSize=&quot;14sp&quot;&#10;        android:layout_marginEnd=&quot;12dp&quot;/&gt;&#10;        &#10;    &lt;TextView&#10;        android:layout_width=&quot;24dp&quot;&#10;        android:layout_height=&quot;24dp&quot;&#10;        android:background=&quot;@drawable/circle_background&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:text=&quot;○&quot;&#10;        android:textColor=&quot;#FFFFFF&quot;&#10;        android:layout_marginEnd=&quot;12dp&quot;/&gt;&#10;        &#10;    &lt;TextView&#10;        android:id=&quot;@+id/tvAchievement&quot;&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:text=&quot;Level 1 달성!&quot;&#10;        android:textSize=&quot;16sp&quot;/&gt;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>