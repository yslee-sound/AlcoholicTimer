<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:label=&quot;@string/app_name&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StartActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StatusActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RecordsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:label=&quot;@string/app_name&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StartActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StatusActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.RecordsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.RecordSummaryActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/MainActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;&#10;class MainActivity : BaseActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 상속받은 메서드로 나머지 기능 처리됨&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // MainActivity의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        LayoutInflater.from(this).inflate(R.layout.content_main, contentFrame, true)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import com.example.alcoholictimer.utils.Constants&#10;&#10;class MainActivity : BaseActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 금주 타이머가 진행 중인지 확인&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val isSobrietyStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주가 진행 중이면 StatusActivity로 자동 이동&#10;        if (isSobrietyStarted) {&#10;            val intent = Intent(this, StatusActivity::class.java)&#10;            startActivity(intent)&#10;            // MainActivity는 종료하지 않고 백스택에 남겨둠&#10;        }&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // MainActivity의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        LayoutInflater.from(this).inflate(R.layout.content_main, contentFrame, true)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.concurrent.TimeUnit&#10;&#10;/**&#10; * 금주 완료 후 결과 요약을 보여주는 액티비티&#10; */&#10;class RecordSummaryActivity : BaseActivity() {&#10;&#10;    private var record: SobrietyRecord? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 이전 화면에서 전달받은 기록 ID 가져오기&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1L)&#10;        if (recordId == -1L) {&#10;            // ID가 없으면 메인 화면으로 이동&#10;            finish()&#10;            return&#10;        }&#10;&#10;        // 해당 ID의 기록 데이터 불러오기&#10;        record = loadRecord(recordId)&#10;        if (record == null) {&#10;            finish()&#10;            return&#10;        }&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // 기록이 없으면 화면 설정 건너뛰기&#10;        if (record == null) {&#10;            return&#10;        }&#10;&#10;        // BaseActivity에서 상속받은 contentFrame에 레이아웃 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.activity_record_summary, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        val tvTitle = view.findViewById&lt;TextView&gt;(R.id.tvSummaryTitle)&#10;        val tvPeriod = view.findViewById&lt;TextView&gt;(R.id.tvPeriod)&#10;        val tvAchievedLevel = view.findViewById&lt;TextView&gt;(R.id.tvAchievedLevel)&#10;        val tvTotalDuration = view.findViewById&lt;TextView&gt;(R.id.tvTotalDuration)&#10;        val btnNewChallenge = view.findViewById&lt;Button&gt;(R.id.btnNewChallenge)&#10;&#10;        // 데이터 표시&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy년 MM월 dd일 HH:mm&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.startDate) ?: Date())&#10;        val endDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.endDate) ?: Date())&#10;&#10;        // 제목 설정&#10;        if (record!!.isCompleted) {&#10;            tvTitle.text = &quot;목표 달성을 축하합니다!&quot;&#10;        } else {&#10;            tvTitle.text = &quot;금주 기록 요약&quot;&#10;        }&#10;&#10;        // 기간 표시&#10;        tvPeriod.text = &quot;시작: $startDate\n종료: $endDate&quot;&#10;&#10;        // 달성 레벨&#10;        tvAchievedLevel.text = &quot;달성 레벨: ${record!!.achievedLevel} (${record!!.levelTitle})&quot;&#10;&#10;        // 총 금주 기간&#10;        val durationText = if (record!!.isCompleted) {&#10;            &quot;목표 ${record!!.duration}${getUnitText()} 완료했습니다!&quot;&#10;        } else {&#10;            &quot;목표 ${record!!.duration}${getUnitText()} 중 ${record!!.achievedDays}${getUnitText()} 달성 (${(record!!.achievedDays.toFloat() / record!!.duration * 100).toInt()}%)&quot;&#10;        }&#10;        tvTotalDuration.text = durationText&#10;&#10;        // 버튼 설정&#10;        btnNewChallenge.setOnClickListener {&#10;            // 새로운 도전 시작을 위해 메인 화면으로 이동&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 현재 테스트 모드에 맞는 단위 텍스트를 반환&#10;     */&#10;    private fun getUnitText(): String {&#10;        return if (com.example.alcoholictimer.utils.Constants.SECOND_TEST_MODE) {&#10;            &quot;초를&quot;&#10;        } else if (com.example.alcoholictimer.utils.Constants.TEST_MODE) {&#10;            &quot;분을&quot;&#10;        } else {&#10;            &quot;일을&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * SharedPreferences에서 특정 ID의 금주 기록을 불러옴&#10;     */&#10;    private fun loadRecord(recordId: Long): SobrietyRecord? {&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;&#10;        return records.find { it.id == recordId }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.concurrent.TimeUnit&#10;&#10;/**&#10; * 금주 완료 후 결과 요약을 보여주는 액티비티&#10; */&#10;class RecordSummaryActivity : BaseActivity() {&#10;    &#10;    private var record: SobrietyRecord? = null&#10;    private val TAG = &quot;RecordSummaryActivity&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 이전 화면에서 전달받은 기록 ID 가져오기&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1L)&#10;        Log.d(TAG, &quot;onCreate: recordId=$recordId&quot;)&#10;        &#10;        if (recordId == -1L) {&#10;            // ID가 없으면 메인 화면으로 이동&#10;            Toast.makeText(this, &quot;기록 정보를 찾을 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Record ID not found in intent&quot;)&#10;            finish()&#10;            return&#10;        }&#10;&#10;        // 해당 ID의 기록 데이터 불러오기&#10;        record = loadRecord(recordId)&#10;        &#10;        if (record == null) {&#10;            Toast.makeText(this, &quot;해당 기록을 불러올 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Failed to load record with id: $recordId&quot;)&#10;            finish()&#10;            return&#10;        } else {&#10;            Log.d(TAG, &quot;Record loaded: ${record?.startDate} to ${record?.endDate}, completed=${record?.isCompleted}&quot;)&#10;        }&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // 기록이 없으면 화면 설정 건너뛰기&#10;        if (record == null) {&#10;            Log.e(TAG, &quot;setupContentView: record is null&quot;)&#10;            return&#10;        }&#10;        &#10;        try {&#10;            // BaseActivity에서 상속받은 contentFrame에 레이아웃 추가&#10;            val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;            if (contentFrame == null) {&#10;                Log.e(TAG, &quot;contentFrame not found&quot;)&#10;                return&#10;            }&#10;            &#10;            val view = LayoutInflater.from(this).inflate(R.layout.activity_record_summary, contentFrame, true)&#10;            Log.d(TAG, &quot;Layout inflated successfully&quot;)&#10;&#10;            // UI 요소 초기화&#10;            val tvTitle = view.findViewById&lt;TextView&gt;(R.id.tvSummaryTitle)&#10;            val tvPeriod = view.findViewById&lt;TextView&gt;(R.id.tvPeriod)&#10;            val tvAchievedLevel = view.findViewById&lt;TextView&gt;(R.id.tvAchievedLevel)&#10;            val tvTotalDuration = view.findViewById&lt;TextView&gt;(R.id.tvTotalDuration)&#10;            val btnNewChallenge = view.findViewById&lt;Button&gt;(R.id.btnNewChallenge)&#10;            &#10;            if (tvTitle == null || tvPeriod == null || tvAchievedLevel == null || &#10;                tvTotalDuration == null || btnNewChallenge == null) {&#10;                Log.e(TAG, &quot;One or more UI elements not found in layout&quot;)&#10;                return&#10;            }&#10;&#10;            // 데이터 표시&#10;            val dateFormat = SimpleDateFormat(&quot;yyyy년 MM월 dd일 HH:mm&quot;, Locale.getDefault())&#10;            val startDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.startDate) ?: Date())&#10;            val endDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.endDate) ?: Date())&#10;            &#10;            // 제목 설정&#10;            if (record!!.isCompleted) {&#10;                tvTitle.text = &quot;목표 달성을 축하합니다!&quot;&#10;            } else {&#10;                tvTitle.text = &quot;금주 기록 요약&quot;&#10;            }&#10;            &#10;            // 기간 표시&#10;            tvPeriod.text = &quot;시작: $startDate\n종료: $endDate&quot;&#10;            &#10;            // 달성 레벨&#10;            tvAchievedLevel.text = &quot;달성 레벨: ${record!!.achievedLevel} (${record!!.levelTitle})&quot;&#10;            &#10;            // 총 금주 기간&#10;            val durationText = if (record!!.isCompleted) {&#10;                &quot;목표 ${record!!.duration}${getUnitText()} 완료했습니다!&quot;&#10;            } else {&#10;                &quot;목표 ${record!!.duration}${getUnitText()} 중 ${record!!.achievedDays}${getUnitText()} 달성 (${(record!!.achievedDays.toFloat() / record!!.duration * 100).toInt()}%)&quot;&#10;            }&#10;            tvTotalDuration.text = durationText&#10;            &#10;            // 버튼 설정&#10;            btnNewChallenge.setOnClickListener {&#10;                // 새로운 도전 시작을 위해 메인 화면으로 이동&#10;                val intent = Intent(this, MainActivity::class.java)&#10;                intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;                startActivity(intent)&#10;                finish()&#10;            }&#10;            &#10;            Log.d(TAG, &quot;UI setup completed successfully&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error setting up content view&quot;, e)&#10;            Toast.makeText(this, &quot;화면 표시 중 오류가 발생했습니다.&quot;, Toast.LENGTH_LONG).show()&#10;        }&#10;    }&#10;    &#10;    /**&#10;     * 현재 테스트 모드에 맞는 단위 텍스트를 반환&#10;     */&#10;    private fun getUnitText(): String {&#10;        return if (com.example.alcoholictimer.utils.Constants.SECOND_TEST_MODE) {&#10;            &quot;초를&quot;&#10;        } else if (com.example.alcoholictimer.utils.Constants.TEST_MODE) {&#10;            &quot;분을&quot; &#10;        } else {&#10;            &quot;일을&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * SharedPreferences에서 특정 ID의 금주 기록을 불러옴&#10;     */&#10;    private fun loadRecord(recordId: Long): SobrietyRecord? {&#10;        try {&#10;            val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;            val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;            Log.d(TAG, &quot;Records JSON: $recordsJson&quot;)&#10;            &#10;            val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;            Log.d(TAG, &quot;Parsed ${records.size} records&quot;)&#10;            &#10;            val foundRecord = records.find { it.id == recordId }&#10;            if (foundRecord == null) {&#10;                Log.e(TAG, &quot;Record with ID $recordId not found in records list&quot;)&#10;            }&#10;            &#10;            return foundRecord&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error loading record&quot;, e)&#10;            return null&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.graphics.Color&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import java.util.Timer&#10;import java.util.TimerTask&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;class StatusActivity : BaseActivity() {&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#10;    private var goalAchievementChecked = false&#10;&#10;    // 일 단위 레벨 마일스톤 (실제 운영)&#10;    private val levelMilestones = listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;&#10;    // 분 단위 레벨 마일스톤 (테스트 모드)&#10;    private val minuteTestMilestones = listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;&#10;    // 초 단위 레벨 마일스톤 (초 단위 테스트 모드)&#10;    private val secondTestMilestones = listOf(0, 7, 14, 30, 60, 90, 120, 180)&#10;&#10;    private val levelTitles = listOf(&#10;        &quot;새싹 도전자&quot;,&#10;        &quot;첫걸음 성공&quot;,&#10;        &quot;의지의 시작&quot;,&#10;        &quot;한달의 기적&quot;,&#10;        &quot;습관의 탄생&quot;,&#10;        &quot;의지의 달인&quot;,&#10;        &quot;금주의 마스터&quot;,&#10;        &quot;절제의 달인&quot;&#10;    )&#10;    private val levelColors = listOf(&#10;        &quot;#FF9E9E9E&quot;,  // Gray&#10;        &quot;#FF4CAF50&quot;,  // Green&#10;        &quot;#FF2196F3&quot;,  // Blue&#10;        &quot;#FF9C27B0&quot;,  // Purple&#10;        &quot;#FFFF9800&quot;,  // Orange&#10;        &quot;#FFFF5722&quot;,  // Deep Orange&#10;        &quot;#FF3F51B5&quot;,  // Indigo&#10;        &quot;#FFE91E63&quot;   // Pink&#10;    )&#10;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#10;    private var timer: Timer? = null&#10;    private val handler = Handler(Looper.getMainLooper())&#10;&#10;    // UI 요소 참조 저장 변수&#10;    private lateinit var tvDaysCount: TextView&#10;    private lateinit var tvTimeUnit: TextView&#10;    private lateinit var tvLevel: TextView&#10;    private lateinit var tvLevelTitle: TextView&#10;    private lateinit var tvNextLevel: TextView&#10;    private lateinit var tvMessage: TextView&#10;    private lateinit var progressLevel: ProgressBar&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // 화면이 보일 때 타이머 시작&#10;        startTimer()&#10;&#10;        // 목표 달성 플래그 초기화&#10;        goalAchievementChecked = false&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // 화면이 보이지 않을 때 타이머 정지&#10;        stopTimer()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        // 기존 타이머가 있다면 중지&#10;        stopTimer()&#10;&#10;        // 새 타이머 생성 및 시작&#10;        timer = Timer()&#10;        timer?.schedule(object : TimerTask() {&#10;            override fun run() {&#10;                // UI 업데이트는 메인 스레드에서 수행해야 함&#10;                handler.post {&#10;                    updateUI()&#10;                }&#10;            }&#10;        }, 0, 1000) // 1초마다 업데이트&#10;    }&#10;&#10;    private fun stopTimer() {&#10;        timer?.cancel()&#10;        timer = null&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StatusActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_status, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        tvDaysCount = view.findViewById(R.id.tvDaysCount)&#10;        tvTimeUnit = view.findViewById(R.id.tvTimeUnit)&#10;        tvLevel = view.findViewById(R.id.tvLevel)&#10;        tvLevelTitle = view.findViewById(R.id.tvLevelTitle)&#10;        tvNextLevel = view.findViewById(R.id.tvNextLevel)&#10;        tvMessage = view.findViewById(R.id.tvMessage)&#10;        progressLevel = view.findViewById(R.id.progressLevel)&#10;&#10;        // 시간 단위 텍스트 설정&#10;        tvTimeUnit.text = Constants.TIME_UNIT_TEXT&#10;&#10;        // 중지 버튼 설정&#10;        val btnStopSobriety = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#10;        btnStopSobriety.setOnClickListener {&#10;            // 기존 AlertDialog 대신 커스텀 다이얼로그 사용&#10;            showCustomStopDialog()&#10;        }&#10;&#10;        // 최초 UI 업데이트&#10;        updateUI()&#10;    }&#10;&#10;    /**&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#10;     */&#10;    private fun updateUI() {&#10;        // SharedPreferences에서 데이터 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;&#10;        // 경과 시간 계산 (테스트 모드에 따라 일, 분 또는 초 단위로 계산)&#10;        val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;        // 프로그레스바를 위한 초 단위 경과 시간 계산&#10;        val secondsPassed = ((System.currentTimeMillis() - startTime) / Constants.PROGRESS_TIME_UNIT_MILLIS).toInt()&#10;&#10;        // UI 업데이트&#10;        tvDaysCount.text = timePassed.toString()&#10;&#10;        // 테스트 모드에 따라 적절한 마일스톤 선택&#10;        val adjustedMilestones = when {&#10;            Constants.SECOND_TEST_MODE -&gt; secondTestMilestones&#10;            Constants.TEST_MODE -&gt; minuteTestMilestones&#10;            else -&gt; levelMilestones&#10;        }&#10;&#10;        // 레벨 계산&#10;        var currentLevel = 0&#10;        for (i in adjustedMilestones.indices) {&#10;            if (timePassed &gt;= adjustedMilestones[i]) {&#10;                currentLevel = i&#10;            } else {&#10;                break&#10;            }&#10;        }&#10;&#10;        // 레벨 정보 표시&#10;        tvLevel.text = &quot;Lv. ${currentLevel + 1}&quot;&#10;        tvLevelTitle.text = levelTitles[currentLevel]&#10;        tvLevelTitle.setTextColor(Color.parseColor(levelColors[currentLevel]))&#10;&#10;        // 다음 레벨 정보&#10;        if (currentLevel &lt; adjustedMilestones.size - 1) {&#10;            val nextLevelTime = adjustedMilestones[currentLevel + 1]&#10;            val timeLeft = nextLevelTime - timePassed&#10;            tvNextLevel.text = &quot;다음 레벨까지 ${timeLeft}${Constants.TIME_UNIT_TEXT}&quot;&#10;&#10;            // 프로그레스바 업데이트 - 초 단위로 계산&#10;            val currentLevelTimeInSeconds = if (Constants.PROGRESS_TEST_MODE) {&#10;                adjustedMilestones[currentLevel] * (Constants.TIME_UNIT_MILLIS / Constants.SECOND_IN_MILLIS).toInt()&#10;            } else {&#10;                adjustedMilestones[currentLevel]&#10;            }&#10;&#10;            val nextLevelThresholdInSeconds = if (Constants.PROGRESS_TEST_MODE) {&#10;                adjustedMilestones[currentLevel + 1] * (Constants.TIME_UNIT_MILLIS / Constants.SECOND_IN_MILLIS).toInt()&#10;            } else {&#10;                adjustedMilestones[currentLevel + 1]&#10;            }&#10;&#10;            val progressValue = if (Constants.PROGRESS_TEST_MODE) {&#10;                ((secondsPassed - currentLevelTimeInSeconds).toFloat() / (nextLevelThresholdInSeconds - currentLevelTimeInSeconds)) * 100&#10;            } else {&#10;                ((timePassed - adjustedMilestones[currentLevel]).toFloat() / (adjustedMilestones[currentLevel + 1] - adjustedMilestones[currentLevel])) * 100&#10;            }&#10;&#10;            progressLevel.progress = progressValue.toInt().coerceIn(0, 100)&#10;        } else {&#10;            tvNextLevel.text = &quot;최고 레벨 달성!&quot;&#10;            progressLevel.progress = 100&#10;        }&#10;&#10;        // 목표 달성 여부 메시지&#10;        if (timePassed &gt;= targetDays) {&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;&#10;            // 목표 달성 시 처리 (한 번만 실행되도록)&#10;            if (!goalAchievementChecked) {&#10;                goalAchievementChecked = true&#10;&#10;                // 기록 저장 및 완료 처리&#10;                saveCompletedRecord(startTime, System.currentTimeMillis(), targetDays, currentLevel + 1)&#10;&#10;                // 금주 설정으로 돌아가기&#10;                Toast.makeText(this, &quot;목표 달성! 금주가 완료되었습니다.&quot;, Toast.LENGTH_LONG).show()&#10;&#10;                // 메인 화면으로 돌아가기 위한 핸들러 (토스트 메시지를 보여준 후 이동)&#10;                handler.postDelayed({&#10;                    val intent = Intent(this, MainActivity::class.java)&#10;                    intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;                    startActivity(intent)&#10;                    finish()&#10;                }, 2000) // 2초 후에 메인 화면으로 이동&#10;            }&#10;        } else {&#10;            tvMessage.text = &quot;목표까지 ${targetDays - timePassed}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 완료된 금주 기록을 저장합니다&#10;     */&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int) {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = System.currentTimeMillis(),&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedLevel = level,&#10;            levelTitle = levelTitles[level - 1],&#10;            isCompleted = true&#10;        )&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;&#10;        // 기록 저장&#10;        with(sharedPref.edit()) {&#10;            putString(&quot;records&quot;, SobrietyRecord.toJsonArray(records))&#10;            apply()&#10;        }&#10;&#10;        // 현재 진행중인 금주 데이터 초기화&#10;        with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;            clear()&#10;            apply()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 눈에 잘 보이는 버튼이 있는 커스텀 중지 확인 다이얼로그를 표시합니다.&#10;     */&#10;    private fun showCustomStopDialog() {&#10;        // 커스텀 다이얼로그 생성&#10;        val dialog = android.app.Dialog(this)&#10;        dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#10;        dialog.setContentView(com.example.alcoholictimer.R.layout.dialog_stop_sobriety)&#10;&#10;        // 다이얼로그 배경을 투명하게 설정하고 외부 영역 클릭으로 닫히지 않게 설정&#10;        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)&#10;        dialog.setCancelable(false)&#10;&#10;        // 취소 버튼 클릭 리스너&#10;        val btnCancel = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnCancel)&#10;        btnCancel.setOnClickListener {&#10;            dialog.dismiss()&#10;        }&#10;&#10;        // 확인 버튼 클릭 리스너&#10;        val btnConfirm = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnConfirm)&#10;        btnConfirm.setOnClickListener {&#10;            // 금주 기록 저장 (중도 포기로 표시)&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;            val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;            val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;            // 현재 레벨 계산&#10;            var currentLevel = 0&#10;            val adjustedMilestones = when {&#10;                Constants.SECOND_TEST_MODE -&gt; secondTestMilestones&#10;                Constants.TEST_MODE -&gt; minuteTestMilestones&#10;                else -&gt; levelMilestones&#10;            }&#10;&#10;            for (i in adjustedMilestones.indices) {&#10;                if (timePassed &gt;= adjustedMilestones[i]) {&#10;                    currentLevel = i&#10;                } else {&#10;                    break&#10;                }&#10;            }&#10;&#10;            // 중단된 기록 저장&#10;            saveStoppedRecord(startTime, System.currentTimeMillis(), targetDays, timePassed, currentLevel + 1)&#10;&#10;            // SharedPreferences 데이터 초기화&#10;            with(sharedPref.edit()) {&#10;                clear()  // 모든 데이터 삭제&#10;                apply()&#10;            }&#10;&#10;            Toast.makeText(this, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;            // 메인 화면으로 이동&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        // 다이얼로그 표시&#10;        dialog.show()&#10;    }&#10;&#10;    /**&#10;     * 중단된 금주 기록을 저장합니다&#10;     */&#10;    private fun saveStoppedRecord(startTime: Long, endTime: Long, targetDays: Int, achievedDays: Int, level: Int) {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = System.currentTimeMillis(),&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedDays = achievedDays,&#10;            achievedLevel = level,&#10;            levelTitle = levelTitles[level - 1],&#10;            isCompleted = false&#10;        )&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;&#10;        // 기록 저장&#10;        with(sharedPref.edit()) {&#10;            putString(&quot;records&quot;, SobrietyRecord.toJsonArray(records))&#10;            apply()&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.graphics.Color&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import java.util.Timer&#10;import java.util.TimerTask&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;class StatusActivity : BaseActivity() {&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#10;    private var goalAchievementChecked = false&#10;&#10;    // 일 단위 레벨 마일스톤 (실제 운영)&#10;    private val levelMilestones = listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;&#10;    // 분 단위 레벨 마일스톤 (테스트 모드)&#10;    private val minuteTestMilestones = listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;&#10;    // 초 단위 레벨 마일스톤 (초 단위 테스트 모드)&#10;    private val secondTestMilestones = listOf(0, 7, 14, 30, 60, 90, 120, 180)&#10;&#10;    private val levelTitles = listOf(&#10;        &quot;새싹 도전자&quot;,&#10;        &quot;첫걸음 성공&quot;,&#10;        &quot;의지의 시작&quot;,&#10;        &quot;한달의 기적&quot;,&#10;        &quot;습관의 탄생&quot;,&#10;        &quot;의지의 달인&quot;,&#10;        &quot;금주의 마스터&quot;,&#10;        &quot;절제의 달인&quot;&#10;    )&#10;    private val levelColors = listOf(&#10;        &quot;#FF9E9E9E&quot;,  // Gray&#10;        &quot;#FF4CAF50&quot;,  // Green&#10;        &quot;#FF2196F3&quot;,  // Blue&#10;        &quot;#FF9C27B0&quot;,  // Purple&#10;        &quot;#FFFF9800&quot;,  // Orange&#10;        &quot;#FFFF5722&quot;,  // Deep Orange&#10;        &quot;#FF3F51B5&quot;,  // Indigo&#10;        &quot;#FFE91E63&quot;   // Pink&#10;    )&#10;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#10;    private var timer: Timer? = null&#10;    private val handler = Handler(Looper.getMainLooper())&#10;&#10;    // UI 요소 참조 저장 변수&#10;    private lateinit var tvDaysCount: TextView&#10;    private lateinit var tvTimeUnit: TextView&#10;    private lateinit var tvLevel: TextView&#10;    private lateinit var tvLevelTitle: TextView&#10;    private lateinit var tvNextLevel: TextView&#10;    private lateinit var tvMessage: TextView&#10;    private lateinit var progressLevel: ProgressBar&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // 화면이 보일 때 타이머 시작&#10;        startTimer()&#10;&#10;        // 목표 달성 플래그 초기화&#10;        goalAchievementChecked = false&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // 화면이 보이지 않을 때 타이머 정지&#10;        stopTimer()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        // 기존 타이머가 있다면 중지&#10;        stopTimer()&#10;&#10;        // 새 타이머 생성 및 시작&#10;        timer = Timer()&#10;        timer?.schedule(object : TimerTask() {&#10;            override fun run() {&#10;                // UI 업데이트는 메인 스레드에서 수행해야 함&#10;                handler.post {&#10;                    updateUI()&#10;                }&#10;            }&#10;        }, 0, 1000) // 1초마다 업데이트&#10;    }&#10;&#10;    private fun stopTimer() {&#10;        timer?.cancel()&#10;        timer = null&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StatusActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_status, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        tvDaysCount = view.findViewById(R.id.tvDaysCount)&#10;        tvTimeUnit = view.findViewById(R.id.tvTimeUnit)&#10;        tvLevel = view.findViewById(R.id.tvLevel)&#10;        tvLevelTitle = view.findViewById(R.id.tvLevelTitle)&#10;        tvNextLevel = view.findViewById(R.id.tvNextLevel)&#10;        tvMessage = view.findViewById(R.id.tvMessage)&#10;        progressLevel = view.findViewById(R.id.progressLevel)&#10;&#10;        // 시간 단위 텍스트 설정&#10;        tvTimeUnit.text = Constants.TIME_UNIT_TEXT&#10;&#10;        // 중지 버튼 설정&#10;        val btnStopSobriety = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#10;        btnStopSobriety.setOnClickListener {&#10;            // 기존 AlertDialog 대신 커스텀 다이얼로그 사용&#10;            showCustomStopDialog()&#10;        }&#10;&#10;        // 최초 UI 업데이트&#10;        updateUI()&#10;    }&#10;&#10;    /**&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#10;     */&#10;    private fun updateUI() {&#10;        // SharedPreferences에서 데이터 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;&#10;        // 경과 시간 계산 (테스트 모드에 따라 일, 분 또는 초 단위로 계산)&#10;        val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;        // 프로그레스바를 위한 초 단위 경과 시간 계산&#10;        val secondsPassed = ((System.currentTimeMillis() - startTime) / Constants.PROGRESS_TIME_UNIT_MILLIS).toInt()&#10;&#10;        // UI 업데이트&#10;        tvDaysCount.text = timePassed.toString()&#10;&#10;        // 테스트 모드에 따라 적절한 마일스톤 선택&#10;        val adjustedMilestones = when {&#10;            Constants.SECOND_TEST_MODE -&gt; secondTestMilestones&#10;            Constants.TEST_MODE -&gt; minuteTestMilestones&#10;            else -&gt; levelMilestones&#10;        }&#10;&#10;        // 레벨 계산&#10;        var currentLevel = 0&#10;        for (i in adjustedMilestones.indices) {&#10;            if (timePassed &gt;= adjustedMilestones[i]) {&#10;                currentLevel = i&#10;            } else {&#10;                break&#10;            }&#10;        }&#10;&#10;        // 레벨 정보 표시&#10;        tvLevel.text = &quot;Lv. ${currentLevel + 1}&quot;&#10;        tvLevelTitle.text = levelTitles[currentLevel]&#10;        tvLevelTitle.setTextColor(Color.parseColor(levelColors[currentLevel]))&#10;&#10;        // 다음 레벨 정보&#10;        if (currentLevel &lt; adjustedMilestones.size - 1) {&#10;            val nextLevelTime = adjustedMilestones[currentLevel + 1]&#10;            val timeLeft = nextLevelTime - timePassed&#10;            tvNextLevel.text = &quot;다음 레벨까지 ${timeLeft}${Constants.TIME_UNIT_TEXT}&quot;&#10;&#10;            // 프로그레스바 업데이트 - 초 단위로 계산&#10;            val currentLevelTimeInSeconds = if (Constants.PROGRESS_TEST_MODE) {&#10;                adjustedMilestones[currentLevel] * (Constants.TIME_UNIT_MILLIS / Constants.SECOND_IN_MILLIS).toInt()&#10;            } else {&#10;                adjustedMilestones[currentLevel]&#10;            }&#10;&#10;            val nextLevelThresholdInSeconds = if (Constants.PROGRESS_TEST_MODE) {&#10;                adjustedMilestones[currentLevel + 1] * (Constants.TIME_UNIT_MILLIS / Constants.SECOND_IN_MILLIS).toInt()&#10;            } else {&#10;                adjustedMilestones[currentLevel + 1]&#10;            }&#10;&#10;            val progressValue = if (Constants.PROGRESS_TEST_MODE) {&#10;                ((secondsPassed - currentLevelTimeInSeconds).toFloat() / (nextLevelThresholdInSeconds - currentLevelTimeInSeconds)) * 100&#10;            } else {&#10;                ((timePassed - adjustedMilestones[currentLevel]).toFloat() / (adjustedMilestones[currentLevel + 1] - adjustedMilestones[currentLevel])) * 100&#10;            }&#10;&#10;            progressLevel.progress = progressValue.toInt().coerceIn(0, 100)&#10;        } else {&#10;            tvNextLevel.text = &quot;최고 레벨 달성!&quot;&#10;            progressLevel.progress = 100&#10;        }&#10;&#10;        // 목표 달성 여부 메시지&#10;        if (timePassed &gt;= targetDays) {&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;&#10;            // 목표 달성 시 처리 (한 번만 실행되도록)&#10;            if (!goalAchievementChecked) {&#10;                goalAchievementChecked = true&#10;&#10;                // 기록 저장 및 완료 처리&#10;                val recordId = saveCompletedRecord(startTime, System.currentTimeMillis(), targetDays, currentLevel + 1)&#10;&#10;                // 토스트 메시지 표시&#10;                Toast.makeText(this, &quot;목표 달성! 금주가 완료되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;                // 요약 화면으로 이동&#10;                handler.postDelayed({&#10;                    val intent = Intent(this, RecordSummaryActivity::class.java)&#10;                    intent.putExtra(&quot;record_id&quot;, recordId)&#10;                    startActivity(intent)&#10;                    finish()&#10;                }, 1000) // 1초 후 이동&#10;            }&#10;        } else {&#10;            tvMessage.text = &quot;목표까지 ${targetDays - timePassed}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 완료된 금주 기록을 저장합니다&#10;     * @return 저장된 기록의 ID&#10;     */&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 ID 생성&#10;        val recordId = System.currentTimeMillis()&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedLevel = level,&#10;            levelTitle = levelTitles[level - 1],&#10;            isCompleted = true&#10;        )&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;&#10;        // 기록 저장&#10;        with(sharedPref.edit()) {&#10;            putString(&quot;records&quot;, SobrietyRecord.toJsonArray(records))&#10;            apply()&#10;        }&#10;&#10;        // 현재 진행중인 금주 데이터 초기화&#10;        with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;            clear()&#10;            apply()&#10;        }&#10;&#10;        return recordId&#10;    }&#10;&#10;    /**&#10;     * 눈에 잘 보이는 버튼이 있는 커스텀 중지 확인 다이얼로그를 표시합니다.&#10;     */&#10;    private fun showCustomStopDialog() {&#10;        // 커스텀 다이얼로그 생성&#10;        val dialog = android.app.Dialog(this)&#10;        dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#10;        dialog.setContentView(com.example.alcoholictimer.R.layout.dialog_stop_sobriety)&#10;&#10;        // 다이얼로그 배경을 투명하게 설정하고 외부 영역 클릭으로 닫히지 않게 설정&#10;        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)&#10;        dialog.setCancelable(false)&#10;&#10;        // 취소 버튼 클릭 리스너&#10;        val btnCancel = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnCancel)&#10;        btnCancel.setOnClickListener {&#10;            dialog.dismiss()&#10;        }&#10;&#10;        // 확인 버튼 클릭 리스너&#10;        val btnConfirm = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnConfirm)&#10;        btnConfirm.setOnClickListener {&#10;            // 금주 기록 저장 (중도 포기로 표시)&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;            val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;            val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;            // 현재 레벨 계산&#10;            var currentLevel = 0&#10;            val adjustedMilestones = when {&#10;                Constants.SECOND_TEST_MODE -&gt; secondTestMilestones&#10;                Constants.TEST_MODE -&gt; minuteTestMilestones&#10;                else -&gt; levelMilestones&#10;            }&#10;&#10;            for (i in adjustedMilestones.indices) {&#10;                if (timePassed &gt;= adjustedMilestones[i]) {&#10;                    currentLevel = i&#10;                } else {&#10;                    break&#10;                }&#10;            }&#10;&#10;            // 중단된 기록 저장 및 요약 화면으로 이동&#10;            val recordId = saveStoppedRecord(startTime, System.currentTimeMillis(), targetDays, timePassed, currentLevel + 1)&#10;&#10;            // SharedPreferences 데이터 초기화&#10;            with(sharedPref.edit()) {&#10;                clear()  // 모든 데이터 삭제&#10;                apply()&#10;            }&#10;&#10;            Toast.makeText(this, &quot;금주가 중단되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;            // 요약 화면으로 이동&#10;            val intent = Intent(this, RecordSummaryActivity::class.java)&#10;            intent.putExtra(&quot;record_id&quot;, recordId)&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;&#10;        // 다이얼로그 표시&#10;        dialog.show()&#10;    }&#10;&#10;    /**&#10;     * 중단된 금주 기록을 저장합니다&#10;     * @return 저장된 기록의 ID&#10;     */&#10;    private fun saveStoppedRecord(startTime: Long, endTime: Long, targetDays: Int, achievedDays: Int, level: Int): Long {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 ID 생성&#10;        val recordId = System.currentTimeMillis()&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedDays = achievedDays,&#10;            achievedLevel = level,&#10;            levelTitle = levelTitles[level - 1],&#10;            isCompleted = false&#10;        )&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;&#10;        // 기록 저장&#10;        with(sharedPref.edit()) {&#10;            putString(&quot;records&quot;, SobrietyRecord.toJsonArray(records))&#10;            apply()&#10;        }&#10;&#10;        return recordId&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer.utils&#10;&#10;object Constants {&#10;    // 테스트 모드 설정 (true: 분 단위, false: 일 단위)&#10;    const val TEST_MODE = true&#10;&#10;    // 프로그레스바 초 단위 테스트 모드&#10;    const val PROGRESS_TEST_MODE = true&#10;&#10;    // 시간 변환 상수&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#10;&#10;    // 사용할 시간 단위&#10;    val TIME_UNIT_MILLIS = if (TEST_MODE) MINUTE_IN_MILLIS else DAY_IN_MILLIS&#10;&#10;    // 프로그레스바용 시간 단위 (초 단위 테스트를 위함)&#10;    val PROGRESS_TIME_UNIT_MILLIS = if (PROGRESS_TEST_MODE) SECOND_IN_MILLIS else TIME_UNIT_MILLIS&#10;&#10;    // 단위 텍스트&#10;    val TIME_UNIT_TEXT = if (TEST_MODE) &quot;분&quot; else &quot;일&quot;&#10;    val PROGRESS_TIME_UNIT_TEXT = if (PROGRESS_TEST_MODE) &quot;초&quot; else TIME_UNIT_TEXT&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#10;&#10;object Constants {&#10;    // 테스트 모드 설정 (true: 초 단위, false: 일 단위)&#10;    const val TEST_MODE = true&#10;    &#10;    // 초 단위 테스트 모드 (1초 = 1일 개념)&#10;    const val SECOND_TEST_MODE = true&#10;    &#10;    // 프로그레스바 초 단위 테스트 모드&#10;    const val PROGRESS_TEST_MODE = true&#10;&#10;    // 시간 변환 상수&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#10;&#10;    // 사용할 시간 단위&#10;    val TIME_UNIT_MILLIS = when {&#10;        SECOND_TEST_MODE -&gt; SECOND_IN_MILLIS  // 초 단위 테스트 (1초 = 1일)&#10;        TEST_MODE -&gt; MINUTE_IN_MILLIS         // 분 단위 테스트 (1분 = 1일)&#10;        else -&gt; DAY_IN_MILLIS                 // 실제 일 단위 (1일 = 24시간)&#10;    }&#10;&#10;    // 프로그레스바용 시간 단위&#10;    val PROGRESS_TIME_UNIT_MILLIS = if (PROGRESS_TEST_MODE) SECOND_IN_MILLIS else TIME_UNIT_MILLIS&#10;&#10;    // 단위 텍스트&#10;    val TIME_UNIT_TEXT = when {&#10;        SECOND_TEST_MODE -&gt; &quot;초&quot;  // 초 단위 테스트 시 표시 텍스트&#10;        TEST_MODE -&gt; &quot;분&quot;        // 분 단위 테스트 시 표시 텍스트&#10;        else -&gt; &quot;일&quot;            // 실제 운영 시 표시 텍스트&#10;    }&#10;    &#10;    val PROGRESS_TIME_UNIT_TEXT = if (PROGRESS_TEST_MODE) &quot;초&quot; else TIME_UNIT_TEXT&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/SobrietyRecord.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/SobrietyRecord.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#10;&#10;import org.json.JSONArray&#10;import org.json.JSONObject&#10;&#10;/**&#10; * 금주 기록을 저장하는 데이터 클래스&#10; *&#10; * @property id 고유 ID (저장 시간 기반)&#10; * @property startDate 금주 시작 날짜 (문자열 형식: &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10; * @property endDate 금주 종료 날짜 (문자열 형식: &quot;yyyy-MM-dd HH:mm:ss&quot;)&#10; * @property duration 목표 기간 (일 또는 분 단위)&#10; * @property achievedDays 실제 달성한 기간 (일 또는 분 단위, 완료 시 duration과 동일)&#10; * @property achievedLevel 달성한 레벨&#10; * @property levelTitle 달성한 레벨 타이틀&#10; * @property isCompleted 목표를 완료했는지 여부 (true: 완료, false: 중도 포기)&#10; */&#10;data class SobrietyRecord(&#10;    val id: Long,&#10;    val startDate: String,&#10;    val endDate: String,&#10;    val duration: Int,&#10;    val achievedDays: Int = duration, // 완료된 경우 기본값은 전체 기간&#10;    val achievedLevel: Int,&#10;    val levelTitle: String,&#10;    val isCompleted: Boolean&#10;) {&#10;    /**&#10;     * 기록을 JSONObject로 변환&#10;     */&#10;    fun toJson(): JSONObject {&#10;        val json = JSONObject()&#10;        json.put(&quot;id&quot;, id)&#10;        json.put(&quot;startDate&quot;, startDate)&#10;        json.put(&quot;endDate&quot;, endDate)&#10;        json.put(&quot;duration&quot;, duration)&#10;        json.put(&quot;achievedDays&quot;, achievedDays)&#10;        json.put(&quot;achievedLevel&quot;, achievedLevel)&#10;        json.put(&quot;levelTitle&quot;, levelTitle)&#10;        json.put(&quot;isCompleted&quot;, isCompleted)&#10;        return json&#10;    }&#10;&#10;    companion object {&#10;        /**&#10;         * JSONObject에서 기록 객체 생성&#10;         */&#10;        fun fromJson(json: JSONObject): SobrietyRecord {&#10;            return SobrietyRecord(&#10;                id = json.getLong(&quot;id&quot;),&#10;                startDate = json.getString(&quot;startDate&quot;),&#10;                endDate = json.getString(&quot;endDate&quot;),&#10;                duration = json.getInt(&quot;duration&quot;),&#10;                achievedDays = json.getInt(&quot;achievedDays&quot;),&#10;                achievedLevel = json.getInt(&quot;achievedLevel&quot;),&#10;                levelTitle = json.getString(&quot;levelTitle&quot;),&#10;                isCompleted = json.getBoolean(&quot;isCompleted&quot;)&#10;            )&#10;        }&#10;&#10;        /**&#10;         * 기록 목록을 JSON 문자열로 변환&#10;         */&#10;        fun toJsonArray(records: List&lt;SobrietyRecord&gt;): String {&#10;            val jsonArray = JSONArray()&#10;            records.forEach { record -&gt;&#10;                jsonArray.put(record.toJson())&#10;            }&#10;            return jsonArray.toString()&#10;        }&#10;&#10;        /**&#10;         * JSON 문자열에서 기록 목록 생성&#10;         */&#10;        fun fromJsonArray(jsonString: String): List&lt;SobrietyRecord&gt; {&#10;            val records = mutableListOf&lt;SobrietyRecord&gt;()&#10;            try {&#10;                val jsonArray = JSONArray(jsonString)&#10;                for (i in 0 until jsonArray.length()) {&#10;                    val jsonObject = jsonArray.getJSONObject(i)&#10;                    records.add(fromJson(jsonObject))&#10;                }&#10;            } catch (e: Exception) {&#10;                // JSON 파싱 오류 시 빈 목록 반환&#10;                e.printStackTrace()&#10;            }&#10;            return records&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/btn_cancel_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/btn_cancel_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#FFFFFF&quot; /&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;#F44336&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/btn_confirm_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/btn_confirm_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#FFFFFF&quot; /&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;#4CAF50&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/btn_stop_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/btn_stop_background.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;#F44336&quot; /&gt; &lt;!-- 중지 버튼을 빨간색으로 설정 --&gt;&#10;    &lt;size android:width=&quot;64dp&quot; android:height=&quot;64dp&quot; /&gt;&#10;&lt;/shape&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;oval&quot;&gt;&#10;    &lt;solid android:color=&quot;#000000&quot; /&gt; &lt;!-- 중지 버튼을 검은색으로 변경 --&gt;&#10;    &lt;size android:width=&quot;128dp&quot; android:height=&quot;128dp&quot; /&gt; &lt;!-- 크기를 2배로 증가 --&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/button_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/button_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#4CAF50&quot; /&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &lt;padding&#10;        android:bottom=&quot;8dp&quot;&#10;        android:left=&quot;16dp&quot;&#10;        android:right=&quot;16dp&quot;&#10;        android:top=&quot;8dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/button_secondary_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/button_secondary_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;solid android:color=&quot;#E0E0E0&quot; /&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;#BDBDBD&quot; /&gt;&#10;    &lt;corners android:radius=&quot;8dp&quot; /&gt;&#10;    &lt;padding&#10;        android:bottom=&quot;8dp&quot;&#10;        android:left=&quot;16dp&quot;&#10;        android:right=&quot;16dp&quot;&#10;        android:top=&quot;8dp&quot; /&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/custom_progress_bar.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/custom_progress_bar.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;layer-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;!-- 배경 --&gt;&#10;    &lt;item android:id=&quot;@android:id/background&quot;&gt;&#10;        &lt;shape android:shape=&quot;rectangle&quot;&gt;&#10;            &lt;corners android:radius=&quot;5dp&quot; /&gt;&#10;            &lt;solid android:color=&quot;#EFEFEF&quot; /&gt;&#10;        &lt;/shape&gt;&#10;    &lt;/item&gt;&#10;&#10;    &lt;!-- 프로그레스 --&gt;&#10;    &lt;item android:id=&quot;@android:id/progress&quot;&gt;&#10;        &lt;clip&gt;&#10;            &lt;shape android:shape=&quot;rectangle&quot;&gt;&#10;                &lt;corners android:radius=&quot;5dp&quot; /&gt;&#10;                &lt;solid android:color=&quot;#4CAF50&quot; /&gt; &lt;!-- 초록색 프로그레스 --&gt;&#10;            &lt;/shape&gt;&#10;        &lt;/clip&gt;&#10;    &lt;/item&gt;&#10;&lt;/layer-list&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/ic_stop.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/ic_stop.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24.0&quot;&#10;    android:viewportHeight=&quot;24.0&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M8,8h8v8h-8z&quot;/&gt; &lt;!-- 흰색 사각형 모양 --&gt;&#10;&lt;/vector&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:width=&quot;24dp&quot;&#10;    android:height=&quot;24dp&quot;&#10;    android:viewportWidth=&quot;24.0&quot;&#10;    android:viewportHeight=&quot;24.0&quot;&gt;&#10;    &lt;path&#10;        android:fillColor=&quot;#FFFFFF&quot;&#10;        android:pathData=&quot;M4,4h16v16h-16z&quot;/&gt; &lt;!-- 흰색 사각형 모양을 더 크게 수정 --&gt;&#10;&lt;/vector&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_main.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.drawerlayout.widget.DrawerLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/drawerLayout&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background&quot;&gt;&#10;&#10;    &lt;!-- 메인 컨텐츠 --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- 상단 툴바 --&gt;&#10;        &lt;androidx.appcompat.widget.Toolbar&#10;            android:id=&quot;@+id/toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;?attr/actionBarSize&quot;&#10;            android:background=&quot;@color/background&quot;&#10;            android:elevation=&quot;0dp&quot;&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btnMenu&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:src=&quot;@drawable/ic_menu&quot;&#10;                android:contentDescription=&quot;메뉴 열기&quot;/&gt;&#10;&#10;        &lt;/androidx.appcompat.widget.Toolbar&gt;&#10;&#10;        &lt;!-- 중앙 컨텐츠 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:padding=&quot;24dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                style=&quot;@style/TextTitle&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;알중시계&quot;&#10;                android:textSize=&quot;36sp&quot;&#10;                android:textColor=&quot;@color/text_accent&quot;&#10;                android:layout_marginBottom=&quot;48dp&quot;/&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- 네비게이션 드로어 --&gt;&#10;    &lt;com.google.android.material.navigation.NavigationView&#10;        android:id=&quot;@+id/navigationView&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        android:background=&quot;@color/background&quot;&#10;        app:menu=&quot;@menu/drawer_menu&quot;/&gt;&#10;&#10;&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.drawerlayout.widget.DrawerLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/drawerLayout&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background&quot;&gt;&#10;&#10;    &lt;!-- 메인 컨텐츠 --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- 상단 툴바 --&gt;&#10;        &lt;androidx.appcompat.widget.Toolbar&#10;            android:id=&quot;@+id/toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:minHeight=&quot;?attr/actionBarSize&quot;&#10;            android:paddingTop=&quot;24dp&quot;&#10;            android:background=&quot;@color/background&quot;&#10;            android:elevation=&quot;0dp&quot;&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btnMenu&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:src=&quot;@drawable/ic_menu&quot;&#10;                android:contentDescription=&quot;메뉴 열기&quot;/&gt;&#10;&#10;        &lt;/androidx.appcompat.widget.Toolbar&gt;&#10;&#10;        &lt;!-- 중앙 컨텐츠 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:padding=&quot;24dp&quot;&gt;&#10;&#10;            &lt;TextView&#10;                style=&quot;@style/TextTitle&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;알중시계&quot;&#10;                android:textSize=&quot;36sp&quot;&#10;                android:textColor=&quot;@color/text_accent&quot;&#10;                android:layout_marginBottom=&quot;48dp&quot;/&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- 네비게이션 드로어 --&gt;&#10;    &lt;com.google.android.material.navigation.NavigationView&#10;        android:id=&quot;@+id/navigationView&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        android:background=&quot;@color/background&quot;&#10;        app:menu=&quot;@menu/drawer_menu&quot;/&gt;&#10;&#10;&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_record_summary.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_record_summary.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSummaryTitle&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;목표 달성을 축하합니다!&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;androidx.cardview.widget.CardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;금주 기간&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvPeriod&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:text=&quot;시작: 2023년 07월 01일\n종료: 2023년 07월 30일&quot;&#10;                    android:textSize=&quot;16sp&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;androidx.cardview.widget.CardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;달성 레벨&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvAchievedLevel&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:text=&quot;Lv. 3 (의지의 시작)&quot;&#10;                    android:textSize=&quot;16sp&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;androidx.cardview.widget.CardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;32dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;총 금주 기간&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvTotalDuration&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:text=&quot;목표 30일을 완료했습니다!&quot;&#10;                    android:textSize=&quot;16sp&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnNewChallenge&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:background=&quot;@drawable/button_background&quot;&#10;            android:padding=&quot;12dp&quot;&#10;            android:text=&quot;새 도전 시작하기&quot;&#10;            android:textColor=&quot;@android:color/white&quot;&#10;            android:textSize=&quot;18sp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/content_main.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/content_main.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:gravity=&quot;center&quot;&#10;    android:padding=&quot;24dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        style=&quot;@style/TextTitle&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;알중시계&quot;&#10;        android:textSize=&quot;36sp&quot;&#10;        android:textColor=&quot;@color/text_accent&quot;&#10;        android:layout_marginBottom=&quot;48dp&quot;/&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnStartJourney&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;@string/btn_start&quot;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#10;        style=&quot;@style/ButtonPrimary&quot;/&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnViewStatus&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;@string/btn_status&quot;&#10;        style=&quot;@style/ButtonSecondary&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/content_start.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/content_start.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:gravity=&quot;center&quot;&#10;    android:padding=&quot;24dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;금주 목표 일수&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_marginBottom=&quot;32dp&quot;/&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;32dp&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/editTextDays&quot;&#10;            android:layout_width=&quot;100dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:inputType=&quot;number&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:textSize=&quot;32sp&quot;&#10;            android:hint=&quot;00&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;일&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnStart&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;금주 시작&quot;&#10;        style=&quot;@style/ButtonPrimary&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:gravity=&quot;center&quot;&#10;    android:padding=&quot;24dp&quot;&gt;&#10;&#10;    &lt;TextView&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;금주 목표 일수&quot;&#10;        android:textSize=&quot;24sp&quot;&#10;        android:textStyle=&quot;bold&quot;&#10;        android:layout_marginBottom=&quot;32dp&quot;/&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginBottom=&quot;32dp&quot;&gt;&#10;&#10;        &lt;EditText&#10;            android:id=&quot;@+id/editTextDays&quot;&#10;            android:layout_width=&quot;100dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:inputType=&quot;number&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:textSize=&quot;32sp&quot;&#10;            android:hint=&quot;00&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvDaysLabel&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;일&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:layout_marginStart=&quot;8dp&quot;/&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;Button&#10;        android:id=&quot;@+id/btnStart&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;금주 시작&quot;&#10;        style=&quot;@style/ButtonPrimary&quot;/&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_goal_completed.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_goal_completed.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_margin=&quot;16dp&quot;&#10;    app:cardBackgroundColor=&quot;@android:color/white&quot;&#10;    app:cardCornerRadius=&quot;16dp&quot;&#10;    app:cardElevation=&quot;8dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;24dp&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imageViewCongrats&quot;&#10;            android:layout_width=&quot;80dp&quot;&#10;            android:layout_height=&quot;80dp&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:src=&quot;@android:drawable/ic_dialog_info&quot;&#10;            android:contentDescription=&quot;축하 아이콘&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvCongrats&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;목표 달성을 축하합니다!&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvAchievement&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;총 30일 동안 금주를 성공적으로 완료했습니다.&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnSaveRecord&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:background=&quot;@drawable/button_background&quot;&#10;                android:text=&quot;기록 저장하기&quot;&#10;                android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnContinue&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:background=&quot;@drawable/button_secondary_background&quot;&#10;                android:text=&quot;계속 진행하기&quot;&#10;                android:textColor=&quot;@android:color/black&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:layout_marginStart=&quot;8dp&quot;&#10;    android:layout_marginEnd=&quot;8dp&quot;&#10;    android:layout_marginTop=&quot;16dp&quot;&#10;    android:layout_marginBottom=&quot;16dp&quot;&#10;    app:cardBackgroundColor=&quot;@android:color/white&quot;&#10;    app:cardCornerRadius=&quot;16dp&quot;&#10;    app:cardElevation=&quot;8dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;24dp&quot;&gt;&#10;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/imageViewCongrats&quot;&#10;            android:layout_width=&quot;80dp&quot;&#10;            android:layout_height=&quot;80dp&quot;&#10;            android:layout_gravity=&quot;center&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            android:src=&quot;@android:drawable/ic_dialog_info&quot;&#10;            android:contentDescription=&quot;축하 아이콘&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvCongrats&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;목표 달성을 축하합니다!&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvAchievement&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;총 30일 동안 금주를 성공적으로 완료했습니다.&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnSaveRecord&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:background=&quot;@drawable/button_background&quot;&#10;                android:text=&quot;기록 저장하기&quot;&#10;                android:textColor=&quot;@android:color/white&quot; /&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnContinue&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:background=&quot;@drawable/button_secondary_background&quot;&#10;                android:text=&quot;계속 진행하기&quot;&#10;                android:textColor=&quot;@android:color/black&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/dialog_stop_sobriety.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/dialog_stop_sobriety.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#10;    app:cardElevation=&quot;6dp&quot;&#10;    android:layout_margin=&quot;24dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;20dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;금주 중지&quot;&#10;            android:textSize=&quot;20sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#000000&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;정말 금주를 중지하시겠습니까?\n모든 금주 기록이 초기화됩니다.&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textColor=&quot;#333333&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;/&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;end&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnCancel&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;&#10;                android:text=&quot;취소&quot;&#10;                android:textColor=&quot;#F44336&quot;&#10;                android:background=&quot;@drawable/btn_cancel_background&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:paddingStart=&quot;16dp&quot;&#10;                android:paddingEnd=&quot;16dp&quot;/&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnConfirm&quot;&#10;                android:layout_width=&quot;wrap_content&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:text=&quot;확인&quot;&#10;                android:textColor=&quot;#4CAF50&quot;&#10;                android:background=&quot;@drawable/btn_confirm_background&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:paddingStart=&quot;16dp&quot;&#10;                android:paddingEnd=&quot;16dp&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.cardview.widget.CardView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    app:cardCornerRadius=&quot;12dp&quot;&#10;    app:cardElevation=&quot;6dp&quot;&#10;    android:layout_margin=&quot;8dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;20dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;금주 중지&quot;&#10;            android:textSize=&quot;20sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#000000&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;정말 금주를 중지하시겠습니까?\n모든 금주 기록이 초기화됩니다.&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textColor=&quot;#333333&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;/&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnCancel&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;&#10;                android:text=&quot;취소&quot;&#10;                android:textColor=&quot;#F44336&quot;&#10;                android:background=&quot;@drawable/btn_cancel_background&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:gravity=&quot;center&quot;/&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnConfirm&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:text=&quot;확인&quot;&#10;                android:textColor=&quot;#4CAF50&quot;&#10;                android:background=&quot;@drawable/btn_confirm_background&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:gravity=&quot;center&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/layout_base.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/layout_base.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.drawerlayout.widget.DrawerLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/drawerLayout&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background&quot;&gt;&#10;&#10;    &lt;!-- 메인 컨텐츠 컨테이너 --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- 상단 툴바 --&gt;&#10;        &lt;androidx.appcompat.widget.Toolbar&#10;            android:id=&quot;@+id/toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:minHeight=&quot;?attr/actionBarSize&quot;&#10;            android:paddingTop=&quot;24dp&quot;&#10;            android:background=&quot;@color/background&quot;&#10;            android:elevation=&quot;0dp&quot;&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btnMenu&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:src=&quot;@drawable/ic_menu&quot;&#10;                android:contentDescription=&quot;메뉴 열기&quot;/&gt;&#10;&#10;        &lt;/androidx.appcompat.widget.Toolbar&gt;&#10;&#10;        &lt;!-- 각 화면의 컨텐츠가 들어갈 곳 --&gt;&#10;        &lt;FrameLayout&#10;            android:id=&quot;@+id/contentFrame&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- 네비게이션 드로어 --&gt;&#10;    &lt;com.google.android.material.navigation.NavigationView&#10;        android:id=&quot;@+id/navigationView&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        android:background=&quot;@color/background&quot;&#10;        app:menu=&quot;@menu/drawer_menu&quot;/&gt;&#10;&#10;&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/toast_with_buttons.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/toast_with_buttons.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.cardview.widget.CardView&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    app:cardCornerRadius=&quot;8dp&quot;&#10;    app:cardElevation=&quot;6dp&quot;&#10;    app:cardBackgroundColor=&quot;#3A3A3A&quot;&#10;    android:layout_margin=&quot;16dp&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvToastMessage&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;금주가 초기화되었습니다.&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textColor=&quot;#FFFFFF&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;/&gt;&#10;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;horizontal&quot;&#10;            android:gravity=&quot;center&quot;&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnToastCancel&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;취소&quot;&#10;                android:layout_marginEnd=&quot;8dp&quot;&#10;                style=&quot;@style/ButtonSecondary&quot;/&gt;&#10;&#10;            &lt;Button&#10;                android:id=&quot;@+id/btnToastConfirm&quot;&#10;                android:layout_width=&quot;0dp&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:layout_weight=&quot;1&quot;&#10;                android:text=&quot;확인&quot;&#10;                android:layout_marginStart=&quot;8dp&quot;&#10;                style=&quot;@style/ButtonPrimary&quot;/&gt;&#10;        &lt;/LinearLayout&gt;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/androidx.cardview.widget.CardView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>