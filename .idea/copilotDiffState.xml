<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import kotlinx.coroutines.launch&#10;import kotlin.jvm.java&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : ComponentActivity() {&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    @Composable&#10;    protected fun BaseScreen(content: @Composable () -&gt; Unit) {&#10;        val drawerState = rememberDrawerState(DrawerValue.Closed)&#10;        val scope = rememberCoroutineScope()&#10;        val context = LocalContext.current&#10;&#10;        ModalNavigationDrawer(&#10;            drawerState = drawerState,&#10;            drawerContent = {&#10;                ModalDrawerSheet {&#10;                    DrawerMenu(&#10;                        nickname = &quot;알중이1&quot;,&#10;                        onNicknameClick = {},&#10;                        onItemSelected = { menuItem -&gt;&#10;                            scope.launch { drawerState.close() }&#10;                            handleMenuSelection(menuItem)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        ) {&#10;            Scaffold(&#10;                topBar = {&#10;                    TopAppBar(&#10;                        title = { Text(getScreenTitle()) },&#10;                        navigationIcon = {&#10;                            IconButton(&#10;                                onClick = {&#10;                                    scope.launch {&#10;                                        drawerState.open()&#10;                                    }&#10;                                }&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Menu,&#10;                                    contentDescription = &quot;메뉴&quot;&#10;                                )&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            ) { paddingValues -&gt;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(paddingValues)&#10;                ) {&#10;                    content()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun handleMenuSelection(menuItem: String) {&#10;        when (menuItem) {&#10;            &quot;금주&quot; -&gt; {&#10;                if (this !is StatusActivity) {&#10;                    navigateToActivity(StatusActivity::class.java)&#10;                }&#10;            }&#10;            &quot;기록&quot; -&gt; {&#10;                if (this !is RecordsActivity) {&#10;                    navigateToActivity(RecordsActivity::class.java)&#10;                }&#10;            }&#10;            &quot;레벨&quot; -&gt; {&#10;                if (this !is LevelActivity) {&#10;                    navigateToActivity(LevelActivity::class.java)&#10;                }&#10;            }&#10;            &quot;설정&quot; -&gt; {&#10;                if (this !is TestActivity) {&#10;                    navigateToActivity(TestActivity::class.java)&#10;                }&#10;            }&#10;            &quot;테스트&quot; -&gt; {&#10;                if (this !is TestActivity) {&#10;                    navigateToActivity(TestActivity::class.java)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 효과 없이 액티비티 전환&#10;     */&#10;    private fun navigateToActivity(activityClass: Class&lt;*&gt;) {&#10;        val intent = Intent(this, activityClass)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0) // 화면 전환 효과 제거&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현해야 할 화면 제목&#10;     */&#10;    protected abstract fun getScreenTitle(): String&#10;}&#10;&#10;@Composable&#10;fun DrawerMenu(&#10;    nickname: String,&#10;    onNicknameClick: () -&gt; Unit,&#10;    onItemSelected: (String) -&gt; Unit&#10;) {&#10;    val menuItems = listOf(&#10;        &quot;금주&quot; to Icons.Default.PlayArrow,&#10;        &quot;기록&quot; to Icons.Default.List,&#10;        &quot;레벨&quot; to Icons.Default.Star&#10;    )&#10;    val settingsItems = listOf(&#10;        &quot;설정&quot; to Icons.Default.Settings,&#10;        &quot;테스트&quot; to Icons.Default.Build&#10;    )&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 8.dp, end = 16.dp, top = 16.dp, bottom = 16.dp), // 아이콘들과 동일한 왼쪽 여백 적용&#10;        horizontalAlignment = Alignment.Start&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(72.dp)&#10;                .align(Alignment.Start)&#10;        ) {&#10;            Surface(&#10;                shape = MaterialTheme.shapes.large,&#10;                color = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Person,&#10;                    contentDescription = &quot;아바타&quot;,&#10;                    tint = MaterialTheme.colorScheme.onPrimary,&#10;                    modifier = Modifier.size(40.dp).align(Alignment.Center)&#10;                )&#10;            }&#10;        }&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        Text(&#10;            text = nickname,&#10;            fontSize = 18.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier&#10;                .align(Alignment.Start)&#10;                .clickable { onNicknameClick() }&#10;        )&#10;        Divider(modifier = Modifier.padding(vertical = 12.dp))&#10;        menuItems.forEach { (title, icon) -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { onItemSelected(title) }&#10;                    .padding(vertical = 12.dp, horizontal = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;        Divider(modifier = Modifier.padding(vertical = 8.dp))&#10;        settingsItems.forEach { (title, icon) -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { onItemSelected(title) }&#10;                    .padding(vertical = 12.dp, horizontal = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DrawerMenuPreview(&#10;    nickname: String = &quot;알중이1&quot;,&#10;    onNicknameClick: () -&gt; Unit = {},&#10;    onItemSelected: (String) -&gt; Unit = {}&#10;) {&#10;    val menuItems = listOf(&#10;        &quot;금주&quot; to Icons.Default.PlayArrow,&#10;        &quot;기록&quot; to Icons.Default.List,&#10;        &quot;레벨&quot; to Icons.Default.Star&#10;    )&#10;&#10;    val settingsItems = listOf(&#10;        &quot;설정&quot; to Icons.Default.Settings,&#10;        &quot;테스트&quot; to Icons.Default.Build // 대체 아이콘 사용&#10;    )&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(start = 8.dp, end = 16.dp, top = 16.dp, bottom = 16.dp), // 아이콘들과 동일한 왼쪽 여백 적용&#10;        horizontalAlignment = Alignment.Start&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(72.dp)&#10;                .align(Alignment.Start)&#10;        ) {&#10;            Surface(&#10;                shape = MaterialTheme.shapes.large,&#10;                color = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Person,&#10;                    contentDescription = &quot;아바타&quot;,&#10;                    tint = MaterialTheme.colorScheme.onPrimary,&#10;                    modifier = Modifier.size(40.dp).align(Alignment.Center)&#10;                )&#10;            }&#10;        }&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        Text(&#10;            text = nickname,&#10;            fontSize = 18.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier&#10;                .align(Alignment.Start)&#10;                .clickable { onNicknameClick() }&#10;        )&#10;        Divider(modifier = Modifier.padding(vertical = 12.dp))&#10;        menuItems.forEach { (title, icon) -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { onItemSelected(title) }&#10;                    .padding(vertical = 12.dp, horizontal = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        // 구분선&#10;        Divider(modifier = Modifier.padding(vertical = 8.dp))&#10;&#10;        // 설정 메뉴 목록&#10;        settingsItems.forEach { (title, icon) -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { onItemSelected(title) }&#10;                    .padding(vertical = 12.dp, horizontal = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewDrawerMenu() {&#10;    MaterialTheme {&#10;        ModalNavigationDrawer(&#10;            drawerState = rememberDrawerState(DrawerValue.Open),&#10;            drawerContent = {&#10;                ModalDrawerSheet {&#10;                    DrawerMenu(&#10;                        nickname = &quot;알중이1&quot;,&#10;                        onNicknameClick = {},&#10;                        onItemSelected = {}&#10;                    )&#10;                }&#10;            }&#10;        ) {&#10;            Box(modifier = Modifier.fillMaxSize()) {}&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import kotlinx.coroutines.launch&#10;import kotlin.jvm.java&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : ComponentActivity() {&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    @Composable&#10;    protected fun BaseScreen(content: @Composable () -&gt; Unit) {&#10;        val drawerState = rememberDrawerState(DrawerValue.Closed)&#10;        val scope = rememberCoroutineScope()&#10;        val context = LocalContext.current&#10;&#10;        ModalNavigationDrawer(&#10;            drawerState = drawerState,&#10;            drawerContent = {&#10;                ModalDrawerSheet {&#10;                    DrawerMenu(&#10;                        nickname = &quot;알중이1&quot;,&#10;                        onNicknameClick = {},&#10;                        onItemSelected = { menuItem -&gt;&#10;                            scope.launch { drawerState.close() }&#10;                            handleMenuSelection(menuItem)&#10;                        }&#10;                    )&#10;                }&#10;            }&#10;        ) {&#10;            Scaffold(&#10;                topBar = {&#10;                    TopAppBar(&#10;                        title = { Text(getScreenTitle()) },&#10;                        navigationIcon = {&#10;                            IconButton(&#10;                                onClick = {&#10;                                    scope.launch {&#10;                                        drawerState.open()&#10;                                    }&#10;                                }&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Menu,&#10;                                    contentDescription = &quot;메뉴&quot;&#10;                                )&#10;                            }&#10;                        }&#10;                    )&#10;                }&#10;            ) { paddingValues -&gt;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxSize()&#10;                        .padding(paddingValues)&#10;                ) {&#10;                    content()&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun handleMenuSelection(menuItem: String) {&#10;        when (menuItem) {&#10;            &quot;금주&quot; -&gt; {&#10;                if (this !is StatusActivity) {&#10;                    navigateToActivity(StatusActivity::class.java)&#10;                }&#10;            }&#10;            &quot;기록&quot; -&gt; {&#10;                if (this !is RecordsActivity) {&#10;                    navigateToActivity(RecordsActivity::class.java)&#10;                }&#10;            }&#10;            &quot;레벨&quot; -&gt; {&#10;                if (this !is LevelActivity) {&#10;                    navigateToActivity(LevelActivity::class.java)&#10;                }&#10;            }&#10;            &quot;설정&quot; -&gt; {&#10;                if (this !is TestActivity) {&#10;                    navigateToActivity(TestActivity::class.java)&#10;                }&#10;            }&#10;            &quot;테스트&quot; -&gt; {&#10;                if (this !is TestActivity) {&#10;                    navigateToActivity(TestActivity::class.java)&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 효과 없이 액티비티 전환&#10;     */&#10;    private fun navigateToActivity(activityClass: Class&lt;*&gt;) {&#10;        val intent = Intent(this, activityClass)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0) // 화면 전환 효과 제거&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현해야 할 화면 제목&#10;     */&#10;    protected abstract fun getScreenTitle(): String&#10;}&#10;&#10;@Composable&#10;fun DrawerMenu(&#10;    nickname: String,&#10;    onNicknameClick: () -&gt; Unit,&#10;    onItemSelected: (String) -&gt; Unit&#10;) {&#10;    val menuItems = listOf(&#10;        &quot;금주&quot; to Icons.Default.PlayArrow,&#10;        &quot;기록&quot; to Icons.Default.List,&#10;        &quot;레벨&quot; to Icons.Default.Star&#10;    )&#10;    val settingsItems = listOf(&#10;        &quot;설정&quot; to Icons.Default.Settings,&#10;        &quot;테스트&quot; to Icons.Default.Build&#10;    )&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.Start&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(72.dp)&#10;                .align(Alignment.Start)&#10;        ) {&#10;            Surface(&#10;                shape = MaterialTheme.shapes.large,&#10;                color = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Person,&#10;                    contentDescription = &quot;아바타&quot;,&#10;                    tint = MaterialTheme.colorScheme.onPrimary,&#10;                    modifier = Modifier.size(40.dp).align(Alignment.Center)&#10;                )&#10;            }&#10;        }&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        Text(&#10;            text = nickname,&#10;            fontSize = 18.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier&#10;                .align(Alignment.Start)&#10;                .clickable { onNicknameClick() }&#10;        )&#10;        Divider(modifier = Modifier.padding(vertical = 12.dp))&#10;        menuItems.forEach { (title, icon) -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { onItemSelected(title) }&#10;                    .padding(vertical = 12.dp, horizontal = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;        Divider(modifier = Modifier.padding(vertical = 8.dp))&#10;        settingsItems.forEach { (title, icon) -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { onItemSelected(title) }&#10;                    .padding(vertical = 12.dp, horizontal = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DrawerMenuPreview(&#10;    nickname: String = &quot;알중이1&quot;,&#10;    onNicknameClick: () -&gt; Unit = {},&#10;    onItemSelected: (String) -&gt; Unit = {}&#10;) {&#10;    val menuItems = listOf(&#10;        &quot;금주&quot; to Icons.Default.PlayArrow,&#10;        &quot;기록&quot; to Icons.Default.List,&#10;        &quot;레벨&quot; to Icons.Default.Star&#10;    )&#10;&#10;    val settingsItems = listOf(&#10;        &quot;설정&quot; to Icons.Default.Settings,&#10;        &quot;테스트&quot; to Icons.Default.Build // 대체 아이콘 사용&#10;    )&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp),&#10;        horizontalAlignment = Alignment.Start&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .size(72.dp)&#10;                .align(Alignment.Start)&#10;        ) {&#10;            Surface(&#10;                shape = MaterialTheme.shapes.large,&#10;                color = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.fillMaxSize()&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Person,&#10;                    contentDescription = &quot;아바타&quot;,&#10;                    tint = MaterialTheme.colorScheme.onPrimary,&#10;                    modifier = Modifier.size(40.dp).align(Alignment.Center)&#10;                )&#10;            }&#10;        }&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;        Text(&#10;            text = nickname,&#10;            fontSize = 18.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier&#10;                .align(Alignment.Start)&#10;                .clickable { onNicknameClick() }&#10;        )&#10;        Divider(modifier = Modifier.padding(vertical = 12.dp))&#10;        menuItems.forEach { (title, icon) -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { onItemSelected(title) }&#10;                    .padding(vertical = 12.dp, horizontal = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;&#10;        // 구분선&#10;        Divider(modifier = Modifier.padding(vertical = 8.dp))&#10;&#10;        // 설정 메뉴 목록&#10;        settingsItems.forEach { (title, icon) -&gt;&#10;            Row(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .clickable { onItemSelected(title) }&#10;                    .padding(vertical = 12.dp, horizontal = 8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Icon(&#10;                    imageVector = icon,&#10;                    contentDescription = title,&#10;                    modifier = Modifier.size(24.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(16.dp))&#10;                Text(&#10;                    text = title,&#10;                    fontSize = 16.sp&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewDrawerMenu() {&#10;    MaterialTheme {&#10;        ModalNavigationDrawer(&#10;            drawerState = rememberDrawerState(DrawerValue.Open),&#10;            drawerContent = {&#10;                ModalDrawerSheet {&#10;                    DrawerMenu(&#10;                        nickname = &quot;알중이1&quot;,&#10;                        onNicknameClick = {},&#10;                        onItemSelected = {}&#10;                    )&#10;                }&#10;            }&#10;        ) {&#10;            Box(modifier = Modifier.fillMaxSize()) {}&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/NoPasteEditText.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/NoPasteEditText.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.ClipboardManager&#10;import android.content.Context&#10;import android.util.AttributeSet&#10;import android.view.ActionMode&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import android.view.inputmethod.EditorInfo&#10;import android.view.inputmethod.InputConnection&#10;import android.widget.EditText&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;/**&#10; * 붙여넣기 기능이 비활성화된 커스텀 EditText&#10; */&#10;class NoPasteEditText : EditText {&#10;    constructor(context: Context) : super(context) {&#10;        init()&#10;    }&#10;&#10;    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs) {&#10;        init()&#10;    }&#10;&#10;    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {&#10;        init()&#10;    }&#10;&#10;    private fun init() {&#10;        // 길게 누르기 비활성화&#10;        isLongClickable = false&#10;&#10;        // 텍스트 선택 비활성화&#10;        setTextIsSelectable(false)&#10;&#10;        // 컨텍스트 메뉴 비활성화&#10;        customSelectionActionModeCallback = object : ActionMode.Callback {&#10;            override fun onCreateActionMode(mode: ActionMode?, menu: Menu?): Boolean = false&#10;            override fun onPrepareActionMode(mode: ActionMode?, menu: Menu?): Boolean = false&#10;            override fun onActionItemClicked(mode: ActionMode?, item: MenuItem?): Boolean = false&#10;            override fun onDestroyActionMode(mode: ActionMode?) {}&#10;        }&#10;    }&#10;&#10;    override fun onTextContextMenuItem(id: Int): Boolean {&#10;        // 모든 컨텍스트 메뉴 항목(붙여넣기, 복사 등) 차단&#10;        return false&#10;    }&#10;&#10;    override fun onCreateInputConnection(outAttrs: EditorInfo): InputConnection {&#10;        val connection = super.onCreateInputConnection(outAttrs)&#10;&#10;        // IME 옵션 설정&#10;        outAttrs.imeOptions = outAttrs.imeOptions or&#10;                EditorInfo.IME_FLAG_NO_EXTRACT_UI or&#10;                EditorInfo.IME_FLAG_NO_FULLSCREEN&#10;&#10;        return connection&#10;    }&#10;&#10;    // 붙여넣기 방지를 위해 모든 입력 시도를 추가로 검사&#10;    override fun onTextChanged(text: CharSequence?, start: Int, lengthBefore: Int, lengthAfter: Int) {&#10;        super.onTextChanged(text, start, lengthBefore, lengthAfter)&#10;&#10;        // 텍스트가 한 번에 여러 자리 추가되는 경우 (붙여넣기로 추정)&#10;        if (lengthAfter &gt; 1 &amp;&amp; lengthBefore == 0) {&#10;            val currentText = this.text.toString()&#10;            if (start == 0 &amp;&amp; currentText.length &gt; 1) {&#10;                // 마지막 숫자만 유지&#10;                setText(currentText.substring(currentText.length - 1))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Jetpack Compose 기반으로 UI를 완전히 전환한 경우, 이 파일은 더 이상 필요하지 않으므로 삭제해도 됩니다.&#10;// 만약 붙여넣기 방지 기능이 Compose에서 필요하다면, Compose용 커스텀 TextField를 별도로 구현해야 합니다.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java" />
              <option name="updatedContent" value="package com.example.alcoholictimer;&#10;&#10;import android.os.Bundle;&#10;import android.widget.TextView;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import java.util.Calendar;&#10;&#10;public class RecordSummaryActivity extends AppCompatActivity {&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_record_summary);&#10;&#10;        // ...existing code...&#10;&#10;        TextView tvRecordTitle = findViewById(R.id.tvRecordTitle);&#10;        // 예시: 현재 월을 기록 종료 시점의 월로 사용합니다.&#10;        int month = Calendar.getInstance().get(Calendar.MONTH) + 1;&#10;        tvRecordTitle.setText(String.format(&quot;%d월의 금주&quot;, month));&#10;&#10;        // ...existing code...&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SettingsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SettingsActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.tooling.preview.Preview&#10;&#10;class SettingsActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                SettingsScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;설정&quot;&#10;&#10;    @Composable&#10;    private fun SettingsScreen() {&#10;        val context = LocalContext.current&#10;        var selectedMode by remember { mutableStateOf(Constants.TEST_MODE_REAL) }&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;설정&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            Text(&#10;                text = &quot;테스트 모드 선택&quot;,&#10;                fontSize = 18.sp,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_REAL,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_REAL }&#10;                )&#10;                Text(&quot;실제 모드&quot;)&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_MINUTE,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_MINUTE }&#10;                )&#10;                Text(&quot;분 모드&quot;)&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_SECOND,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_SECOND }&#10;                )&#10;                Text(&quot;초 모드&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Button(onClick = {&#10;                saveSettings(selectedMode)&#10;                Toast.makeText(context, &quot;설정이 저장되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;            }) {&#10;                Text(&quot;저장&quot;, fontSize = 18.sp)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveSettings(selectedMode: Int) {&#10;        val preferences = getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;        val editor = preferences.edit()&#10;        editor.putInt(Constants.PREF_KEY_TEST_MODE, selectedMode)&#10;        val success = editor.commit() // 동기 저장으로 변경하고 성공 여부 확인&#10;        Log.d(&quot;SettingsActivity&quot;, &quot;Settings saved. Mode: $selectedMode, Success: $success&quot;)&#10;&#10;        // Constants 클래스의 동적 설정 업데이트&#10;        Constants.updateTestMode(selectedMode)&#10;    }&#10;&#10;    @Composable&#10;    fun SettingsScreenPreview() {&#10;        BaseScreen {&#10;            SettingsScreen()&#10;        }&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewSettingsScreen() {&#10;        SettingsScreenPreview()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.appcompat.app.AppCompatActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.tooling.preview.Preview&#10;&#10;class TestActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                SettingsScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;설정&quot;&#10;&#10;    @Composable&#10;    private fun SettingsScreen() {&#10;        val context = LocalContext.current&#10;        var selectedMode by remember { mutableStateOf(Constants.TEST_MODE_REAL) }&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;설정&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            Text(&#10;                text = &quot;테스트 모드 선택&quot;,&#10;                fontSize = 18.sp,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_REAL,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_REAL }&#10;                )&#10;                Text(&quot;실제 모드&quot;)&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_MINUTE,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_MINUTE }&#10;                )&#10;                Text(&quot;분 모드&quot;)&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_SECOND,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_SECOND }&#10;                )&#10;                Text(&quot;초 모드&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Button(onClick = {&#10;                saveSettings(selectedMode)&#10;                Toast.makeText(context, &quot;설정이 저장되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;            }) {&#10;                Text(&quot;저장&quot;, fontSize = 18.sp)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveSettings(selectedMode: Int) {&#10;        val preferences = getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;        val editor = preferences.edit()&#10;        editor.putInt(Constants.PREF_KEY_TEST_MODE, selectedMode)&#10;        val success = editor.commit() // 동기 저장으로 변경하고 성공 여부 확인&#10;        Log.d(&quot;SettingsActivity&quot;, &quot;Settings saved. Mode: $selectedMode, Success: $success&quot;)&#10;&#10;        // Constants 클래스의 동적 설정 업데이트&#10;        Constants.updateTestMode(selectedMode)&#10;    }&#10;&#10;    @Composable&#10;    fun SettingsScreenPreview() {&#10;        BaseScreen {&#10;            SettingsScreen()&#10;        }&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewSettingsScreen() {&#10;        SettingsScreenPreview()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java" />
              <option name="originalContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}&#10;" />
              <option name="updatedContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.core.content.ContextCompat&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.RecordManager&#10;import com.example.alcoholictimer.utils.RecentActivityManager&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.Timer&#10;import java.util.TimerTask&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;&#10;class StatusActivity : BaseActivity() {&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#10;    private var goalAchievementChecked = false&#10;&#10;    private val levelTitles = listOf(&#10;        &quot;새싹 도전자&quot;,&#10;        &quot;첫걸음 성공&quot;,&#10;        &quot;의지의 시작&quot;,&#10;        &quot;한달의 기적&quot;,&#10;        &quot;습관의 탄생&quot;,&#10;        &quot;의지의 달인&quot;,&#10;        &quot;금주의 마스터&quot;,&#10;        &quot;절제의 달인&quot;&#10;    )&#10;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#10;    private var timer: Timer? = null&#10;    private val handler = Handler(Looper.getMainLooper())&#10;&#10;    // 금주 시작 시간 저장 변수&#10;    private var abstainStartTime: String = &quot;&quot;&#10;&#10;    // Compose State 변수들&#10;    private var timePassed by mutableIntStateOf(0)&#10;    private var hoursDisplay by mutableStateOf(&quot;&quot;)&#10;    private var timeDetail by mutableStateOf(&quot;&quot;)&#10;    private var progressValue by mutableFloatStateOf(0f)&#10;    private var statusMessage by mutableStateOf(&quot;&quot;)&#10;    private var timeUnitText by mutableStateOf(&quot;일&quot;)&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 상태&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                StatusScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;&#10;        // SharedPreferences에서 현재 테스트 모드를 읽어와서 Constants 업데이트&#10;        val sharedPref = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;        val currentTestMode = sharedPref.getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;        Constants.updateTestMode(currentTestMode)&#10;&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;&#10;        // 금주 시작 시간 초기화 (abstainStartTime이 비어있는 경우를 대비)&#10;        initAbstainStartTime()&#10;&#10;        updateUI()&#10;        startTimer()&#10;&#10;        // 목표 달성 플래그 초기화&#10;        goalAchievementChecked = false&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // 화면이 보이지 않을 때 타이머 정지&#10;        stopTimer()&#10;    }&#10;&#10;    // Activity 클래스의 onNewIntent를 오버라이드&#10;    public override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        setIntent(intent)&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;        updateUI()  // UI 즉시 갱신&#10;    }&#10;&#10;    private fun startTimer() {&#10;        stopTimer()&#10;        timer = Timer()&#10;        timer?.schedule(object : TimerTask() {&#10;            override fun run() {&#10;                handler.post {&#10;                    updateTimeDisplay()&#10;                }&#10;            }&#10;        }, 0, 100)  // 100ms 간격으로 업데이트&#10;    }&#10;&#10;    private fun stopTimer() {&#10;        timer?.cancel()&#10;        timer = null&#10;    }&#10;&#10;    private fun updateTimeDisplay() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        // 목표가 이미 달성되었으면 타이머 업데이트를 중단&#10;        if (completionFlag) {&#10;            stopTimer()&#10;            return&#10;        }&#10;&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따른 시간 계산 - 대형 숫자 업데이트&#10;        timePassed = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;        }&#10;&#10;        // 시간 계산&#10;        val hours = (secondsPassed / 3600) % 24&#10;&#10;        // 시간 표시 업데이트 - Compose State 사용&#10;        hoursDisplay = String.format(Locale.getDefault(), &quot;%02d시간&quot;, hours)&#10;&#10;        // 테스트 모드별 시간 표시 업데이트&#10;        timeDetail = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(Locale.getDefault(), &quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(Locale.getDefault(), &quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(Locale.getDefault(), &quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;        }&#10;&#10;        // 진행 상태 확인 및 완료 처리&#10;        checkProgressStatus()&#10;    }&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    @Composable&#10;    private fun StatusScreen() {&#10;        var showStopDialog by remember { mutableStateOf(false) }&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;금주 진행 상황&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 대형 숫자 표시&#10;            Text(&#10;                text = timePassed.toString(),&#10;                fontSize = 48.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            // 시간 단위 표시&#10;            Text(&#10;                text = timeUnitText,&#10;                fontSize = 18.sp,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 시간 표시&#10;            Text(&#10;                text = hoursDisplay,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            // 상세 시간 표시&#10;            Text(&#10;                text = timeDetail,&#10;                fontSize = 16.sp,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 진행률 표시&#10;            LinearProgressIndicator(&#10;                progress = { progressValue },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(8.dp)&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 상태 메시지&#10;            Text(&#10;                text = statusMessage,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;&#10;            // 중지 버튼&#10;            Button(&#10;                onClick = { showStopDialog = true },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Text(&quot;금주 중지&quot;, fontSize = 16.sp)&#10;            }&#10;        }&#10;&#10;        // 중지 확인 다이얼로그&#10;        if (showStopDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showStopDialog = false },&#10;                title = { Text(&quot;금주 중지&quot;, fontWeight = FontWeight.Bold) },&#10;                text = { Text(&quot;정말 금주를 중지하시겠습니까?\n모든 금주 기록이 초기화됩니다.&quot;) },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = {&#10;                            showStopDialog = false&#10;                            handleStopSobriety()&#10;                        },&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.error&#10;                        )&#10;                    ) {&#10;                        Text(&quot;확인&quot;)&#10;                    }&#10;                },&#10;                dismissButton = {&#10;                    Button(onClick = { showStopDialog = false }) {&#10;                        Text(&quot;취소&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    private fun handleMenuSelection(menuItem: String) {&#10;        when (menuItem) {&#10;            &quot;금주&quot; -&gt; {&#10;                // 현재 화면이므로 아무 작업 안함&#10;            }&#10;            &quot;활동 보기&quot; -&gt; {&#10;                val intent = Intent(this, RecordsActivity::class.java)&#10;                startActivity(intent)&#10;            }&#10;            &quot;설정&quot; -&gt; {&#10;                val intent = Intent(this, SettingsActivity::class.java)&#10;                startActivity(intent)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun handleStopSobriety() {&#10;        // 중단된 활동 기록 저장&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val endTime = System.currentTimeMillis()&#10;&#10;        // RecentActivityManager 초기화 및 중단된 활동 저장&#10;        RecentActivityManager.init(this@StatusActivity)&#10;        RecentActivityManager.saveStoppedActivity(startTime, endTime, Constants.currentTestMode)&#10;&#10;        // SharedPreferences 초기화&#10;        sharedPref.edit().clear().apply()&#10;&#10;        // 시작 화면으로 이동&#10;        val intent = Intent(this@StatusActivity, MainActivity::class.java)&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;        startActivity(intent)&#10;        finish()&#10;&#10;        // 토스트 메시지 표시&#10;        Toast.makeText(this@StatusActivity, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;    }&#10;&#10;    /**&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#10;     */&#10;    private fun updateUI() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        if (completionFlag) {&#10;            timePassed = targetDays&#10;            statusMessage = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;            progressValue = 1.0f&#10;            return&#10;        }&#10;&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따른 시간 계산&#10;        val currentTimePassed = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;        }&#10;&#10;        // 대형 숫자에 진행 중인 시간 표시&#10;        timePassed = currentTimePassed&#10;&#10;        // 진행률 계산&#10;        val targetSeconds = when {&#10;            Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;            Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;            else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;        }&#10;&#10;        val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;        progressValue = (progress.coerceIn(0, 100) / 100f)&#10;&#10;        // 타이머 표시 업데이트&#10;        updateTimeDisplay()&#10;&#10;        // 완료 조건 확인 - 초단위 테스트 모드에서는 초 단위로 비교&#10;        val isCompleted = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#10;            Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#10;            else -&gt; currentTimePassed &gt; targetDays&#10;        }&#10;&#10;        if (isCompleted) {&#10;            timePassed = targetDays&#10;            progressValue = 1.0f&#10;            handleGoalCompletion(targetDays)&#10;        } else {&#10;            // 남은 시간 계산 및 메시지 업데이트&#10;            val remainingTime = targetDays - currentTimePassed + 1&#10;            statusMessage = &quot;남은 시간: ${remainingTime}${Constants.TIME_UNIT_TEXT}&quot;&#10;        }&#10;    }&#10;&#10;    private fun handleGoalCompletion(targetDays: Int) {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val endTime = System.currentTimeMillis()&#10;&#10;        sharedPref.edit().putBoolean(&quot;timer_completed&quot;, true).apply()&#10;&#10;        if (!goalAchievementChecked) {&#10;            goalAchievementChecked = true&#10;            // 타이머 즉시 중지&#10;            stopTimer()&#10;&#10;            // RecentActivityManager 초기화&#10;            RecentActivityManager.init(this)&#10;&#10;            // 완료된 활동을 RecentActivityManager에 저장&#10;            RecentActivityManager.saveCompletedActivity(&#10;                startTime,&#10;                endTime,&#10;                targetDays,&#10;                Constants.currentTestMode&#10;            )&#10;&#10;            // 완료된 기록을 먼저 저장&#10;            val recordId = saveCompletedRecord(startTime, endTime, targetDays, 1)&#10;&#10;            // 결과 화면 전환 지연 후 기록 요약 화면으로 이동&#10;            Handler(Looper.getMainLooper()).postDelayed({&#10;                // 기록 요약 화면으로 이동 (기록 ID 전달)&#10;                navigateToRecordSummary(recordId)&#10;            }, Constants.RESULT_SCREEN_DELAY.toLong())&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 완료된 금주 기록을 저장합니다&#10;     * @return 저장된 기록의 ID&#10;     */&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#10;        Log.d(&quot;StatusActivity&quot;, &quot;saveCompletedRecord 시작: startTime=$startTime, endTime=$endTime, targetDays=$targetDays&quot;)&#10;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 ID 생성&#10;        val recordId = System.currentTimeMillis()&#10;        Log.d(&quot;StatusActivity&quot;, &quot;생성된 recordId: $recordId&quot;)&#10;&#10;        // 테스트 모드일 때는 실제 경과 시간 대신 설정한 목표 시간을 그대로 사용&#10;        val achievedDays = if (Constants.isSecondTestMode || Constants.isMinuteTestMode) {&#10;            // 테스트 모드에서는 설정한 목표 시간 그대로 표시&#10;            targetDays&#10;        } else {&#10;            // 실제 모드에서만 실제 경과 시간 계산&#10;            ((endTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;        }&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;테스트 모드: ${Constants.isSecondTestMode}, 설정된 일수: $targetDays, 기록될 일수: $achievedDays&quot;)&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedDays = achievedDays, // 목표 시간을 그대로 사용&#10;            achievedLevel = level,&#10;            levelTitle = if (level &gt; 0 &amp;&amp; level &lt;= levelTitles.size) levelTitles[level - 1] else &quot;기본 레벨&quot;,&#10;            isCompleted = true&#10;        )&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;생성된 기록: $record&quot;)&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;기존 기록 JSON: $recordsJson&quot;)&#10;&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;        Log.d(&quot;StatusActivity&quot;, &quot;기존 기록 개수: ${records.size}&quot;)&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;새 기록 추가 후 총 개수: ${records.size}&quot;)&#10;&#10;        // 기록 저장&#10;        val newRecordsJson = SobrietyRecord.toJsonArray(records)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;저장할 JSON: $newRecordsJson&quot;)&#10;&#10;        sharedPref.edit().putString(&quot;records&quot;, newRecordsJson).commit()&#10;&#10;        // 저장 확인&#10;        val savedRecordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;저장 확인 JSON: $savedRecordsJson&quot;)&#10;&#10;        // 현재 진행중인 금주 데이터 초기화&#10;        getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit().clear().apply()&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;saveCompletedRecord 완료, 반환 ID: $recordId&quot;)&#10;        return recordId&#10;    }&#10;&#10;    private fun saveActivity(isCompleted: Boolean) {&#10;        try {&#10;            val activity = RecentActivity(&#10;                startDate = abstainStartTime,&#10;                endDate = getCurrentDate(),&#10;                duration = calculateDuration(),&#10;                isSuccess = isCompleted&#10;            )&#10;            RecordManager.addActivity(activity)&#10;        } catch (e: Exception) {&#10;            // 날짜 파싱 오류 등이 발생하면 로그만 남기고 기본값 사용&#10;            Log.e(&quot;StatusActivity&quot;, &quot;Error saving activity: ${e.message}&quot;, e)&#10;            try {&#10;                val activity = RecentActivity(&#10;                    startDate = getCurrentDate(),&#10;                    endDate = getCurrentDate(),&#10;                    duration = 1,&#10;                    isSuccess = isCompleted&#10;                )&#10;                RecordManager.addActivity(activity)&#10;            } catch (fallbackError: Exception) {&#10;                Log.e(&quot;StatusActivity&quot;, &quot;Fallback save also failed: ${fallbackError.message}&quot;, fallbackError)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun getCurrentDate(): String {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        return dateFormat.format(Date())&#10;    }&#10;&#10;    private fun calculateDuration(): Int {&#10;        return try {&#10;            if (abstainStartTime.isBlank()) {&#10;                // abstainStartTime이 비어있으면 SharedPreferences에서 시작 시간을 가져와서 계산&#10;                val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                val startTimeMillis = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;                val currentTime = System.currentTimeMillis()&#10;                val daysPassed = ((currentTime - startTimeMillis) / (1000 * 60 * 60 * 24)).toInt()&#10;                return daysPassed + 1&#10;            }&#10;&#10;            val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;            val startDate = dateFormat.parse(abstainStartTime)&#10;            val currentDate = Date()&#10;&#10;            if (startDate != null) {&#10;                ((currentDate.time - startDate.time) / (1000 * 60 * 60 * 24)).toInt() + 1&#10;            } else {&#10;                1 // 기본값&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;StatusActivity&quot;, &quot;Error calculating duration: ${e.message}&quot;, e)&#10;            1 // 오류 발생 시 기본값 반환&#10;        }&#10;    }&#10;&#10;    private fun navigateToRecordSummary(recordId: Long) {&#10;        val intent = Intent(this, DetailActivity::class.java)&#10;        intent.putExtra(&quot;record_id&quot;, recordId)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun updateTimeModeDisplay() {&#10;        timeUnitText = when {&#10;            Constants.isSecondTestMode -&gt; &quot;초&quot;&#10;            Constants.isMinuteTestMode -&gt; &quot;분&quot;&#10;            else -&gt; &quot;일&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 진행 상태를 확인하고 필요한 경우 목표 완료 처리를 합니다.&#10;     * 타이머에서 주기적으로 호출됩니다.&#10;     */&#10;    private fun checkProgressStatus() {&#10;        try {&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;            val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;            val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;            if (completionFlag) {&#10;                return  // 이미 완료된 상태면 처리하지 않음&#10;            }&#10;&#10;            val currentTime = System.currentTimeMillis()&#10;            val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;            // 진행률 계산&#10;            val targetSeconds = when {&#10;                Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;                Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;                else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;            }&#10;&#10;            // 진행률이 100을 초과하지 않도록 제한&#10;            val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;            val safeProgress = progress.coerceIn(0, 100)&#10;&#10;            // UI 업데이트는 runOnUiThread 내에서 수행&#10;            runOnUiThread {&#10;                progressValue = safeProgress / 100f&#10;&#10;                // 완료 조건 확인&#10;                val isCompleted = when {&#10;                    Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#10;                    Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#10;                    else -&gt; secondsPassed &gt;= (targetDays * 24 * 60 * 60)&#10;                }&#10;&#10;                if (isCompleted &amp;&amp; !goalAchievementChecked) {&#10;                    timePassed = targetDays&#10;                    progressValue = 1.0f&#10;                    handleGoalCompletion(targetDays)&#10;                } else if (!isCompleted) {&#10;                    // 남은 시간 계산 및 메시지 업데이트&#10;                    val currentTimePassed = when {&#10;                        Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;                        Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;                        else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;                    }&#10;                    val remainingTime = targetDays - currentTimePassed + 1&#10;                    if (remainingTime &gt; 0) {&#10;                        statusMessage = &quot;남은 시간: ${remainingTime}${Constants.TIME_UNIT_TEXT}&quot;&#10;                    } else {&#10;                        statusMessage = &quot;목표 달성이 임박했습니다!&quot;&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            // 에러 발생 시 로그만 남기고 앱은 계속 실행&#10;            Log.e(&quot;StatusActivity&quot;, &quot;Error in checkProgressStatus: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 금주 시작 시간을 초기화합니다.&#10;     */&#10;    private fun initAbstainStartTime() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTimeMillis = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        abstainStartTime = dateFormat.format(Date(startTimeMillis))&#10;    }&#10;}&#10;&#10;// 프리뷰 코드&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun StatusScreenPreview() {&#10;    MaterialTheme {&#10;        StatusScreenContent(&#10;            timePassed = 15,&#10;            timeUnitText = &quot;일&quot;,&#10;            hoursDisplay = &quot;08시간&quot;,&#10;            timeDetail = &quot;08:23:45&quot;,&#10;            progressValue = 0.5f,&#10;            statusMessage = &quot;남은 시간: 15일&quot;,&#10;            onStopClick = {},&#10;            onMenuClick = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun DrawerMenuPreview() {&#10;    MaterialTheme {&#10;        ModalDrawerSheet(&#10;            modifier = Modifier.width(300.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxHeight()&#10;                    .padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;메뉴&quot;,&#10;                    fontSize = 24.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 24.dp)&#10;                )&#10;&#10;                DrawerMenuItemPreview(&#10;                    title = &quot;금주&quot;,&#10;                    icon = Icons.Default.Home,&#10;                    onClick = {}&#10;                )&#10;&#10;                DrawerMenuItemPreview(&#10;                    title = &quot;활동 보기&quot;,&#10;                    icon = Icons.Default.Menu,&#10;                    onClick = {}&#10;                )&#10;&#10;                DrawerMenuItemPreview(&#10;                    title = &quot;설정&quot;,&#10;                    icon = Icons.Default.Settings,&#10;                    onClick = {}&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DrawerMenuItemPreview(&#10;    title: String,&#10;    icon: ImageVector,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick() }&#10;            .padding(vertical = 12.dp, horizontal = 8.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = title,&#10;            modifier = Modifier.padding(end = 16.dp)&#10;        )&#10;        Text(&#10;            text = title,&#10;            fontSize = 18.sp&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun StatusScreenContent(&#10;    timePassed: Int,&#10;    timeUnitText: String,&#10;    hoursDisplay: String,&#10;    timeDetail: String,&#10;    progressValue: Float,&#10;    statusMessage: String,&#10;    onStopClick: () -&gt; Unit,&#10;    onMenuClick: () -&gt; Unit&#10;) {&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;금주 상태&quot;, fontSize = 20.sp) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onMenuClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Menu,&#10;                            contentDescription = &quot;메뉴 열기&quot;,&#10;                            tint = MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;금주 진행 상황&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 대형 숫자 표시&#10;            Text(&#10;                text = timePassed.toString(),&#10;                fontSize = 48.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            // 시간 단위 표시&#10;            Text(&#10;                text = timeUnitText,&#10;                fontSize = 18.sp,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 시간 표시&#10;            Text(&#10;                text = hoursDisplay,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            // 상세 시간 표시&#10;            Text(&#10;                text = timeDetail,&#10;                fontSize = 16.sp,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 진행률 표시&#10;            LinearProgressIndicator(&#10;                progress = { progressValue },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(8.dp)&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 상태 메시지&#10;            Text(&#10;                text = statusMessage,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;&#10;            // 중지 버튼&#10;            Button(&#10;                onClick = onStopClick,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Text(&quot;금주 중지&quot;, fontSize = 16.sp)&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.Menu&#10;import androidx.compose.material.icons.filled.Home&#10;import androidx.compose.material.icons.filled.Settings&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.core.content.ContextCompat&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.RecordManager&#10;import com.example.alcoholictimer.utils.RecentActivityManager&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.Timer&#10;import java.util.TimerTask&#10;import kotlinx.coroutines.launch&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.graphics.vector.ImageVector&#10;&#10;class StatusActivity : BaseActivity() {&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#10;    private var goalAchievementChecked = false&#10;&#10;    private val levelTitles = listOf(&#10;        &quot;새싹 도전자&quot;,&#10;        &quot;첫걸음 성공&quot;,&#10;        &quot;의지의 시작&quot;,&#10;        &quot;한달의 기적&quot;,&#10;        &quot;습관의 탄생&quot;,&#10;        &quot;의지의 달인&quot;,&#10;        &quot;금주의 마스터&quot;,&#10;        &quot;절제의 달인&quot;&#10;    )&#10;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#10;    private var timer: Timer? = null&#10;    private val handler = Handler(Looper.getMainLooper())&#10;&#10;    // 금주 시작 시간 저장 변수&#10;    private var abstainStartTime: String = &quot;&quot;&#10;&#10;    // Compose State 변수들&#10;    private var timePassed by mutableIntStateOf(0)&#10;    private var hoursDisplay by mutableStateOf(&quot;&quot;)&#10;    private var timeDetail by mutableStateOf(&quot;&quot;)&#10;    private var progressValue by mutableFloatStateOf(0f)&#10;    private var statusMessage by mutableStateOf(&quot;&quot;)&#10;    private var timeUnitText by mutableStateOf(&quot;일&quot;)&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 상태&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                StatusScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;&#10;        // SharedPreferences에서 현재 테스트 모드를 읽어와서 Constants 업데이트&#10;        val sharedPref = getSharedPreferences(Constants.PREFS_NAME, MODE_PRIVATE)&#10;        val currentTestMode = sharedPref.getInt(Constants.PREF_TEST_MODE, Constants.TEST_MODE_REAL)&#10;        Constants.updateTestMode(currentTestMode)&#10;&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;&#10;        // 금주 시작 시간 초기화 (abstainStartTime이 비어있는 경우를 대비)&#10;        initAbstainStartTime()&#10;&#10;        updateUI()&#10;        startTimer()&#10;&#10;        // 목표 달성 플래그 초기화&#10;        goalAchievementChecked = false&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // 화면이 보이지 않을 때 타이머 정지&#10;        stopTimer()&#10;    }&#10;&#10;    // Activity 클래스의 onNewIntent를 오버라이드&#10;    public override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        setIntent(intent)&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;        updateUI()  // UI 즉시 갱신&#10;    }&#10;&#10;    private fun startTimer() {&#10;        stopTimer()&#10;        timer = Timer()&#10;        timer?.schedule(object : TimerTask() {&#10;            override fun run() {&#10;                handler.post {&#10;                    updateTimeDisplay()&#10;                }&#10;            }&#10;        }, 0, 100)  // 100ms 간격으로 업데이트&#10;    }&#10;&#10;    private fun stopTimer() {&#10;        timer?.cancel()&#10;        timer = null&#10;    }&#10;&#10;    private fun updateTimeDisplay() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        // 목표가 이미 달성되었으면 타이머 업데이트를 중단&#10;        if (completionFlag) {&#10;            stopTimer()&#10;            return&#10;        }&#10;&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따른 시간 계산 - 대형 숫자 업데이트&#10;        timePassed = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;        }&#10;&#10;        // 시간 계산&#10;        val hours = (secondsPassed / 3600) % 24&#10;&#10;        // 시간 표시 업데이트 - Compose State 사용&#10;        hoursDisplay = String.format(Locale.getDefault(), &quot;%02d시간&quot;, hours)&#10;&#10;        // 테스트 모드별 시간 표시 업데이트&#10;        timeDetail = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(Locale.getDefault(), &quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(Locale.getDefault(), &quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(Locale.getDefault(), &quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;        }&#10;&#10;        // 진행 상태 확인 및 완료 처리&#10;        checkProgressStatus()&#10;    }&#10;&#10;    @OptIn(ExperimentalMaterial3Api::class)&#10;    @Composable&#10;    private fun StatusScreen() {&#10;        var showStopDialog by remember { mutableStateOf(false) }&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;금주 진행 상황&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 대형 숫자 표시&#10;            Text(&#10;                text = timePassed.toString(),&#10;                fontSize = 48.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            // 시간 단위 표시&#10;            Text(&#10;                text = timeUnitText,&#10;                fontSize = 18.sp,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 시간 표시&#10;            Text(&#10;                text = hoursDisplay,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            // 상세 시간 표시&#10;            Text(&#10;                text = timeDetail,&#10;                fontSize = 16.sp,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 진행률 표시&#10;            LinearProgressIndicator(&#10;                progress = { progressValue },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(8.dp)&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 상태 메시지&#10;            Text(&#10;                text = statusMessage,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;&#10;            // 중지 버튼&#10;            Button(&#10;                onClick = { showStopDialog = true },&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Text(&quot;금주 중지&quot;, fontSize = 16.sp)&#10;            }&#10;        }&#10;&#10;        // 중지 확인 다이얼로그&#10;        if (showStopDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showStopDialog = false },&#10;                title = { Text(&quot;금주 중지&quot;, fontWeight = FontWeight.Bold) },&#10;                text = { Text(&quot;정말 금주를 중지하시겠습니까?\n모든 금주 기록이 초기화됩니다.&quot;) },&#10;                confirmButton = {&#10;                    Button(&#10;                        onClick = {&#10;                            showStopDialog = false&#10;                            handleStopSobriety()&#10;                        },&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = MaterialTheme.colorScheme.error&#10;                        )&#10;                    ) {&#10;                        Text(&quot;확인&quot;)&#10;                    }&#10;                },&#10;                dismissButton = {&#10;                    Button(onClick = { showStopDialog = false }) {&#10;                        Text(&quot;취소&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;&#10;    private fun handleMenuSelection(menuItem: String) {&#10;        when (menuItem) {&#10;            &quot;금주&quot; -&gt; {&#10;                // 현재 화면이므로 아무 작업 안함&#10;            }&#10;            &quot;활동 보기&quot; -&gt; {&#10;                val intent = Intent(this, RecordsActivity::class.java)&#10;                startActivity(intent)&#10;            }&#10;            &quot;설정&quot; -&gt; {&#10;                val intent = Intent(this, TestActivity::class.java)&#10;                startActivity(intent)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun handleStopSobriety() {&#10;        // 중단된 활동 기록 저장&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val endTime = System.currentTimeMillis()&#10;&#10;        // RecentActivityManager 초기화 및 중단된 활동 저장&#10;        RecentActivityManager.init(this@StatusActivity)&#10;        RecentActivityManager.saveStoppedActivity(startTime, endTime, Constants.currentTestMode)&#10;&#10;        // SharedPreferences 초기화&#10;        sharedPref.edit().clear().apply()&#10;&#10;        // 시작 화면으로 이동&#10;        val intent = Intent(this@StatusActivity, MainActivity::class.java)&#10;        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;        startActivity(intent)&#10;        finish()&#10;&#10;        // 토스트 메시지 표시&#10;        Toast.makeText(this@StatusActivity, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;    }&#10;&#10;    /**&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#10;     */&#10;    private fun updateUI() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        if (completionFlag) {&#10;            timePassed = targetDays&#10;            statusMessage = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;            progressValue = 1.0f&#10;            return&#10;        }&#10;&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따른 시간 계산&#10;        val currentTimePassed = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;        }&#10;&#10;        // 대형 숫자에 진행 중인 시간 표시&#10;        timePassed = currentTimePassed&#10;&#10;        // 진행률 계산&#10;        val targetSeconds = when {&#10;            Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;            Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;            else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;        }&#10;&#10;        val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;        progressValue = (progress.coerceIn(0, 100) / 100f)&#10;&#10;        // 타이머 표시 업데이트&#10;        updateTimeDisplay()&#10;&#10;        // 완료 조건 확인 - 초단위 테스트 모드에서는 초 단위로 비교&#10;        val isCompleted = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#10;            Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#10;            else -&gt; currentTimePassed &gt; targetDays&#10;        }&#10;&#10;        if (isCompleted) {&#10;            timePassed = targetDays&#10;            progressValue = 1.0f&#10;            handleGoalCompletion(targetDays)&#10;        } else {&#10;            // 남은 시간 계산 및 메시지 업데이트&#10;            val remainingTime = targetDays - currentTimePassed + 1&#10;            statusMessage = &quot;남은 시간: ${remainingTime}${Constants.TIME_UNIT_TEXT}&quot;&#10;        }&#10;    }&#10;&#10;    private fun handleGoalCompletion(targetDays: Int) {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val endTime = System.currentTimeMillis()&#10;&#10;        sharedPref.edit().putBoolean(&quot;timer_completed&quot;, true).apply()&#10;&#10;        if (!goalAchievementChecked) {&#10;            goalAchievementChecked = true&#10;            // 타이머 즉시 중지&#10;            stopTimer()&#10;&#10;            // RecentActivityManager 초기화&#10;            RecentActivityManager.init(this)&#10;&#10;            // 완료된 활동을 RecentActivityManager에 저장&#10;            RecentActivityManager.saveCompletedActivity(&#10;                startTime,&#10;                endTime,&#10;                targetDays,&#10;                Constants.currentTestMode&#10;            )&#10;&#10;            // 완료된 기록을 먼저 저장&#10;            val recordId = saveCompletedRecord(startTime, endTime, targetDays, 1)&#10;&#10;            // 결과 화면 전환 지연 후 기록 요약 화면으로 이동&#10;            Handler(Looper.getMainLooper()).postDelayed({&#10;                // 기록 요약 화면으로 이동 (기록 ID 전달)&#10;                navigateToRecordSummary(recordId)&#10;            }, Constants.RESULT_SCREEN_DELAY.toLong())&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 완료된 금주 기록을 저장합니다&#10;     * @return 저장된 기록의 ID&#10;     */&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#10;        Log.d(&quot;StatusActivity&quot;, &quot;saveCompletedRecord 시작: startTime=$startTime, endTime=$endTime, targetDays=$targetDays&quot;)&#10;&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 ID 생성&#10;        val recordId = System.currentTimeMillis()&#10;        Log.d(&quot;StatusActivity&quot;, &quot;생성된 recordId: $recordId&quot;)&#10;&#10;        // 테스트 모드일 때는 실제 경과 시간 대신 설정한 목표 시간을 그대로 사용&#10;        val achievedDays = if (Constants.isSecondTestMode || Constants.isMinuteTestMode) {&#10;            // 테스트 모드에서는 설정한 목표 시간 그대로 표시&#10;            targetDays&#10;        } else {&#10;            // 실제 모드에서만 실제 경과 시간 계산&#10;            ((endTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;        }&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;테스트 모드: ${Constants.isSecondTestMode}, 설정된 일수: $targetDays, 기록될 일수: $achievedDays&quot;)&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedDays = achievedDays, // 목표 시간을 그대로 사용&#10;            achievedLevel = level,&#10;            levelTitle = if (level &gt; 0 &amp;&amp; level &lt;= levelTitles.size) levelTitles[level - 1] else &quot;기본 레벨&quot;,&#10;            isCompleted = true&#10;        )&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;생성된 기록: $record&quot;)&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;기존 기록 JSON: $recordsJson&quot;)&#10;&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;        Log.d(&quot;StatusActivity&quot;, &quot;기존 기록 개수: ${records.size}&quot;)&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;새 기록 추가 후 총 개수: ${records.size}&quot;)&#10;&#10;        // 기록 저장&#10;        val newRecordsJson = SobrietyRecord.toJsonArray(records)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;저장할 JSON: $newRecordsJson&quot;)&#10;&#10;        sharedPref.edit().putString(&quot;records&quot;, newRecordsJson).commit()&#10;&#10;        // 저장 확인&#10;        val savedRecordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        Log.d(&quot;StatusActivity&quot;, &quot;저장 확인 JSON: $savedRecordsJson&quot;)&#10;&#10;        // 현재 진행중인 금주 데이터 초기화&#10;        getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit().clear().apply()&#10;&#10;        Log.d(&quot;StatusActivity&quot;, &quot;saveCompletedRecord 완료, 반환 ID: $recordId&quot;)&#10;        return recordId&#10;    }&#10;&#10;    private fun saveActivity(isCompleted: Boolean) {&#10;        try {&#10;            val activity = RecentActivity(&#10;                startDate = abstainStartTime,&#10;                endDate = getCurrentDate(),&#10;                duration = calculateDuration(),&#10;                isSuccess = isCompleted&#10;            )&#10;            RecordManager.addActivity(activity)&#10;        } catch (e: Exception) {&#10;            // 날짜 파싱 오류 등이 발생하면 로그만 남기고 기본값 사용&#10;            Log.e(&quot;StatusActivity&quot;, &quot;Error saving activity: ${e.message}&quot;, e)&#10;            try {&#10;                val activity = RecentActivity(&#10;                    startDate = getCurrentDate(),&#10;                    endDate = getCurrentDate(),&#10;                    duration = 1,&#10;                    isSuccess = isCompleted&#10;                )&#10;                RecordManager.addActivity(activity)&#10;            } catch (fallbackError: Exception) {&#10;                Log.e(&quot;StatusActivity&quot;, &quot;Fallback save also failed: ${fallbackError.message}&quot;, fallbackError)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun getCurrentDate(): String {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        return dateFormat.format(Date())&#10;    }&#10;&#10;    private fun calculateDuration(): Int {&#10;        return try {&#10;            if (abstainStartTime.isBlank()) {&#10;                // abstainStartTime이 비어있으면 SharedPreferences에서 시작 시간을 가져와서 계산&#10;                val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                val startTimeMillis = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;                val currentTime = System.currentTimeMillis()&#10;                val daysPassed = ((currentTime - startTimeMillis) / (1000 * 60 * 60 * 24)).toInt()&#10;                return daysPassed + 1&#10;            }&#10;&#10;            val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;            val startDate = dateFormat.parse(abstainStartTime)&#10;            val currentDate = Date()&#10;&#10;            if (startDate != null) {&#10;                ((currentDate.time - startDate.time) / (1000 * 60 * 60 * 24)).toInt() + 1&#10;            } else {&#10;                1 // 기본값&#10;            }&#10;        } catch (e: Exception) {&#10;            Log.e(&quot;StatusActivity&quot;, &quot;Error calculating duration: ${e.message}&quot;, e)&#10;            1 // 오류 발생 시 기본값 반환&#10;        }&#10;    }&#10;&#10;    private fun navigateToRecordSummary(recordId: Long) {&#10;        val intent = Intent(this, DetailActivity::class.java)&#10;        intent.putExtra(&quot;record_id&quot;, recordId)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    private fun updateTimeModeDisplay() {&#10;        timeUnitText = when {&#10;            Constants.isSecondTestMode -&gt; &quot;초&quot;&#10;            Constants.isMinuteTestMode -&gt; &quot;분&quot;&#10;            else -&gt; &quot;일&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 진행 상태를 확인하고 필요한 경우 목표 완료 처리를 합니다.&#10;     * 타이머에서 주기적으로 호출됩니다.&#10;     */&#10;    private fun checkProgressStatus() {&#10;        try {&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;            val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;            val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;            if (completionFlag) {&#10;                return  // 이미 완료된 상태면 처리하지 않음&#10;            }&#10;&#10;            val currentTime = System.currentTimeMillis()&#10;            val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;            // 진행률 계산&#10;            val targetSeconds = when {&#10;                Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;                Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;                else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;            }&#10;&#10;            // 진행률이 100을 초과하지 않도록 제한&#10;            val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;            val safeProgress = progress.coerceIn(0, 100)&#10;&#10;            // UI 업데이트는 runOnUiThread 내에서 수행&#10;            runOnUiThread {&#10;                progressValue = safeProgress / 100f&#10;&#10;                // 완료 조건 확인&#10;                val isCompleted = when {&#10;                    Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#10;                    Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#10;                    else -&gt; secondsPassed &gt;= (targetDays * 24 * 60 * 60)&#10;                }&#10;&#10;                if (isCompleted &amp;&amp; !goalAchievementChecked) {&#10;                    timePassed = targetDays&#10;                    progressValue = 1.0f&#10;                    handleGoalCompletion(targetDays)&#10;                } else if (!isCompleted) {&#10;                    // 남은 시간 계산 및 메시지 업데이트&#10;                    val currentTimePassed = when {&#10;                        Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;                        Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;                        else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;                    }&#10;                    val remainingTime = targetDays - currentTimePassed + 1&#10;                    if (remainingTime &gt; 0) {&#10;                        statusMessage = &quot;남은 시간: ${remainingTime}${Constants.TIME_UNIT_TEXT}&quot;&#10;                    } else {&#10;                        statusMessage = &quot;목표 달성이 임박했습니다!&quot;&#10;                    }&#10;                }&#10;            }&#10;        } catch (e: Exception) {&#10;            // 에러 발생 시 로그만 남기고 앱은 계속 실행&#10;            Log.e(&quot;StatusActivity&quot;, &quot;Error in checkProgressStatus: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 금주 시작 시간을 초기화합니다.&#10;     */&#10;    private fun initAbstainStartTime() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTimeMillis = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        abstainStartTime = dateFormat.format(Date(startTimeMillis))&#10;    }&#10;}&#10;&#10;// 프리뷰 코드&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun StatusScreenPreview() {&#10;    MaterialTheme {&#10;        StatusScreenContent(&#10;            timePassed = 15,&#10;            timeUnitText = &quot;일&quot;,&#10;            hoursDisplay = &quot;08시간&quot;,&#10;            timeDetail = &quot;08:23:45&quot;,&#10;            progressValue = 0.5f,&#10;            statusMessage = &quot;남은 시간: 15일&quot;,&#10;            onStopClick = {},&#10;            onMenuClick = {}&#10;        )&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun DrawerMenuPreview() {&#10;    MaterialTheme {&#10;        ModalDrawerSheet(&#10;            modifier = Modifier.width(300.dp)&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxHeight()&#10;                    .padding(16.dp)&#10;            ) {&#10;                Text(&#10;                    text = &quot;메뉴&quot;,&#10;                    fontSize = 24.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    modifier = Modifier.padding(bottom = 24.dp)&#10;                )&#10;&#10;                DrawerMenuItemPreview(&#10;                    title = &quot;금주&quot;,&#10;                    icon = Icons.Default.Home,&#10;                    onClick = {}&#10;                )&#10;&#10;                DrawerMenuItemPreview(&#10;                    title = &quot;활동 보기&quot;,&#10;                    icon = Icons.Default.Menu,&#10;                    onClick = {}&#10;                )&#10;&#10;                DrawerMenuItemPreview(&#10;                    title = &quot;설정&quot;,&#10;                    icon = Icons.Default.Settings,&#10;                    onClick = {}&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun DrawerMenuItemPreview(&#10;    title: String,&#10;    icon: ImageVector,&#10;    onClick: () -&gt; Unit&#10;) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .clickable { onClick() }&#10;            .padding(vertical = 12.dp, horizontal = 8.dp),&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Icon(&#10;            imageVector = icon,&#10;            contentDescription = title,&#10;            modifier = Modifier.padding(end = 16.dp)&#10;        )&#10;        Text(&#10;            text = title,&#10;            fontSize = 18.sp&#10;        )&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun StatusScreenContent(&#10;    timePassed: Int,&#10;    timeUnitText: String,&#10;    hoursDisplay: String,&#10;    timeDetail: String,&#10;    progressValue: Float,&#10;    statusMessage: String,&#10;    onStopClick: () -&gt; Unit,&#10;    onMenuClick: () -&gt; Unit&#10;) {&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(&#10;                title = { Text(&quot;금주 상태&quot;, fontSize = 20.sp) },&#10;                navigationIcon = {&#10;                    IconButton(onClick = onMenuClick) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Menu,&#10;                            contentDescription = &quot;메뉴 열기&quot;,&#10;                            tint = MaterialTheme.colorScheme.onSurface&#10;                        )&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    ) { paddingValues -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(paddingValues)&#10;                .padding(24.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;금주 진행 상황&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 대형 숫자 표시&#10;            Text(&#10;                text = timePassed.toString(),&#10;                fontSize = 48.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = MaterialTheme.colorScheme.primary,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            // 시간 단위 표시&#10;            Text(&#10;                text = timeUnitText,&#10;                fontSize = 18.sp,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 시간 표시&#10;            Text(&#10;                text = hoursDisplay,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Medium,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;&#10;            // 상세 시간 표시&#10;            Text(&#10;                text = timeDetail,&#10;                fontSize = 16.sp,&#10;                color = MaterialTheme.colorScheme.onSurfaceVariant,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 진행률 표시&#10;            LinearProgressIndicator(&#10;                progress = { progressValue },&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(8.dp)&#10;                    .padding(bottom = 16.dp)&#10;            )&#10;&#10;            // 상태 메시지&#10;            Text(&#10;                text = statusMessage,&#10;                fontSize = 16.sp,&#10;                modifier = Modifier.padding(bottom = 24.dp)&#10;            )&#10;&#10;            // 중지 버튼&#10;            Button(&#10;                onClick = onStopClick,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = MaterialTheme.colorScheme.error&#10;                )&#10;            ) {&#10;                Text(&quot;금주 중지&quot;, fontSize = 16.sp)&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/TestActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/TestActivity.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.widget.Toast&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import com.example.alcoholictimer.utils.Constants&#10;&#10;class TestActivity : BaseActivity() {&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                SettingsScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;설정&quot;&#10;&#10;    @Composable&#10;    private fun SettingsScreen() {&#10;        val context = LocalContext.current&#10;        var selectedMode by remember { mutableStateOf(Constants.TEST_MODE_REAL) }&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;설정&quot;,&#10;                fontSize = 24.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            Text(&#10;                text = &quot;테스트 모드 선택&quot;,&#10;                fontSize = 18.sp,&#10;                modifier = Modifier.padding(bottom = 8.dp)&#10;            )&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_REAL,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_REAL }&#10;                )&#10;                Text(&quot;실제 모드&quot;)&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_MINUTE,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_MINUTE }&#10;                )&#10;                Text(&quot;분 모드&quot;)&#10;                RadioButton(&#10;                    selected = selectedMode == Constants.TEST_MODE_SECOND,&#10;                    onClick = { selectedMode = Constants.TEST_MODE_SECOND }&#10;                )&#10;                Text(&quot;초 모드&quot;)&#10;            }&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;            Button(onClick = {&#10;                saveSettings(selectedMode)&#10;                Toast.makeText(context, &quot;설정이 저장되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;            }) {&#10;                Text(&quot;저장&quot;, fontSize = 18.sp)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun saveSettings(selectedMode: Int) {&#10;        val preferences = getSharedPreferences(Constants.PREFS_NAME, Context.MODE_PRIVATE)&#10;        val editor = preferences.edit()&#10;        editor.putInt(Constants.PREF_KEY_TEST_MODE, selectedMode)&#10;        val success = editor.commit()&#10;        Log.d(&quot;TestActivity&quot;, &quot;Settings saved. Mode: $selectedMode, Success: $success&quot;)&#10;&#10;        // Constants 클래스의 동적 설정 업데이트&#10;        Constants.updateTestMode(selectedMode)&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewSettingsScreen() {&#10;        BaseScreen {&#10;            SettingsScreen()&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.model.RecentActivity&#10;&#10;class RecentActivityAdapter : RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;    private val activities = ArrayList&lt;RecentActivity&gt;()&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val ivActivityIcon: ImageView = itemView.findViewById(R.id.ivActivityIcon)&#10;        val tvEndDate: TextView = itemView.findViewById(R.id.tvEndDate)&#10;        val tvActivityTitle: TextView = itemView.findViewById(R.id.tvActivityTitle)&#10;        val tvDuration: TextView = itemView.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val tvSavedMoney: TextView = itemView.findViewById(R.id.tvSavedMoney)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        &#10;        holder.tvEndDate.text = activity.endDate&#10;        holder.tvActivityTitle.text = activity.title&#10;        holder.tvDuration.text = &quot;${activity.duration}일 ${activity.hours}시간&quot;&#10;        holder.tvStatus.text = if(activity.isSuccess) &quot;성공&quot; else &quot;실패&quot;&#10;        holder.tvSavedMoney.text = &quot;${activity.savedMoney}만원 절약&quot;&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;&#10;    fun updateActivities(newActivities: List&lt;RecentActivity&gt;) {&#10;        activities.clear()&#10;        activities.addAll(newActivities.take(5)) // 최대 5개까지만 표시&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>