<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    package=&quot;com.example.alcoholictimer&quot;&gt;&#10;&#10;    &lt;application&#10;        android:name=&quot;.AlcoholicApplication&quot;&#10;        android:allowBackup=&quot;true&quot;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MainActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:launchMode=&quot;singleTask&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StartActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:launchMode=&quot;singleTop&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StatusActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:launchMode=&quot;singleTop&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RecordsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.ChallengeActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.MessageActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.DetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.NotificationActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SettingsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:label=&quot;설정&quot;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot; /&gt;&#10;    &lt;/application&gt;&#10;&#10;&lt;/manifest&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    package=&quot;com.example.alcoholictimer&quot;&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:name=&quot;.AlcoholicApplication&quot;&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;&#13;&#10;        android:fullBackupContent=&quot;@xml/backup_rules&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MainActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:launchMode=&quot;singleTask&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StartActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:launchMode=&quot;singleTop&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StatusActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:launchMode=&quot;singleTop&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.RecordsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.ChallengeActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.MessageActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.LevelActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.DetailActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.NotificationActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot;/&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.SettingsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:label=&quot;설정&quot;&#13;&#10;            android:theme=&quot;@style/Theme.AlcoholicTimer&quot; /&gt;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.MenuItem&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.GravityCompat&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.SharedPreferencesManager&#10;import com.google.android.material.navigation.NavigationView&#10;import java.util.Date&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 최신 상태로 업데이트&#10;            updateNavigationDrawer()&#10;            drawerLayout.openDrawer(GravityCompat.START)&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener(this)&#10;&#10;        // 특정 화면에 필요한 컨텐츠 뷰 설정&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태와 헤더 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationDrawer() {&#10;        // 네비게이션 메뉴 상태 업데이트&#10;        updateNavigationMenuState()&#10;&#10;        // 네비게이션 헤더 정보 업데이트&#10;        updateNavigationHeader()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트를 '금주 상태'로 변경합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트 변경&#10;        val soberMenuItem = navigationView.menu.findItem(R.id.nav_sobriety)&#10;        soberMenuItem.isEnabled = true&#10;        if (hasStarted) {&#10;            soberMenuItem.title = &quot;금주 상태&quot;&#10;        } else {&#10;            soberMenuItem.title = &quot;금주&quot;&#10;        }&#10;&#10;        // 활동 보기 메뉴는 항상 활성화&#10;        val recordsMenuItem = navigationView.menu.findItem(R.id.nav_records)&#10;        recordsMenuItem.isEnabled = true&#10;    }&#10;&#10;    /**&#10;     * 네비게이션 헤더의 사용자 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationHeader() {&#10;        val headerView = navigationView.getHeaderView(0)&#10;        if (headerView != null) {&#10;            val tvUserNickname = headerView.findViewById&lt;TextView&gt;(R.id.tvUserNickname)&#10;            val tvUserLevelDays = headerView.findViewById&lt;TextView&gt;(R.id.tvUserLevelDays)&#10;&#10;            // 사용자 이름은 기본값으로 &quot;알중이&quot; 사용&#10;            tvUserNickname.text = &quot;알중이&quot;&#10;&#10;            // 금주 상태에 따른 레벨 및 일수 정보 업데이트&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            if (sharedPref.contains(&quot;start_time&quot;)) {&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, Date().time)&#10;                val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;                // 레벨 계산 (시간 단위에 따라 적절한 마일스톤 사용)&#10;                val adjustedMilestones = when {&#10;                    Constants.isSecondTestMode -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                    Constants.isMinuteTestMode -&gt; listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;                    else -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                }&#10;&#10;                var currentLevel = 1&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i + 1&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                tvUserLevelDays.text = &quot;Level $currentLevel · ${timePassed}${Constants.TIME_UNIT_TEXT} 금주 중&quot;&#10;            } else {&#10;                tvUserLevelDays.text = &quot;금주를 시작해보세요!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;&#10;    /**&#10;     * 액티비티가 새 인텐트로 재사용될 때 수행할 작업을 정의합니다.&#10;     * 자식 클래스에서 오버라이드할 수 있습니다.&#10;     */&#10;    open fun handleNewIntent(intent: Intent?) {&#10;        // 기본 구현은 아무 작업도 수행하지 않습니다&#10;    }&#10;&#10;    /**&#10;     * 효과 없이 액티비티 전환&#10;     */&#10;    protected fun navigateToActivity(activityClass: Class&lt;*&gt;) {&#10;        val intent = Intent(this, activityClass)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;&#10;    /**&#10;     * 액티비티 종료 시 효과 없이 전환&#10;     */&#10;    override fun finish() {&#10;        super.finish()&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;&#10;    override fun onNavigationItemSelected(item: MenuItem): Boolean {&#10;        when (item.itemId) {&#10;            R.id.nav_sobriety -&gt; {&#10;                // 금주 상태에 따라 다른 화면으로 이동&#10;                val sharedPrefs = SharedPreferencesManager.getInstance(this)&#10;                val isAbstaining = sharedPrefs.getBoolean(&quot;isAbstaining&quot;, false)&#10;&#10;                if (isAbstaining) {&#10;                    // 금주 중이면 상태 화면으로&#10;                    if (this !is StatusActivity) {&#10;                        navigateToActivity(StatusActivity::class.java)&#10;                    }&#10;                } else {&#10;                    // 금주 중이 아니면 시작 화면으로&#10;                    if (this !is StartActivity) {&#10;                        navigateToActivity(StartActivity::class.java)&#10;                    }&#10;                }&#10;            }&#10;            R.id.nav_levels -&gt; {&#10;                if (this::class != LevelActivity::class) {&#10;                    val intent = Intent(this, LevelActivity::class.java)&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                }&#10;            }&#10;            R.id.nav_records -&gt; {&#10;                if (this !is RecordsActivity) {&#10;                    navigateToActivity(RecordsActivity::class.java)&#10;                }&#10;            }&#10;            R.id.nav_challenges -&gt; {&#10;                if (this !is ChallengeActivity) {&#10;                    navigateToActivity(ChallengeActivity::class.java)&#10;                }&#10;            }&#10;            R.id.nav_messages -&gt; {&#10;                if (this !is MessageActivity) {&#10;                    navigateToActivity(MessageActivity::class.java)&#10;                }&#10;            }&#10;            R.id.nav_notifications -&gt; {&#10;                if (this !is NotificationActivity) {&#10;                    navigateToActivity(NotificationActivity::class.java)&#10;                }&#10;            }&#10;            R.id.nav_settings -&gt; {&#10;                if (this !is SettingsActivity) {&#10;                    navigateToActivity(SettingsActivity::class.java)&#10;                }&#10;            }&#10;        }&#10;        drawerLayout.closeDrawer(GravityCompat.START)&#10;        return true&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.MenuItem&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.GravityCompat&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.SharedPreferencesManager&#10;import com.google.android.material.navigation.NavigationView&#10;import java.util.Date&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity(), NavigationView.OnNavigationItemSelectedListener {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 최신 상태로 업데이트&#10;            updateNavigationDrawer()&#10;            drawerLayout.openDrawer(GravityCompat.START)&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener(this)&#10;&#10;        // 특정 화면에 필요한 컨텐츠 뷰 설정&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태와 헤더 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationDrawer() {&#10;        // 네비게이션 메뉴 상태 업데이트&#10;        updateNavigationMenuState()&#10;&#10;        // 네비게이션 헤더 정보 업데이트&#10;        updateNavigationHeader()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트를 '금주 상태'로 변경합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주 메뉴는 항상 활성화하고, 금주 중인 경우 텍스트 변경&#10;        val soberMenuItem = navigationView.menu.findItem(R.id.nav_sobriety)&#10;        soberMenuItem.isEnabled = true&#10;        if (hasStarted) {&#10;            soberMenuItem.title = &quot;금주 상태&quot;&#10;        } else {&#10;            soberMenuItem.title = &quot;금주&quot;&#10;        }&#10;&#10;        // 활동 보기 메뉴는 항상 활성화&#10;        val recordsMenuItem = navigationView.menu.findItem(R.id.nav_records)&#10;        recordsMenuItem.isEnabled = true&#10;    }&#10;&#10;    /**&#10;     * 네비게이션 헤더의 사용자 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationHeader() {&#10;        val headerView = navigationView.getHeaderView(0)&#10;        if (headerView != null) {&#10;            val tvUserNickname = headerView.findViewById&lt;TextView&gt;(R.id.tvUserNickname)&#10;            val tvUserLevelDays = headerView.findViewById&lt;TextView&gt;(R.id.tvUserLevelDays)&#10;&#10;            // 사용자 이름은 기본값으로 &quot;알중이&quot; 사용&#10;            tvUserNickname.text = &quot;알중이&quot;&#10;&#10;            // 금주 상태에 따른 레벨 및 일수 정보 업데이트&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            if (sharedPref.contains(&quot;start_time&quot;)) {&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, Date().time)&#10;                val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;                // 레벨 계산 (시간 단위에 따라 적절한 마일스톤 사용)&#10;                val adjustedMilestones = when {&#10;                    Constants.isSecondTestMode -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                    Constants.isMinuteTestMode -&gt; listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;                    else -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                }&#10;&#10;                var currentLevel = 1&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i + 1&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                tvUserLevelDays.text = &quot;Level $currentLevel · ${timePassed}${Constants.TIME_UNIT_TEXT} 금주 중&quot;&#10;            } else {&#10;                tvUserLevelDays.text = &quot;금주를 시작해보세요!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;&#10;    /**&#10;     * 액티비티가 새 인텐트로 재사용될 때 수행할 작업을 정의합니다.&#10;     * 자식 클래스에서 오버라이드할 수 있습니다.&#10;     */&#10;    open fun handleNewIntent(intent: Intent?) {&#10;        // 기본 구현은 아무 작업도 수행하지 않습니다&#10;    }&#10;&#10;    /**&#10;     * 효과 없이 액티비티 전환&#10;     */&#10;    protected fun navigateToActivity(activityClass: Class&lt;*&gt;) {&#10;        val intent = Intent(this, activityClass)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;&#10;    /**&#10;     * 액티비티 종료 시 효과 없이 전환&#10;     */&#10;    override fun finish() {&#10;        super.finish()&#10;        overridePendingTransition(0, 0) // 전환 효과 제거&#10;    }&#10;&#10;    override fun onNavigationItemSelected(item: MenuItem): Boolean {&#10;        when (item.itemId) {&#10;            R.id.nav_sobriety -&gt; {&#10;                // 금주 상태에 따라 다른 화면으로 이동&#10;                val sharedPrefs = SharedPreferencesManager.getInstance(this)&#10;                val isAbstaining = sharedPrefs.getBoolean(&quot;isAbstaining&quot;, false)&#10;&#10;                if (isAbstaining) {&#10;                    // 금주 중이면 상태 화면으로&#10;                    if (this !is StatusActivity) {&#10;                        navigateToActivity(StatusActivity::class.java)&#10;                    }&#10;                } else {&#10;                    // 금주 중이 아니면 시작 화면으로&#10;                    if (this !is StartActivity) {&#10;                        navigateToActivity(StartActivity::class.java)&#10;                    }&#10;                }&#10;            }&#10;            R.id.nav_levels -&gt; {&#10;                if (this.javaClass.simpleName != &quot;LevelActivity&quot;) {&#10;                    val intent = Intent(this, Class.forName(&quot;com.example.alcoholictimer.LevelActivity&quot;))&#10;                    startActivity(intent)&#10;                    overridePendingTransition(0, 0)&#10;                }&#10;            }&#10;            R.id.nav_records -&gt; {&#10;                if (this !is RecordsActivity) {&#10;                    navigateToActivity(RecordsActivity::class.java)&#10;                }&#10;            }&#10;            R.id.nav_challenges -&gt; {&#10;                if (this !is ChallengeActivity) {&#10;                    navigateToActivity(ChallengeActivity::class.java)&#10;                }&#10;            }&#10;            R.id.nav_messages -&gt; {&#10;                if (this !is MessageActivity) {&#10;                    navigateToActivity(MessageActivity::class.java)&#10;                }&#10;            }&#10;            R.id.nav_notifications -&gt; {&#10;                if (this !is NotificationActivity) {&#10;                    navigateToActivity(NotificationActivity::class.java)&#10;                }&#10;            }&#10;            R.id.nav_settings -&gt; {&#10;                if (this !is SettingsActivity) {&#10;                    navigateToActivity(SettingsActivity::class.java)&#10;                }&#10;            }&#10;        }&#10;        drawerLayout.closeDrawer(GravityCompat.START)&#10;        return true&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/DrinkLevel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/DrinkLevel.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import androidx.annotation.ColorRes&#10;&#10;enum class DrinkLevel(&#10;    val levelName: String,&#10;    val startDays: Int,&#10;    val endDays: Int,&#10;    @ColorRes val colorRes: Int,&#10;    val description: String&#10;) {&#10;    RESOLUTION_7_DAYS(&#10;        &quot;작심 7일&quot;,&#10;        0,&#10;        6,&#10;        android.R.color.darker_gray,&#10;        &quot;첫 걸음을 시작했습니다&quot;&#10;    ),&#10;    WILL_2_WEEKS(&#10;        &quot;의지의 2주&quot;,&#10;        7,&#10;        13,&#10;        android.R.color.holo_orange_light,&#10;        &quot;의지가 단단해지고 있습니다&quot;&#10;    ),&#10;    MONTH_MIRACLE(&#10;        &quot;한달의 기적&quot;,&#10;        14,&#10;        29,&#10;        android.R.color.holo_orange_dark,&#10;        &quot;한 달의 기적을 만들어가고 있습니다&quot;&#10;    ),&#10;    HABIT_BIRTH(&#10;        &quot;습관의 탄생&quot;,&#10;        30,&#10;        59,&#10;        android.R.color.holo_green_light,&#10;        &quot;새로운 습관이 자리잡고 있습니다&quot;&#10;    ),&#10;    CONTINUING_CHALLENGE(&#10;        &quot;계속되는 도전&quot;,&#10;        60,&#10;        119,&#10;        android.R.color.holo_blue_light,&#10;        &quot;꾸준한 도전이 계속되고 있습니다&quot;&#10;    ),&#10;    ALMOST_1_YEAR(&#10;        &quot;거의 1년&quot;,&#10;        120,&#10;        239,&#10;        android.R.color.holo_purple,&#10;        &quot;1년에 가까워지고 있습니다&quot;&#10;    ),&#10;    ABSTAIN_MASTER(&#10;        &quot;금주 마스터&quot;,&#10;        240,&#10;        364,&#10;        android.R.color.black,&#10;        &quot;금주의 마스터가 되었습니다&quot;&#10;    ),&#10;    LEGEND_OF_RESTRAINT(&#10;        &quot;절제의 레전드&quot;,&#10;        365,&#10;        Int.MAX_VALUE,&#10;        android.R.color.holo_orange_light, // 골드 대신 사용&#10;        &quot;전설적인 절제력을 보여주고 있습니다&quot;&#10;    );&#10;&#10;    override val name: String = levelName&#10;&#10;    fun getDayRange(): String {&#10;        return if (endDays == Int.MAX_VALUE) {&#10;            &quot;${startDays}일 이상&quot;&#10;        } else {&#10;            &quot;${startDays}~${endDays}일&quot;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import androidx.annotation.ColorRes&#10;&#10;enum class DrinkLevel(&#10;    val levelName: String,&#10;    val startDays: Int,&#10;    val endDays: Int,&#10;    @ColorRes val colorRes: Int,&#10;    val description: String&#10;) {&#10;    RESOLUTION_7_DAYS(&#10;        &quot;작심 7일&quot;,&#10;        0,&#10;        6,&#10;        android.R.color.darker_gray,&#10;        &quot;첫 걸음을 시작했습니다&quot;&#10;    ),&#10;    WILL_2_WEEKS(&#10;        &quot;의지의 2주&quot;,&#10;        7,&#10;        13,&#10;        android.R.color.holo_orange_light,&#10;        &quot;의지가 단단해지고 있습니다&quot;&#10;    ),&#10;    MONTH_MIRACLE(&#10;        &quot;한달의 기적&quot;,&#10;        14,&#10;        29,&#10;        android.R.color.holo_orange_dark,&#10;        &quot;한 달의 기적을 만들어가고 있습니다&quot;&#10;    ),&#10;    HABIT_BIRTH(&#10;        &quot;습관의 탄생&quot;,&#10;        30,&#10;        59,&#10;        android.R.color.holo_green_light,&#10;        &quot;새로운 습관이 자리잡고 있습니다&quot;&#10;    ),&#10;    CONTINUING_CHALLENGE(&#10;        &quot;계속되는 도전&quot;,&#10;        60,&#10;        119,&#10;        android.R.color.holo_blue_light,&#10;        &quot;꾸준한 도전이 계속되고 있습니다&quot;&#10;    ),&#10;    ALMOST_1_YEAR(&#10;        &quot;거의 1년&quot;,&#10;        120,&#10;        239,&#10;        android.R.color.holo_purple,&#10;        &quot;1년에 가까워지고 있습니다&quot;&#10;    ),&#10;    ABSTAIN_MASTER(&#10;        &quot;금주 마스터&quot;,&#10;        240,&#10;        364,&#10;        android.R.color.black,&#10;        &quot;금주의 마스터가 되었습니다&quot;&#10;    ),&#10;    LEGEND_OF_RESTRAINT(&#10;        &quot;절제의 레전드&quot;,&#10;        365,&#10;        Int.MAX_VALUE,&#10;        android.R.color.holo_orange_light, // 골드 대신 사용&#10;        &quot;전설적인 절제력을 보여주고 있습니다&quot;&#10;    );&#10;&#10;    val levelDisplayName: String = levelName&#10;&#10;    fun getDayRange(): String {&#10;        return if (endDays == Int.MAX_VALUE) {&#10;            &quot;${startDays}일 이상&quot;&#10;        } else {&#10;            &quot;${startDays}~${endDays}일&quot;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/LevelActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/LevelActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import android.view.ViewGroup&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.utils.SharedPreferencesManager&#10;&#10;class LevelActivity : BaseActivity() {&#10;&#10;    private lateinit var tvCurrentLevel: TextView&#10;    private lateinit var tvNextLevelDays: TextView&#10;    private lateinit var progressBarLevel: ProgressBar&#10;    private lateinit var recyclerViewLevels: RecyclerView&#10;    private lateinit var levelAdapter: LevelAdapter&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setupContentView()&#10;        initViews()&#10;        setupLevelData()&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // BaseActivity의 layout_base를 사용하고, contentFrame에 레벨 화면을 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        layoutInflater.inflate(R.layout.activity_level, contentFrame, true)&#10;    }&#10;&#10;    private fun initViews() {&#10;        tvCurrentLevel = findViewById(R.id.tvCurrentLevel)&#10;        tvNextLevelDays = findViewById(R.id.tvNextLevelDays)&#10;        progressBarLevel = findViewById(R.id.progressBarLevel)&#10;        recyclerViewLevels = findViewById(R.id.recyclerViewLevels)&#10;&#10;        recyclerViewLevels.layoutManager = LinearLayoutManager(this)&#10;        levelAdapter = LevelAdapter()&#10;        recyclerViewLevels.adapter = levelAdapter&#10;    }&#10;&#10;    private fun setupLevelData() {&#10;        val currentDays = getCurrentAbstainDays()&#10;        val currentLevel = getLevelFromDays(currentDays)&#10;        val nextLevel = getNextLevel(currentLevel)&#10;&#10;        // 현재 레벨 표시&#10;        tvCurrentLevel.text = currentLevel.name&#10;&#10;        // 다음 레벨까지 남은 일수 계산&#10;        val daysToNext = if (nextLevel != null) {&#10;            nextLevel.minDays - currentDays&#10;        } else {&#10;            0&#10;        }&#10;&#10;        tvNextLevelDays.text = if (daysToNext &gt; 0) {&#10;            &quot;다음 레벨까지 ${daysToNext}일 남음&quot;&#10;        } else {&#10;            &quot;최고 레벨 달성!&quot;&#10;        }&#10;&#10;        // 프로그레스 바 설정&#10;        val progress = if (nextLevel != null) {&#10;            val levelRange = nextLevel.minDays - currentLevel.minDays&#10;            val currentProgress = currentDays - currentLevel.minDays&#10;            if (levelRange &gt; 0) {&#10;                ((currentProgress.toFloat() / levelRange.toFloat()) * 100).toInt()&#10;            } else {&#10;                100&#10;            }&#10;        } else {&#10;            100&#10;        }&#10;        progressBarLevel.progress = progress&#10;&#10;        // 레벨 리스트 설정&#10;        val allLevels = getAllLevels()&#10;        levelAdapter.updateLevels(allLevels, currentDays)&#10;    }&#10;&#10;    private fun getCurrentAbstainDays(): Int {&#10;        val sharedPrefs = SharedPreferencesManager.getInstance(this)&#10;        if (!sharedPrefs.getBoolean(&quot;isAbstaining&quot;, false)) {&#10;            return 0&#10;        }&#10;&#10;        val startTime = sharedPrefs.getLong(&quot;abstainStartTime&quot;, 0L)&#10;        if (startTime == 0L) return 0&#10;&#10;        val currentTime = System.currentTimeMillis()&#10;        val diffInMillis = currentTime - startTime&#10;        return (diffInMillis / (1000 * 60 * 60 * 24)).toInt()&#10;    }&#10;&#10;    private fun getLevelFromDays(days: Int): Level {&#10;        val levels = getAllLevels()&#10;        return levels.findLast { days &gt;= it.minDays } ?: levels.first()&#10;    }&#10;&#10;    private fun getNextLevel(currentLevel: Level): Level? {&#10;        val levels = getAllLevels()&#10;        val currentIndex = levels.indexOf(currentLevel)&#10;        return if (currentIndex &lt; levels.size - 1) {&#10;            levels[currentIndex + 1]&#10;        } else {&#10;            null&#10;        }&#10;    }&#10;&#10;    private fun getAllLevels(): List&lt;Level&gt; {&#10;        return listOf(&#10;            Level(&quot;작심 7일&quot;, 0, 6, &quot;#9E9E9E&quot;),&#10;            Level(&quot;의지의 2주&quot;, 7, 13, &quot;#FFEB3B&quot;),&#10;            Level(&quot;한달의 기적&quot;, 14, 29, &quot;#FF9800&quot;),&#10;            Level(&quot;습관의 탄생&quot;, 30, 59, &quot;#4CAF50&quot;),&#10;            Level(&quot;계속되는 도전&quot;, 60, 119, &quot;#2196F3&quot;),&#10;            Level(&quot;거의 1년&quot;, 120, 239, &quot;#9C27B0&quot;),&#10;            Level(&quot;금주 마스터&quot;, 240, 364, &quot;#424242&quot;),&#10;            Level(&quot;절제의 레전드&quot;, 365, Int.MAX_VALUE, &quot;#FFD700&quot;)&#10;        )&#10;    }&#10;}&#10;&#10;data class Level(&#10;    val name: String,&#10;    val minDays: Int,&#10;    val maxDays: Int,&#10;    val color: String&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.LinearLayout&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.utils.SharedPreferencesManager&#10;&#10;class LevelActivity : BaseActivity() {&#10;    &#10;    private lateinit var layoutCurrentLevel: LinearLayout&#10;    private lateinit var viewCurrentLevelBadge: View&#10;    private lateinit var tvCurrentLevel: TextView&#10;    private lateinit var tvNextLevelDays: TextView&#10;    private lateinit var progressBarLevel: ProgressBar&#10;    private lateinit var recyclerViewLevels: RecyclerView&#10;    private lateinit var levelAdapter: LevelAdapter&#10;    &#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setupContentView()&#10;        initViews()&#10;        setupLevelData()&#10;    }&#10;    &#10;    override fun setupContentView() {&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        layoutInflater.inflate(R.layout.activity_level, contentFrame, true)&#10;    }&#10;    &#10;    private fun initViews() {&#10;        layoutCurrentLevel = findViewById(R.id.layoutCurrentLevel)&#10;        viewCurrentLevelBadge = findViewById(R.id.viewCurrentLevelBadge)&#10;        tvCurrentLevel = findViewById(R.id.tvCurrentLevel)&#10;        tvNextLevelDays = findViewById(R.id.tvNextLevelDays)&#10;        progressBarLevel = findViewById(R.id.progressBarLevel)&#10;        recyclerViewLevels = findViewById(R.id.recyclerViewLevels)&#10;        &#10;        recyclerViewLevels.layoutManager = LinearLayoutManager(this)&#10;        levelAdapter = LevelAdapter()&#10;        recyclerViewLevels.adapter = levelAdapter&#10;    }&#10;    &#10;    private fun setupLevelData() {&#10;        val currentDays = getCurrentAbstainDays()&#10;        val currentLevel = getLevelFromDays(currentDays)&#10;        val nextLevel = getNextLevel(currentLevel)&#10;        &#10;        // 현재 레벨 카드 배경색 설정&#10;        layoutCurrentLevel.setBackgroundColor(android.graphics.Color.parseColor(currentLevel.color))&#10;        &#10;        // 현재 레벨 배지 색상 설정 (흰색으로 통일)&#10;        viewCurrentLevelBadge.setBackgroundColor(android.graphics.Color.WHITE)&#10;        &#10;        // 현재 레벨 표시&#10;        tvCurrentLevel.text = currentLevel.name&#10;        &#10;        // 프로그레스 바와 다음 레벨까지 남은 일수 계산&#10;        if (nextLevel != null) {&#10;            val levelRange = nextLevel.minDays - currentLevel.minDays&#10;            val currentProgressInLevel = currentDays - currentLevel.minDays&#10;            val daysToNext = nextLevel.minDays - currentDays&#10;            &#10;            // 현재 레벨 내에서의 진행도 계산&#10;            val progress = if (levelRange &gt; 0) {&#10;                ((currentProgressInLevel.toFloat() / levelRange.toFloat()) * 100).toInt().coerceIn(0, 100)&#10;            } else {&#10;                100&#10;            }&#10;            &#10;            progressBarLevel.progress = progress&#10;            tvNextLevelDays.text = &quot;다음 레벨까지 ${daysToNext}일 남음&quot;&#10;        } else {&#10;            // 최고 레벨 달성&#10;            progressBarLevel.progress = 100&#10;            tvNextLevelDays.text = &quot;최고 레벨 달성!&quot;&#10;        }&#10;        &#10;        // 레벨 리스트 설정&#10;        val allLevels = getAllLevels()&#10;        levelAdapter.updateLevels(allLevels, currentDays)&#10;    }&#10;    &#10;    private fun getCurrentAbstainDays(): Int {&#10;        val sharedPrefs = SharedPreferencesManager.getInstance(this)&#10;        if (!sharedPrefs.getBoolean(&quot;isAbstaining&quot;, false)) {&#10;            return 0&#10;        }&#10;        &#10;        val startTime = sharedPrefs.getLong(&quot;abstainStartTime&quot;, 0L)&#10;        if (startTime == 0L) return 0&#10;        &#10;        val currentTime = System.currentTimeMillis()&#10;        val diffInMillis = currentTime - startTime&#10;        return (diffInMillis / (1000 * 60 * 60 * 24)).toInt()&#10;    }&#10;    &#10;    private fun getLevelFromDays(days: Int): Level {&#10;        val levels = getAllLevels()&#10;        return levels.findLast { days &gt;= it.minDays } ?: levels.first()&#10;    }&#10;    &#10;    private fun getNextLevel(currentLevel: Level): Level? {&#10;        val levels = getAllLevels()&#10;        val currentIndex = levels.indexOf(currentLevel)&#10;        return if (currentIndex &lt; levels.size - 1) {&#10;            levels[currentIndex + 1]&#10;        } else {&#10;            null&#10;        }&#10;    }&#10;    &#10;    private fun getAllLevels(): List&lt;Level&gt; {&#10;        return listOf(&#10;            Level(&quot;작심 7일&quot;, 0, 6, &quot;#9E9E9E&quot;, &quot;그레이&quot;, &quot;첫 걸음을 시작했습니다&quot;),&#10;            Level(&quot;의지의 2주&quot;, 7, 13, &quot;#FFEB3B&quot;, &quot;옐로우&quot;, &quot;의지가 단단해지고 있습니다&quot;),&#10;            Level(&quot;한달의 기적&quot;, 14, 29, &quot;#FF9800&quot;, &quot;오렌지&quot;, &quot;한 달의 기적을 만들어가고 있습니다&quot;),&#10;            Level(&quot;습관의 탄생&quot;, 30, 59, &quot;#4CAF50&quot;, &quot;그린&quot;, &quot;새로운 습관이 자리잡고 있습니다&quot;),&#10;            Level(&quot;계속되는 도전&quot;, 60, 119, &quot;#2196F3&quot;, &quot;블루&quot;, &quot;꾸준한 도전이 계속되고 있습니다&quot;),&#10;            Level(&quot;거의 1년&quot;, 120, 239, &quot;#9C27B0&quot;, &quot;퍼플&quot;, &quot;1년에 가까워지고 있습니다&quot;),&#10;            Level(&quot;금주 마스터&quot;, 240, 364, &quot;#424242&quot;, &quot;블랙&quot;, &quot;금주의 마스터가 되었습니다&quot;),&#10;            Level(&quot;절제의 레전드&quot;, 365, Int.MAX_VALUE, &quot;#FFD700&quot;, &quot;골드&quot;, &quot;전설적인 절제력을 보여주고 있습니다&quot;)&#10;        )&#10;    }&#10;}&#10;&#10;data class Level(&#10;    val name: String,&#10;    val minDays: Int,&#10;    val maxDays: Int,&#10;    val color: String,&#10;    val colorName: String,&#10;    val description: String&#10;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/LevelAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/LevelAdapter.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.graphics.Color&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;&#10;class LevelAdapter : RecyclerView.Adapter&lt;LevelAdapter.LevelViewHolder&gt;() {&#10;&#10;    private var levelList = listOf&lt;Level&gt;()&#10;    private var currentDays = 0&#10;&#10;    fun updateLevels(levels: List&lt;Level&gt;, days: Int) {&#10;        levelList = levels&#10;        currentDays = days&#10;        notifyDataSetChanged()&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): LevelViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_level, parent, false)&#10;        return LevelViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: LevelViewHolder, position: Int) {&#10;        val level = levelList[position]&#10;        holder.bind(level, currentDays)&#10;    }&#10;&#10;    override fun getItemCount(): Int = levelList.size&#10;&#10;    class LevelViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        private val tvLevelName: TextView = itemView.findViewById(R.id.tvLevelName)&#10;        private val tvLevelRange: TextView = itemView.findViewById(R.id.tvLevelRange)&#10;        private val viewLevelIndicator: View = itemView.findViewById(R.id.viewLevelIndicator)&#10;&#10;        fun bind(level: Level, currentDays: Int) {&#10;            tvLevelName.text = level.name&#10;&#10;            val rangeText = if (level.maxDays == Int.MAX_VALUE) {&#10;                &quot;${level.minDays}일 이상&quot;&#10;            } else {&#10;                &quot;${level.minDays}~${level.maxDays}일&quot;&#10;            }&#10;            tvLevelRange.text = rangeText&#10;&#10;            // 현재 달성한 레벨인지 확인&#10;            val isAchieved = currentDays &gt;= level.minDays&#10;&#10;            if (isAchieved) {&#10;                // 달성한 레벨 - 색상 표시&#10;                tvLevelName.setTextColor(Color.parseColor(&quot;#333333&quot;))&#10;                tvLevelRange.setTextColor(Color.parseColor(&quot;#666666&quot;))&#10;                viewLevelIndicator.setBackgroundColor(Color.parseColor(level.color))&#10;                itemView.alpha = 1.0f&#10;            } else {&#10;                // 미달성 레벨 - 흐리게 표시&#10;                tvLevelName.setTextColor(Color.parseColor(&quot;#CCCCCC&quot;))&#10;                tvLevelRange.setTextColor(Color.parseColor(&quot;#CCCCCC&quot;))&#10;                viewLevelIndicator.setBackgroundColor(Color.parseColor(&quot;#E0E0E0&quot;))&#10;                itemView.alpha = 0.5f&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#13;&#10;&#13;&#10;import android.graphics.Color&#13;&#10;import android.view.LayoutInflater&#13;&#10;import android.view.View&#13;&#10;import android.view.ViewGroup&#13;&#10;import android.widget.TextView&#13;&#10;import androidx.recyclerview.widget.RecyclerView&#13;&#10;&#13;&#10;class LevelAdapter : RecyclerView.Adapter&lt;LevelAdapter.LevelViewHolder&gt;() {&#13;&#10;    &#13;&#10;    private var levelList = listOf&lt;Level&gt;()&#13;&#10;    private var currentDays = 0&#13;&#10;    &#13;&#10;    fun updateLevels(levels: List&lt;Level&gt;, days: Int) {&#13;&#10;        levelList = levels&#13;&#10;        currentDays = days&#13;&#10;        notifyDataSetChanged()&#13;&#10;    }&#13;&#10;    &#13;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): LevelViewHolder {&#13;&#10;        val view = LayoutInflater.from(parent.context)&#13;&#10;            .inflate(R.layout.item_level, parent, false)&#13;&#10;        return LevelViewHolder(view)&#13;&#10;    }&#13;&#10;    &#13;&#10;    override fun onBindViewHolder(holder: LevelViewHolder, position: Int) {&#13;&#10;        val level = levelList[position]&#13;&#10;        holder.bind(level, currentDays)&#13;&#10;    }&#13;&#10;    &#13;&#10;    override fun getItemCount(): Int = levelList.size&#13;&#10;    &#13;&#10;    class LevelViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#13;&#10;        private val viewLevelBadge: View = itemView.findViewById(R.id.viewLevelBadge)&#13;&#10;        private val tvLevelName: TextView = itemView.findViewById(R.id.tvLevelName)&#13;&#10;        private val tvLevelColor: TextView = itemView.findViewById(R.id.tvLevelColor)&#13;&#10;        private val tvLevelRange: TextView = itemView.findViewById(R.id.tvLevelRange)&#13;&#10;        private val tvLevelDescription: TextView = itemView.findViewById(R.id.tvLevelDescription)&#13;&#10;        private val tvCurrentIndicator: TextView = itemView.findViewById(R.id.tvCurrentIndicator)&#13;&#10;        &#13;&#10;        fun bind(level: Level, currentDays: Int) {&#13;&#10;            // 배지 색상 설정&#13;&#10;            viewLevelBadge.setBackgroundColor(Color.parseColor(level.color))&#13;&#10;            &#13;&#10;            // 레벨명 설정&#13;&#10;            tvLevelName.text = level.name&#13;&#10;            &#13;&#10;            // 색상명 설정&#13;&#10;            tvLevelColor.text = level.colorName&#13;&#10;            &#13;&#10;            // 레벨 범위 설정&#13;&#10;            val rangeText = if (level.maxDays == Int.MAX_VALUE) {&#13;&#10;                &quot;${level.minDays}일 이상&quot;&#13;&#10;            } else {&#13;&#10;                &quot;${level.minDays}~${level.maxDays}일&quot;&#13;&#10;            }&#13;&#10;            tvLevelRange.text = rangeText&#13;&#10;            &#13;&#10;            // 레벨 설명 설정&#13;&#10;            tvLevelDescription.text = level.description&#13;&#10;            &#13;&#10;            // 현재 달성한 레벨인지 확인&#13;&#10;            val isAchieved = currentDays &gt;= level.minDays&#13;&#10;            val isCurrentLevel = currentDays &gt;= level.minDays &amp;&amp; currentDays &lt;= level.maxDays&#13;&#10;            &#13;&#10;            // 현재 레벨 표시&#13;&#10;            if (isCurrentLevel) {&#13;&#10;                tvCurrentIndicator.visibility = View.VISIBLE&#13;&#10;                tvCurrentIndicator.setTextColor(Color.parseColor(level.color))&#13;&#10;            } else {&#13;&#10;                tvCurrentIndicator.visibility = View.GONE&#13;&#10;            }&#13;&#10;            &#13;&#10;            if (isAchieved) {&#13;&#10;                // 달성한 레벨 - 정상 색상 표시&#13;&#10;                tvLevelName.setTextColor(Color.parseColor(&quot;#333333&quot;))&#13;&#10;                tvLevelColor.setTextColor(Color.parseColor(&quot;#666666&quot;))&#13;&#10;                tvLevelRange.setTextColor(Color.parseColor(&quot;#666666&quot;))&#13;&#10;                tvLevelDescription.setTextColor(Color.parseColor(&quot;#999999&quot;))&#13;&#10;                itemView.alpha = 1.0f&#13;&#10;                &#13;&#10;                // 현재 레벨인 경우 강조&#13;&#10;                if (isCurrentLevel) {&#13;&#10;                    tvLevelName.setTextColor(Color.parseColor(level.color))&#13;&#10;                    tvLevelName.textSize = 17f&#13;&#10;                } else {&#13;&#10;                    tvLevelName.textSize = 16f&#13;&#10;                }&#13;&#10;            } else {&#13;&#10;                // 미달성 레벨 - 흐리게 표시&#13;&#10;                tvLevelName.setTextColor(Color.parseColor(&quot;#CCCCCC&quot;))&#13;&#10;                tvLevelColor.setTextColor(Color.parseColor(&quot;#CCCCCC&quot;))&#13;&#10;                tvLevelRange.setTextColor(Color.parseColor(&quot;#CCCCCC&quot;))&#13;&#10;                tvLevelDescription.setTextColor(Color.parseColor(&quot;#CCCCCC&quot;))&#13;&#10;                viewLevelBadge.setBackgroundColor(Color.parseColor(&quot;#E0E0E0&quot;))&#13;&#10;                itemView.alpha = 0.6f&#13;&#10;                tvLevelName.textSize = 16f&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/NotificationActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/NotificationActivity.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;&#10;class NotificationActivity : BaseActivity() {&#10;    &#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setupContentView()&#10;    }&#10;    &#10;    override fun setupContentView() {&#10;        setContentView(R.layout.activity_notification)&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java" />
              <option name="updatedContent" value="package com.example.alcoholictimer;&#10;&#10;import android.os.Bundle;&#10;import android.widget.TextView;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import java.util.Calendar;&#10;&#10;public class RecordSummaryActivity extends AppCompatActivity {&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_record_summary);&#10;&#10;        // ...existing code...&#10;&#10;        TextView tvRecordTitle = findViewById(R.id.tvRecordTitle);&#10;        // 예시: 현재 월을 기록 종료 시점의 월로 사용합니다.&#10;        int month = Calendar.getInstance().get(Calendar.MONTH) + 1;&#10;        tvRecordTitle.setText(String.format(&quot;%d월의 금주&quot;, month));&#10;&#10;        // ...existing code...&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java" />
              <option name="originalContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}&#10;" />
              <option name="updatedContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.model.RecentActivity&#10;&#10;class RecentActivityAdapter : RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;    private val activities = ArrayList&lt;RecentActivity&gt;()&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val ivActivityIcon: ImageView = itemView.findViewById(R.id.ivActivityIcon)&#10;        val tvEndDate: TextView = itemView.findViewById(R.id.tvEndDate)&#10;        val tvActivityTitle: TextView = itemView.findViewById(R.id.tvActivityTitle)&#10;        val tvDuration: TextView = itemView.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val tvSavedMoney: TextView = itemView.findViewById(R.id.tvSavedMoney)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        &#10;        holder.tvEndDate.text = activity.endDate&#10;        holder.tvActivityTitle.text = activity.title&#10;        holder.tvDuration.text = &quot;${activity.duration}일 ${activity.hours}시간&quot;&#10;        holder.tvStatus.text = if(activity.isSuccess) &quot;성공&quot; else &quot;실패&quot;&#10;        holder.tvSavedMoney.text = &quot;${activity.savedMoney}만원 절약&quot;&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;&#10;    fun updateActivities(newActivities: List&lt;RecentActivity&gt;) {&#10;        activities.clear()&#10;        activities.addAll(newActivities.take(5)) // 최대 5개까지만 표시&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/SharedPreferencesManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/SharedPreferencesManager.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;&#10;class SharedPreferencesManager private constructor(context: Context) {&#10;    &#10;    private val sharedPreferences: SharedPreferences = &#10;        context.getSharedPreferences(&quot;user_settings&quot;, Context.MODE_PRIVATE)&#10;    &#10;    companion object {&#10;        @Volatile&#10;        private var INSTANCE: SharedPreferencesManager? = null&#10;        &#10;        fun getInstance(context: Context): SharedPreferencesManager {&#10;            return INSTANCE ?: synchronized(this) {&#10;                INSTANCE ?: SharedPreferencesManager(context.applicationContext).also { INSTANCE = it }&#10;            }&#10;        }&#10;    }&#10;    &#10;    fun getBoolean(key: String, defaultValue: Boolean): Boolean {&#10;        return sharedPreferences.getBoolean(key, defaultValue)&#10;    }&#10;    &#10;    fun setBoolean(key: String, value: Boolean) {&#10;        sharedPreferences.edit().putBoolean(key, value).apply()&#10;    }&#10;    &#10;    fun getLong(key: String, defaultValue: Long): Long {&#10;        return sharedPreferences.getLong(key, defaultValue)&#10;    }&#10;    &#10;    fun setLong(key: String, value: Long) {&#10;        sharedPreferences.edit().putLong(key, value).apply()&#10;    }&#10;    &#10;    fun getString(key: String, defaultValue: String?): String? {&#10;        return sharedPreferences.getString(key, defaultValue)&#10;    }&#10;    &#10;    fun setString(key: String, value: String) {&#10;        sharedPreferences.edit().putString(key, value).apply()&#10;    }&#10;    &#10;    fun getInt(key: String, defaultValue: Int): Int {&#10;        return sharedPreferences.getInt(key, defaultValue)&#10;    }&#10;    &#10;    fun setInt(key: String, value: Int) {&#10;        sharedPreferences.edit().putInt(key, value).apply()&#10;    }&#10;    &#10;    fun contains(key: String): Boolean {&#10;        return sharedPreferences.contains(key)&#10;    }&#10;    &#10;    fun remove(key: String) {&#10;        sharedPreferences.edit().remove(key).apply()&#10;    }&#10;    &#10;    fun clear() {&#10;        sharedPreferences.edit().clear().apply()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_level.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_level.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;#FFFFFF&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- 현재 레벨 카드 --&gt;&#10;        &lt;LinearLayout&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:background=&quot;#F5F5F5&quot;&#10;            android:padding=&quot;20dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&gt;&#10;&#10;            &lt;!-- 현재 레벨명 --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvCurrentLevel&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;한달의 기적&quot;&#10;                android:textSize=&quot;24sp&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:textColor=&quot;#333333&quot;&#10;                android:gravity=&quot;center&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;            &lt;!-- 프로그레스 바 --&gt;&#10;            &lt;ProgressBar&#10;                android:id=&quot;@+id/progressBarLevel&quot;&#10;                style=&quot;?android:attr/progressBarStyleHorizontal&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;8dp&quot;&#10;                android:progress=&quot;65&quot;&#10;                android:progressTint=&quot;#333333&quot;&#10;                android:progressBackgroundTint=&quot;#E0E0E0&quot;&#10;                android:layout_marginBottom=&quot;8dp&quot; /&gt;&#10;&#10;            &lt;!-- 다음 레벨까지 남은 일수 --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvNextLevelDays&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;다음 레벨까지 6일 남음&quot;&#10;                android:textSize=&quot;14sp&quot;&#10;                android:textColor=&quot;#666666&quot;&#10;                android:gravity=&quot;center&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 구분선 --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;1dp&quot;&#10;            android:background=&quot;#E0E0E0&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;!-- 전체 레벨 리스트 제목 --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;레벨 시스템&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#333333&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;!-- 레벨 리스트 --&gt;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/recyclerViewLevels&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:nestedScrollingEnabled=&quot;false&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;#FFFFFF&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- 현재 레벨 카드 --&gt;&#10;        &lt;LinearLayout&#10;            android:id=&quot;@+id/layoutCurrentLevel&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:orientation=&quot;vertical&quot;&#10;            android:background=&quot;#FF9800&quot;&#10;            android:padding=&quot;24dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:elevation=&quot;4dp&quot;&gt;&#10;&#10;            &lt;!-- 현재 레벨 배지와 이름 --&gt;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;horizontal&quot;&#10;                android:gravity=&quot;center_vertical&quot;&#10;                android:layout_marginBottom=&quot;16dp&quot;&gt;&#10;&#10;                &lt;!-- 레벨 배지 --&gt;&#10;                &lt;View&#10;                    android:id=&quot;@+id/viewCurrentLevelBadge&quot;&#10;                    android:layout_width=&quot;24dp&quot;&#10;                    android:layout_height=&quot;24dp&quot;&#10;                    android:background=&quot;#FFFFFF&quot;&#10;                    android:layout_marginEnd=&quot;12dp&quot; /&gt;&#10;&#10;                &lt;!-- 현재 레벨명 --&gt;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvCurrentLevel&quot;&#10;                    android:layout_width=&quot;0dp&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_weight=&quot;1&quot;&#10;                    android:text=&quot;한달의 기적&quot;&#10;                    android:textSize=&quot;24sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;#FFFFFF&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;&#10;            &lt;!-- 프로그레스 바 --&gt;&#10;            &lt;ProgressBar&#10;                android:id=&quot;@+id/progressBarLevel&quot;&#10;                style=&quot;?android:attr/progressBarStyleHorizontal&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;8dp&quot;&#10;                android:progress=&quot;65&quot;&#10;                android:progressTint=&quot;#FFFFFF&quot;&#10;                android:progressBackgroundTint=&quot;#80FFFFFF&quot;&#10;                android:layout_marginBottom=&quot;12dp&quot; /&gt;&#10;&#10;            &lt;!-- 다음 레벨까지 남은 일수 --&gt;&#10;            &lt;TextView&#10;                android:id=&quot;@+id/tvNextLevelDays&quot;&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:text=&quot;다음 레벨까지 6일 남음&quot;&#10;                android:textSize=&quot;16sp&quot;&#10;                android:textColor=&quot;#FFFFFF&quot;&#10;                android:textStyle=&quot;bold&quot;&#10;                android:gravity=&quot;center&quot; /&gt;&#10;&#10;        &lt;/LinearLayout&gt;&#10;&#10;        &lt;!-- 구분선 --&gt;&#10;        &lt;View&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;1dp&quot;&#10;            android:background=&quot;#E0E0E0&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot; /&gt;&#10;&#10;        &lt;!-- 전체 레벨 리스트 제목 --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;금주 레벨 시스템&quot;&#10;            android:textSize=&quot;20sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#333333&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot; /&gt;&#10;&#10;        &lt;!-- 레벨 리스트 --&gt;&#10;        &lt;androidx.recyclerview.widget.RecyclerView&#10;            android:id=&quot;@+id/recyclerViewLevels&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:nestedScrollingEnabled=&quot;false&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_notification.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_notification.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:orientation=&quot;vertical&quot;&#10;    android:background=&quot;#FFFFFF&quot;&#10;    android:padding=&quot;16dp&quot;&gt;&#10;&#10;    &lt;!-- 상단 앱바 --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        android:gravity=&quot;center_vertical&quot;&#10;        android:paddingTop=&quot;40dp&quot;&#10;        android:paddingStart=&quot;16dp&quot;&#10;        android:paddingEnd=&quot;16dp&quot;&#10;        android:paddingBottom=&quot;16dp&quot;&gt;&#10;&#10;        &lt;!-- 햄버거 메뉴 버튼 --&gt;&#10;        &lt;ImageView&#10;            android:id=&quot;@+id/btnMenu&quot;&#10;            android:layout_width=&quot;24dp&quot;&#10;            android:layout_height=&quot;24dp&quot;&#10;            android:src=&quot;@drawable/ic_menu&quot;&#10;            android:background=&quot;?android:attr/selectableItemBackgroundBorderless&quot;&#10;            android:padding=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;!-- 제목 --&gt;&#10;        &lt;TextView&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_weight=&quot;1&quot;&#10;            android:text=&quot;알림함&quot;&#10;            android:textSize=&quot;18sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#333333&quot;&#10;            android:layout_marginStart=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- 구분선 --&gt;&#10;    &lt;View&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;1dp&quot;&#10;        android:background=&quot;#E0E0E0&quot; /&gt;&#10;&#10;    &lt;!-- 알림함 내용 --&gt;&#10;    &lt;TextView&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:text=&quot;알림함 화면&quot;&#10;        android:textSize=&quot;16sp&quot;&#10;        android:textColor=&quot;#333333&quot;&#10;        android:gravity=&quot;center&quot;&#10;        android:layout_marginTop=&quot;50dp&quot; /&gt;&#10;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/item_level.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/item_level.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:orientation=&quot;horizontal&quot;&#10;    android:padding=&quot;16dp&quot;&#10;    android:gravity=&quot;center_vertical&quot;&gt;&#10;&#10;    &lt;!-- 레벨 색상 인디케이터 --&gt;&#10;    &lt;View&#10;        android:id=&quot;@+id/viewLevelIndicator&quot;&#10;        android:layout_width=&quot;12dp&quot;&#10;        android:layout_height=&quot;12dp&quot;&#10;        android:background=&quot;#FF9800&quot;&#10;        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#10;&#10;    &lt;!-- 레벨 정보 --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;0dp&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:layout_weight=&quot;1&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- 레벨명 --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvLevelName&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;한달의 기적&quot;&#10;            android:textSize=&quot;16sp&quot;&#10;            android:textStyle=&quot;bold&quot;&#10;            android:textColor=&quot;#333333&quot;&#10;            android:layout_marginBottom=&quot;4dp&quot; /&gt;&#10;&#10;        &lt;!-- 레벨 범위 --&gt;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvLevelRange&quot;&#10;            android:layout_width=&quot;wrap_content&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:text=&quot;14~29일&quot;&#10;            android:textSize=&quot;14sp&quot;&#10;            android:textColor=&quot;#666666&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&#10;&lt;/LinearLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;wrap_content&quot;&#13;&#10;    android:orientation=&quot;horizontal&quot;&#13;&#10;    android:padding=&quot;16dp&quot;&#13;&#10;    android:gravity=&quot;center_vertical&quot;&gt;&#13;&#10;&#13;&#10;    &lt;!-- 레벨 배지 --&gt;&#13;&#10;    &lt;View&#13;&#10;        android:id=&quot;@+id/viewLevelBadge&quot;&#13;&#10;        android:layout_width=&quot;20dp&quot;&#13;&#10;        android:layout_height=&quot;20dp&quot;&#13;&#10;        android:background=&quot;#FF9800&quot;&#13;&#10;        android:layout_marginEnd=&quot;16dp&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- 레벨 정보 --&gt;&#13;&#10;    &lt;LinearLayout&#13;&#10;        android:layout_width=&quot;0dp&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_weight=&quot;1&quot;&#13;&#10;        android:orientation=&quot;vertical&quot;&gt;&#13;&#10;&#13;&#10;        &lt;!-- 레벨명과 색상 --&gt;&#13;&#10;        &lt;LinearLayout&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:orientation=&quot;horizontal&quot;&#13;&#10;            android:gravity=&quot;center_vertical&quot;&#13;&#10;            android:layout_marginBottom=&quot;4dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/tvLevelName&quot;&#13;&#10;                android:layout_width=&quot;0dp&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:layout_weight=&quot;1&quot;&#13;&#10;                android:text=&quot;한달의 기적&quot;&#13;&#10;                android:textSize=&quot;16sp&quot;&#13;&#10;                android:textStyle=&quot;bold&quot;&#13;&#10;                android:textColor=&quot;#333333&quot; /&gt;&#13;&#10;&#13;&#10;            &lt;TextView&#13;&#10;                android:id=&quot;@+id/tvLevelColor&quot;&#13;&#10;                android:layout_width=&quot;wrap_content&quot;&#13;&#10;                android:layout_height=&quot;wrap_content&quot;&#13;&#10;                android:text=&quot;오렌지&quot;&#13;&#10;                android:textSize=&quot;12sp&quot;&#13;&#10;                android:textColor=&quot;#666666&quot;&#13;&#10;                android:layout_marginStart=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;        &lt;!-- 레벨 범위 --&gt;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/tvLevelRange&quot;&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:text=&quot;14~29일&quot;&#13;&#10;            android:textSize=&quot;14sp&quot;&#13;&#10;            android:textColor=&quot;#666666&quot;&#13;&#10;            android:layout_marginBottom=&quot;4dp&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- 레벨 설명 --&gt;&#13;&#10;        &lt;TextView&#13;&#10;            android:id=&quot;@+id/tvLevelDescription&quot;&#13;&#10;            android:layout_width=&quot;wrap_content&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:text=&quot;한 달의 기적을 만들어가고 있습니다&quot;&#13;&#10;            android:textSize=&quot;12sp&quot;&#13;&#10;            android:textColor=&quot;#999999&quot;&#13;&#10;            android:textStyle=&quot;italic&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;    &lt;!-- 현재 레벨 표시 --&gt;&#13;&#10;    &lt;TextView&#13;&#10;        android:id=&quot;@+id/tvCurrentIndicator&quot;&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:text=&quot;← 현재&quot;&#13;&#10;        android:textSize=&quot;12sp&quot;&#13;&#10;        android:textColor=&quot;#FF9800&quot;&#13;&#10;        android:textStyle=&quot;bold&quot;&#13;&#10;        android:visibility=&quot;gone&quot;&#13;&#10;        android:layout_marginStart=&quot;8dp&quot; /&gt;&#13;&#10;&#13;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>