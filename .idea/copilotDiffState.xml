<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * 금주 완료 후 결과 요약을 보여주는 액티비티&#10; */&#10;class RecordSummaryActivity : BaseActivity() {&#10;&#10;    private var record: SobrietyRecord? = null&#10;    private val TAG = &quot;RecordSummaryActivity&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        Log.d(TAG, &quot;onCreate: 기록화면 시작&quot;)&#10;&#10;        // 이전 화면에서 전달받은 기록 ID 가져오기&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1L)&#10;        Log.d(TAG, &quot;onCreate: recordId=$recordId&quot;)&#10;&#10;        if (recordId == -1L) {&#10;            // ID가 없으면 메인 화면으로 이동&#10;            Toast.makeText(this, &quot;기록 정보를 찾을 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Record ID not found in intent&quot;)&#10;            finish()&#10;            return&#10;        }&#10;&#10;        // 해당 ID의 기록 데이터 불러오기&#10;        record = loadRecord(recordId)&#10;&#10;        if (record == null) {&#10;            Toast.makeText(this, &quot;해당 기록을 불러올 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Failed to load record with id: $recordId&quot;)&#10;        } else {&#10;            Log.d(TAG, &quot;Record loaded: ${record?.startDate} to ${record?.endDate}, completed=${record?.isCompleted}&quot;)&#10;        }&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        Log.d(TAG, &quot;setupContentView: 시작&quot;)&#10;&#10;        try {&#10;            // BaseActivity에서 상속받은 contentFrame에 레이아웃 추가&#10;            val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;            if (contentFrame == null) {&#10;                Log.e(TAG, &quot;contentFrame not found&quot;)&#10;                return&#10;            }&#10;&#10;            val view = LayoutInflater.from(this).inflate(R.layout.activity_record_summary, contentFrame, true)&#10;            Log.d(TAG, &quot;Layout inflated successfully&quot;)&#10;&#10;            // UI 요소 초기화&#10;            val tvRecordScreenTitle = view.findViewById&lt;TextView&gt;(R.id.tvRecordScreenTitle)&#10;            val tvSummaryTitle = view.findViewById&lt;TextView&gt;(R.id.tvSummaryTitle)&#10;            val tvPeriod = view.findViewById&lt;TextView&gt;(R.id.tvPeriod)&#10;            val btnNewChallenge = view.findViewById&lt;Button&gt;(R.id.btnNewChallenge)&#10;&#10;            if (tvRecordScreenTitle == null || tvSummaryTitle == null || tvPeriod == null || btnNewChallenge == null) {&#10;                Log.e(TAG, &quot;One or more UI elements not found in layout&quot;)&#10;                return&#10;            }&#10;&#10;            // 기본 타이틀은 항상 표시&#10;            tvRecordScreenTitle.text = &quot;기록화면&quot;&#10;&#10;            // 레코드가 있는 경우에만 데이터 표시&#10;            if (record != null) {&#10;                // 제목 설정&#10;                if (record!!.isCompleted) {&#10;                    tvSummaryTitle.text = &quot;목표 달성을 축하합니다!&quot;&#10;                } else {&#10;                    tvSummaryTitle.text = &quot;금주 기록 요약&quot;&#10;                }&#10;&#10;                // 날짜 포맷 설정&#10;                val dateFormat = SimpleDateFormat(&quot;yyyy년 MM월 dd일 HH:mm&quot;, Locale.getDefault())&#10;                val startDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.startDate) ?: Date())&#10;                val endDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.endDate) ?: Date())&#10;&#10;                // 기간 표시&#10;                tvPeriod.text = &quot;시작: $startDate\n종료: $endDate&quot;&#10;            } else {&#10;                // 레코드가 없는 경우 기본 텍스트 설정&#10;                tvSummaryTitle.text = &quot;금주 기록&quot;&#10;                tvPeriod.text = &quot;기록 정보 없음&quot;&#10;            }&#10;&#10;            // 새로운 도전 버튼 클릭 리스너 설정&#10;            btnNewChallenge.setOnClickListener {&#10;                // MainActivity로 이동&#10;                val intent = Intent(this, MainActivity::class.java)&#10;                intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP  // 스택의 MainActivity 위의 모든 액티비티 제거&#10;                startActivity(intent)&#10;                finish()&#10;            }&#10;&#10;            Log.d(TAG, &quot;setupContentView: 완료&quot;)&#10;&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error setting up content view: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * ID로 기록 불러오기&#10;     */&#10;    private fun loadRecord(recordId: Long): SobrietyRecord? {&#10;        try {&#10;            val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;            val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;            val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;&#10;            return records.find { it.id == recordId }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error loading record: ${e.message}&quot;, e)&#10;            return null&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#13;&#10;&#13;&#10;import android.content.Intent&#13;&#10;import android.os.Bundle&#13;&#10;import android.util.Log&#13;&#10;import android.view.LayoutInflater&#13;&#10;import android.view.ViewGroup&#13;&#10;import android.widget.Button&#13;&#10;import android.widget.TextView&#13;&#10;import android.widget.Toast&#13;&#10;import com.example.alcoholictimer.utils.Constants&#13;&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#13;&#10;import java.text.SimpleDateFormat&#13;&#10;import java.util.Date&#13;&#10;import java.util.Locale&#13;&#10;&#13;&#10;/**&#13;&#10; * 금주 완료 후 결과 요약을 보여주는 액티비티&#13;&#10; */&#13;&#10;class RecordSummaryActivity : BaseActivity() {&#13;&#10;&#13;&#10;    private var record: SobrietyRecord? = null&#13;&#10;    private val TAG = &quot;RecordSummaryActivity&quot;&#13;&#10;&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;        Log.d(TAG, &quot;onCreate: 기록화면 시작&quot;)&#13;&#10;&#13;&#10;        // 이전 화면에서 전달받은 기록 ID 가져오기&#13;&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1L)&#13;&#10;        Log.d(TAG, &quot;onCreate: recordId=$recordId&quot;)&#13;&#10;&#13;&#10;        if (recordId == -1L) {&#13;&#10;            // ID가 없으면 메인 화면으로 이동&#13;&#10;            Toast.makeText(this, &quot;기록 정보를 찾을 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#13;&#10;            Log.e(TAG, &quot;Record ID not found in intent&quot;)&#13;&#10;            finish()&#13;&#10;            return&#13;&#10;        }&#13;&#10;&#13;&#10;        // 해당 ID의 기록 데이터 불러오기&#13;&#10;        record = loadRecord(recordId)&#13;&#10;&#13;&#10;        if (record == null) {&#13;&#10;            Toast.makeText(this, &quot;해당 기록을 불러올 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#13;&#10;            Log.e(TAG, &quot;Failed to load record with id: $recordId&quot;)&#13;&#10;        } else {&#13;&#10;            Log.d(TAG, &quot;Record loaded: ${record?.startDate} to ${record?.endDate}, completed=${record?.isCompleted}&quot;)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun setupContentView() {&#13;&#10;        Log.d(TAG, &quot;setupContentView: 시작&quot;)&#13;&#10;&#13;&#10;        try {&#13;&#10;            // BaseActivity에서 상속받은 contentFrame에 레이아웃 추가&#13;&#10;            val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#13;&#10;            if (contentFrame == null) {&#13;&#10;                Log.e(TAG, &quot;contentFrame not found&quot;)&#13;&#10;                return&#13;&#10;            }&#13;&#10;&#13;&#10;            val view = LayoutInflater.from(this).inflate(R.layout.activity_record_summary, contentFrame, true)&#13;&#10;            Log.d(TAG, &quot;Layout inflated successfully&quot;)&#13;&#10;&#13;&#10;            // UI 요소 초기화&#13;&#10;            val tvRecordScreenTitle = view.findViewById&lt;TextView&gt;(R.id.tvRecordScreenTitle)&#13;&#10;            val tvSummaryTitle = view.findViewById&lt;TextView&gt;(R.id.tvSummaryTitle)&#13;&#10;            val tvPeriod = view.findViewById&lt;TextView&gt;(R.id.tvPeriod)&#13;&#10;            val tvDuration = view.findViewById&lt;TextView&gt;(R.id.tvDuration)&#13;&#10;            val btnNewChallenge = view.findViewById&lt;Button&gt;(R.id.btnNewChallenge)&#13;&#10;&#13;&#10;            if (tvRecordScreenTitle == null || tvSummaryTitle == null || tvPeriod == null || btnNewChallenge == null) {&#13;&#10;                Log.e(TAG, &quot;One or more UI elements not found in layout&quot;)&#13;&#10;                return&#13;&#10;            }&#13;&#10;&#13;&#10;            // 기본 타이틀은 항상 표시&#13;&#10;            tvRecordScreenTitle.text = &quot;기록화면&quot;&#13;&#10;&#13;&#10;            // 레코드가 있는 경우에만 데이터 표시&#13;&#10;            if (record != null) {&#13;&#10;                // 제목 설정&#13;&#10;                if (record!!.isCompleted) {&#13;&#10;                    tvSummaryTitle.text = &quot;목표 달성을 축하합니다!&quot;&#13;&#10;                } else {&#13;&#10;                    tvSummaryTitle.text = &quot;금주 기록 요약&quot;&#13;&#10;                }&#13;&#10;&#13;&#10;                // 날짜 포맷 설정&#13;&#10;                val dateFormat = SimpleDateFormat(&quot;yyyy년 MM월 dd일 HH:mm&quot;, Locale.getDefault())&#13;&#10;                val startDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.startDate) ?: Date())&#13;&#10;                val endDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.endDate) ?: Date())&#13;&#10;&#13;&#10;                // 기간 표시&#13;&#10;                tvPeriod.text = &quot;시작: $startDate\n종료: $endDate&quot;&#13;&#10;&#13;&#10;                // 금주 기간을 테스트 모드에 따라 다르게 표시&#13;&#10;                val durationText = formatDurationByTestMode(record!!.startDate, record!!.endDate)&#13;&#10;                tvDuration?.text = durationText&#13;&#10;            } else {&#13;&#10;                // 레코드가 없는 경우 기본 텍스트 설정&#13;&#10;                tvSummaryTitle.text = &quot;금주 기록&quot;&#13;&#10;                tvPeriod.text = &quot;기록 정보 없음&quot;&#13;&#10;                tvDuration?.text = &quot;기간 정보 없음&quot;&#13;&#10;            }&#13;&#10;&#13;&#10;            // 새로운 도전 버튼 클릭 리스너 설정&#13;&#10;            btnNewChallenge.setOnClickListener {&#13;&#10;                // MainActivity로 이동&#13;&#10;                val intent = Intent(this, MainActivity::class.java)&#13;&#10;                intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP  // 스택의 MainActivity 위의 모든 액티비티 제거&#13;&#10;                startActivity(intent)&#13;&#10;                finish()&#13;&#10;            }&#13;&#10;&#13;&#10;            Log.d(TAG, &quot;setupContentView: 완료&quot;)&#13;&#10;&#13;&#10;        } catch (e: Exception) {&#13;&#10;            Log.e(TAG, &quot;Error setting up content view: ${e.message}&quot;, e)&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * 테스트 모드에 따라 기간을 다르게 포맷팅&#13;&#10;     */&#13;&#10;    private fun formatDurationByTestMode(startDateStr: String, endDateStr: String): String {&#13;&#10;        try {&#13;&#10;            val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#13;&#10;            val startDate = dateFormat.parse(startDateStr) ?: Date()&#13;&#10;            val endDate = dateFormat.parse(endDateStr) ?: Date()&#13;&#10;            &#13;&#10;            val durationMillis = endDate.time - startDate.time&#13;&#10;            &#13;&#10;            return when (Constants.currentTestMode) {&#13;&#10;                Constants.TEST_MODE_SECOND -&gt; {&#13;&#10;                    // 초 단위 테스트 모드: 0분 00초 형식&#13;&#10;                    val totalSeconds = (durationMillis / 1000).toInt()&#13;&#10;                    val minutes = totalSeconds / 60&#13;&#10;                    val seconds = totalSeconds % 60&#13;&#10;                    &quot;${minutes}분 ${String.format(&quot;%02d&quot;, seconds)}초&quot;&#13;&#10;                }&#13;&#10;                Constants.TEST_MODE_MINUTE -&gt; {&#13;&#10;                    // 분 단위 테스트 모드: 0시간 00분 형식&#13;&#10;                    val totalMinutes = (durationMillis / (1000 * 60)).toInt()&#13;&#10;                    val hours = totalMinutes / 60&#13;&#10;                    val minutes = totalMinutes % 60&#13;&#10;                    &quot;${hours}시간 ${String.format(&quot;%02d&quot;, minutes)}분&quot;&#13;&#10;                }&#13;&#10;                else -&gt; {&#13;&#10;                    // 실제 모드 (일 단위): 0일 00시간 형식&#13;&#10;                    val totalHours = (durationMillis / (1000 * 60 * 60)).toInt()&#13;&#10;                    val days = totalHours / 24&#13;&#10;                    val hours = totalHours % 24&#13;&#10;                    &quot;${days}일 ${String.format(&quot;%02d&quot;, hours)}시간&quot;&#13;&#10;                }&#13;&#10;            }&#13;&#10;        } catch (e: Exception) {&#13;&#10;            Log.e(TAG, &quot;Error formatting duration: ${e.message}&quot;, e)&#13;&#10;            return &quot;기간 계산 오류&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * ID로 기록 불러오기&#13;&#10;     */&#13;&#10;    private fun loadRecord(recordId: Long): SobrietyRecord? {&#13;&#10;        try {&#13;&#10;            val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#13;&#10;            val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#13;&#10;            val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#13;&#10;&#13;&#10;            return records.find { it.id == recordId }&#13;&#10;        } catch (e: Exception) {&#13;&#10;            Log.e(TAG, &quot;Error loading record: ${e.message}&quot;, e)&#13;&#10;            return null&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.model.RecentActivity&#10;&#10;class RecentActivityAdapter : RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;    private val activities = ArrayList&lt;RecentActivity&gt;()&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val ivActivityIcon: ImageView = itemView.findViewById(R.id.ivActivityIcon)&#10;        val tvEndDate: TextView = itemView.findViewById(R.id.tvEndDate)&#10;        val tvActivityTitle: TextView = itemView.findViewById(R.id.tvActivityTitle)&#10;        val tvDuration: TextView = itemView.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val tvSavedMoney: TextView = itemView.findViewById(R.id.tvSavedMoney)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        &#10;        holder.tvEndDate.text = activity.endDate&#10;        holder.tvActivityTitle.text = activity.title&#10;        holder.tvDuration.text = &quot;${activity.duration}일 ${activity.hours}시간&quot;&#10;        holder.tvStatus.text = if(activity.isSuccess) &quot;성공&quot; else &quot;실패&quot;&#10;        holder.tvSavedMoney.text = &quot;${activity.savedMoney}만원 절약&quot;&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;&#10;    fun updateActivities(newActivities: List&lt;RecentActivity&gt;) {&#10;        activities.clear()&#10;        activities.addAll(newActivities.take(5)) // 최대 5개까지만 표시&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer.utils&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import com.example.alcoholictimer.AlcoholicTimerApplication&#10;&#10;object Constants {&#10;    // SharedPreferences 관련 상수&#10;    const val PREFS_NAME = &quot;AlcoholicTimerPrefs&quot;&#10;    const val PREF_KEY_TEST_MODE = &quot;test_mode&quot;&#10;&#10;    // 테스트 모드 상수&#10;    const val TEST_MODE_REAL = 0    // 실제 모드 (1일 = 24시간)&#10;    const val TEST_MODE_MINUTE = 1  // 분 단위 테스트 모드 (1일 = 1분)&#10;    const val TEST_MODE_SECOND = 2  // 초 단위 테스트 모드 (1일 = 1초)&#10;&#10;    // 현재 선택된 테스트 모드 (기본값: 초 단위 테스트)&#10;    private var currentTestMode = TEST_MODE_SECOND&#10;&#10;    // 테스트 모드 상태 (런타임에 변경 가능)&#10;    val isTestMode: Boolean&#10;        get() = currentTestMode != TEST_MODE_REAL&#10;&#10;    val isSecondTestMode: Boolean&#10;        get() = currentTestMode == TEST_MODE_SECOND&#10;&#10;    val isMinuteTestMode: Boolean&#10;        get() = currentTestMode == TEST_MODE_MINUTE&#10;&#10;    // 시간 변환 상수&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#10;&#10;    // 사용할 시간 단위 (테스트 모드에 따라 동적으로 결정)&#10;    val TIME_UNIT_MILLIS: Long&#10;        get() = when (currentTestMode) {&#10;            TEST_MODE_SECOND -&gt; SECOND_IN_MILLIS  // 초 단위 테스트 (1초 = 1일)&#10;            TEST_MODE_MINUTE -&gt; MINUTE_IN_MILLIS  // 분 단위 테스트 (1분 = 1일)&#10;            else -&gt; DAY_IN_MILLIS                 // 실제 일 단위 (1일 = 24시간)&#10;        }&#10;&#10;    // 프로그레스바용 시간 단위 (테스트 모드와 동일하게 설정)&#10;    val PROGRESS_TIME_UNIT_MILLIS: Long&#10;        get() = TIME_UNIT_MILLIS&#10;&#10;    // 단위 텍스트&#10;    val TIME_UNIT_TEXT: String&#10;        get() = when (currentTestMode) {&#10;            TEST_MODE_SECOND -&gt; &quot;초&quot;  // 초 단위 테스트 시 표시 텍스트&#10;            TEST_MODE_MINUTE -&gt; &quot;분&quot;  // 분 단위 테스트 시 표시 텍스트&#10;            else -&gt; &quot;일&quot;              // 실제 모드 시 표시 텍스트&#10;        }&#10;&#10;    // 앱 시작 시 설정 불러오기&#10;    fun init(context: Context) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        currentTestMode = prefs.getInt(PREF_KEY_TEST_MODE, TEST_MODE_SECOND)&#10;    }&#10;&#10;    // 테스트 모드 업데이트&#10;    fun updateTestMode(mode: Int) {&#10;        currentTestMode = mode&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;&#10;object Constants {&#10;    // SharedPreferences 관련 상수&#10;    const val PREFS_NAME = &quot;AlcoholicTimerPrefs&quot;&#10;    const val PREF_KEY_TEST_MODE = &quot;test_mode&quot;&#10;&#10;    // 테스트 모드 상수&#10;    const val TEST_MODE_REAL = 0    // 실제 모드 (1일 = 24시간)&#10;    const val TEST_MODE_MINUTE = 1  // 분 단위 테스트 모드 (1일 = 1분)&#10;    const val TEST_MODE_SECOND = 2  // 초 단위 테스트 모드 (1일 = 1초)&#10;&#10;    // 현재 선택된 테스트 모드 (기본값: 실제 모드)&#10;    var currentTestMode = TEST_MODE_REAL&#10;&#10;    // 테스트 모드 상태 (런타임에 변경 가능)&#10;    val isTestMode: Boolean&#10;        get() = currentTestMode != TEST_MODE_REAL&#10;&#10;    val isSecondTestMode: Boolean&#10;        get() = currentTestMode == TEST_MODE_SECOND&#10;&#10;    val isMinuteTestMode: Boolean&#10;        get() = currentTestMode == TEST_MODE_MINUTE&#10;&#10;    // 시간 변환 상수&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#10;&#10;    // 사용할 시간 단위 (테스트 모드에 따라 동적으로 결정)&#10;    val TIME_UNIT_MILLIS: Long&#10;        get() = when (currentTestMode) {&#10;            TEST_MODE_SECOND -&gt; SECOND_IN_MILLIS  // 초 단위 테스트 (1초 = 1일)&#10;            TEST_MODE_MINUTE -&gt; MINUTE_IN_MILLIS  // 분 단위 테스트 (1분 = 1일)&#10;            else -&gt; DAY_IN_MILLIS                 // 실제 일 단위 (1일 = 24시간)&#10;        }&#10;&#10;    // 프로그레스바용 시간 단위 (테스트 모드와 동일하게 설정)&#10;    val PROGRESS_TIME_UNIT_MILLIS: Long&#10;        get() = TIME_UNIT_MILLIS&#10;&#10;    // 단위 텍스트&#10;    val TIME_UNIT_TEXT: String&#10;        get() = when (currentTestMode) {&#10;            TEST_MODE_SECOND -&gt; &quot;초&quot;  // 초 단위 테스트 시 표시 텍스트&#10;            TEST_MODE_MINUTE -&gt; &quot;분&quot;  // 분 단위 테스트 시 표시 텍스트&#10;            else -&gt; &quot;일&quot;              // 실제 모드 시 표시 텍스트&#10;        }&#10;&#10;    // 앱 시작 시 설정 불러오기&#10;    fun init(context: Context) {&#10;        val prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;        currentTestMode = prefs.getInt(PREF_KEY_TEST_MODE, TEST_MODE_REAL)&#10;    }&#10;&#10;    // 테스트 모드 업데이트&#10;    fun updateTestMode(mode: Int) {&#10;        currentTestMode = mode&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/activity_record_summary.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/activity_record_summary.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvRecordScreenTitle&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;24dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;기록화면&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;28sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSummaryTitle&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;목표 달성을 축하합니다!&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;androidx.cardview.widget.CardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;금주 기간&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvPeriod&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:text=&quot;시작: 2023년 07월 01일\n종료: 2023년 07월 30일&quot;&#10;                    android:textSize=&quot;16sp&quot; /&gt;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnNewChallenge&quot;&#10;            style=&quot;@style/ButtonPrimary&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;32dp&quot;&#10;            android:text=&quot;새로운 도전 시작하기&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;ScrollView xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:fillViewport=&quot;true&quot;&gt;&#10;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:orientation=&quot;vertical&quot;&#10;        android:padding=&quot;16dp&quot;&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvRecordScreenTitle&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;24dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;기록화면&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;28sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;TextView&#10;            android:id=&quot;@+id/tvSummaryTitle&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;16dp&quot;&#10;            android:layout_marginBottom=&quot;24dp&quot;&#10;            android:gravity=&quot;center&quot;&#10;            android:text=&quot;목표 달성을 축하합니다!&quot;&#10;            android:textColor=&quot;@android:color/black&quot;&#10;            android:textSize=&quot;24sp&quot;&#10;            android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;        &lt;androidx.cardview.widget.CardView&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginBottom=&quot;16dp&quot;&#10;            app:cardCornerRadius=&quot;8dp&quot;&#10;            app:cardElevation=&quot;4dp&quot;&gt;&#10;&#10;            &lt;LinearLayout&#10;                android:layout_width=&quot;match_parent&quot;&#10;                android:layout_height=&quot;wrap_content&quot;&#10;                android:orientation=&quot;vertical&quot;&#10;                android:padding=&quot;16dp&quot;&gt;&#10;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:text=&quot;금주 기간&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvPeriod&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:text=&quot;시작: 2023년 07월 01일\n종료: 2023년 07월 30일&quot;&#10;                    android:textSize=&quot;16sp&quot; /&gt;&#10;&#10;                &lt;!-- 총 금주 시간 표시 --&gt;&#10;                &lt;TextView&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;16dp&quot;&#10;                    android:text=&quot;총 금주 시간&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:textSize=&quot;18sp&quot;&#10;                    android:textStyle=&quot;bold&quot; /&gt;&#10;&#10;                &lt;TextView&#10;                    android:id=&quot;@+id/tvDuration&quot;&#10;                    android:layout_width=&quot;match_parent&quot;&#10;                    android:layout_height=&quot;wrap_content&quot;&#10;                    android:layout_marginTop=&quot;8dp&quot;&#10;                    android:text=&quot;0일 00시간&quot;&#10;                    android:textSize=&quot;20sp&quot;&#10;                    android:textStyle=&quot;bold&quot;&#10;                    android:textColor=&quot;@android:color/black&quot;&#10;                    android:gravity=&quot;center&quot; /&gt;&#10;&#10;            &lt;/LinearLayout&gt;&#10;        &lt;/androidx.cardview.widget.CardView&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnNewChallenge&quot;&#10;            style=&quot;@style/ButtonPrimary&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:layout_marginTop=&quot;32dp&quot;&#10;            android:text=&quot;새로운 도전 시작하기&quot; /&gt;&#10;&#10;    &lt;/LinearLayout&gt;&#10;&lt;/ScrollView&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>