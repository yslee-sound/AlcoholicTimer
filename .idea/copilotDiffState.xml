<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/AndroidManifest.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/AndroidManifest.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#10;&#10;    &lt;application&#10;        android:allowBackup=&quot;true&quot;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#10;        android:label=&quot;@string/app_name&quot;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#10;        android:supportsRtl=&quot;true&quot;&#10;        android:theme=&quot;@style/Theme.Material3.DayNight&quot;&#10;        tools:targetApi=&quot;31&quot;&gt;&#10;&#10;        &lt;!-- 메인 액티비티 (시작 화면) --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.StartActivity&quot;&#10;            android:exported=&quot;true&quot;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot;&gt;&#10;            &lt;intent-filter&gt;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#10;            &lt;/intent-filter&gt;&#10;        &lt;/activity&gt;&#10;&#10;        &lt;!-- 기록 화면 --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RecordsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#10;&#10;        &lt;!-- 레벨 화면 --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.LevelActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#10;&#10;        &lt;!-- 설정 화면 --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.SettingsActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#10;&#10;        &lt;!-- 금주 진행 화면 --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.RunActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#10;&#10;        &lt;!-- 금주 종료 확인 화면 --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.QuitActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#10;&#10;        &lt;!-- 설정/테스트 화면 --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.TestActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#10;&#10;        &lt;!-- 세부 기록 화면 --&gt;&#10;        &lt;activity&#10;            android:name=&quot;.DetailActivity&quot;&#10;            android:exported=&quot;false&quot;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;&gt;&#13;&#10;&#13;&#10;    &lt;application&#13;&#10;        android:allowBackup=&quot;true&quot;&#13;&#10;        android:icon=&quot;@mipmap/ic_launcher&quot;&#13;&#10;        android:label=&quot;@string/app_name&quot;&#13;&#10;        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;&#13;&#10;        android:supportsRtl=&quot;true&quot;&#13;&#10;        android:theme=&quot;@style/Theme.Material3.DayNight&quot;&#13;&#10;        tools:targetApi=&quot;31&quot;&gt;&#13;&#10;&#13;&#10;        &lt;!-- 메인 액티비티 (시작 화면) --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.StartActivity&quot;&#13;&#10;            android:exported=&quot;true&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot;&gt;&#13;&#10;            &lt;intent-filter&gt;&#13;&#10;                &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;&#13;&#10;                &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;&#13;&#10;            &lt;/intent-filter&gt;&#13;&#10;        &lt;/activity&gt;&#13;&#10;&#13;&#10;        &lt;!-- 기록 화면 --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.RecordsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- 레벨 화면 --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.LevelActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- 설정 화면 --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.SettingsActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- 금주 진행 화면 --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.RunActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- 금주 종료 확인 화면 --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.QuitActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- 설정/테스트 화면 --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.TestActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- 세부 기록 화면 --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.DetailActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#13;&#10;&#13;&#10;        &lt;!-- 그래프 화면 --&gt;&#13;&#10;        &lt;activity&#13;&#10;            android:name=&quot;.GraphActivity&quot;&#13;&#10;            android:exported=&quot;false&quot;&#13;&#10;            android:theme=&quot;@style/Theme.Material3.DayNight&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;/application&gt;&#13;&#10;&#13;&#10;&lt;/manifest&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/assets/drink_level.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/assets/drink_level.md" />
              <option name="updatedContent" value="# 금주 레벨 화면 상세 기획서&#10;&#10;본 기획서는 사용자의 금주 성공 기록을 기반으로, 금주 레벨을 시각적으로 표시하는 화면을 설계합니다.&#10;Jetpack Compose 기반으로 구현하며, 최소 기능 제품(MVP) 기준으로 작성되었습니다.&#10;&#10;---&#10;&#10;## 1. 금주 레벨 정의&#10;&#10;| 레벨명           | 기간 (연속 금주 일수) | 색상                 | 표시 방법           |&#10;|-----------------|---------------------|---------------------|-------------------|&#10;| 작심 7일         | 0~6일               | Gray (#BDBDBD)      | 0~6일             |&#10;| 의지의 2주        | 7~13일              | Yellow (#FFEB3B)    | 7~13일            |&#10;| 한달의 기적       | 14~29일             | Orange (#FF9800)    | 14~29일           |&#10;| 습관의 탄생       | 30~59일             | Green (#4CAF50)     | 30~59일           |&#10;| 계속되는 도전     | 60~119일            | Blue (#2196F3)      | 60~119일          |&#10;| 거의 1년         | 120~239일           | Purple (#9C27B0)    | 120~239일         |&#10;| 금주 마스터       | 240~364일           | Black (#212121)     | 240~364일         |&#10;| 절제의 레전드     | 365일 이상          | Gold (#FFD700)      | 1년 이상          |&#10;&#10;**특별 표시 규칙:**&#10;- &quot;절제의 레전드&quot; 레벨의 날짜는 &quot;1년 이상&quot;으로 표시&#10;- 각 레벨은 해당 색상의 카드로 표현&#10;- 달성한 레벨은 100% 투명도, 미달성 레벨은 20% 투명도(연하게 표시)&#10;&#10;---&#10;&#10;## 2. 화면 구성&#10;&#10;### (1) 상단바 (BaseActivity 공통)&#10;- **햄버거 메뉴**: 좌측 상단 (기존 네비게이션 패턴 유지)&#10;- **화면 제목**: &quot;금주 레벨&quot; (중앙 정렬)&#10;- **배경색**: 흰색 (#FFFFFF)&#10;- **구분선**: 하단에 연한 회색 구분선&#10;&#10;### (2) 현재 진행 영역 (상단 1/3)&#10;- **배경색**: 흰색 (#FFFFFF)&#10;- **레이아웃**: 중앙 정렬 세로 배치&#10;- **구성 요소**:&#10;  ```&#10;  [현재 레벨명]&#10;  24sp, Bold, 검은색&#10;  &#10;  [진행도 바]&#10;  - 가로 70% 너비, 높이 10dp&#10;  - 현재 레벨 색상으로 표시&#10;  - 둥근 모서리&#10;  &#10;  [남은 일수 텍스트]&#10;  16sp, 검은색&#10;  &quot;다음 레벨까지 X일 남음&quot; 또는 &quot;최고 레벨입니다!&quot;&#10;  ```&#10;&#10;### (3) 구분선&#10;- **두께**: 2dp&#10;- **색상**: 연한 회색 (#E0E0E0)&#10;- **위치**: 현재 진행 영역과 레벨 리스트 사이&#10;&#10;### (4) 전체 레벨 리스트 (하단 2/3)&#10;- **스크롤**: 세로 스크롤 가능&#10;- **패딩**: 상단 16dp 여백&#10;- **카드 간격**: 12dp&#10;&#10;#### 레벨 카드 디자인&#10;```&#10;┌─────────────────────────────────┐&#10;│ [레벨명]                        │ ← 18sp, 현재 레벨이면 Bold&#10;│ [기간]                          │ ← 14sp, 회색&#10;└─────────────────────────────────┘&#10;```&#10;&#10;**카드 속성**:&#10;- **모서리**: 16dp 둥근 모서리&#10;- **패딩**: 내부 16dp, 좌우 여백 16dp&#10;- **배경색**: 각 레벨의 지정 색상&#10;- **투명도**: 달성 레벨 100%, 미달성 레벨 20%&#10;- **텍스트 색상**: 달성 시 검은색, 미달성 시 회색&#10;&#10;---&#10;&#10;## 3. 데이터 연동 규칙&#10;&#10;### (1) 현재 일수 계산&#10;```kotlin&#10;val currentDays = 15 // 예시값, 실제로는 SharedPreferences에서 계산&#10;```&#10;&#10;### (2) 현재 레벨 판정&#10;```kotlin&#10;val currentLevelIndex = levels.indexOfFirst { currentDays in it.start..it.end }.coerceAtLeast(0)&#10;```&#10;&#10;### (3) 진행도 계산&#10;```kotlin&#10;val progress = when {&#10;    currentDays &lt; currentLevel.start -&gt; 0f&#10;    currentDays &gt; currentLevel.end -&gt; 1f&#10;    else -&gt; (currentDays - currentLevel.start + 1).toFloat() / (currentLevel.end - currentLevel.start + 1)&#10;}&#10;```&#10;&#10;### (4) 다음 레벨까지 일수&#10;```kotlin&#10;val daysToNext = if (nextLevel != null) nextLevel.start - currentDays else 0&#10;```&#10;&#10;---&#10;&#10;## 4. UI 상태 및 동작&#10;&#10;### (1) 달성 상태 표시&#10;- **달성된 레벨**: 원래 색상으로 선명하게 표시&#10;- **미달성 레벨**: 20% 투명도로 연하게 표시&#10;- **현재 레벨**: Bold 텍스트로 강조&#10;&#10;### (2) 특별 케이스&#10;- **최고 레벨 달성**: &quot;최고 레벨입니다!&quot; 메시지 표시&#10;- **절제의 레전드**: 날짜를 &quot;1년 이상&quot;으로 표시&#10;&#10;### (3) 반응형 디자인&#10;- **세로 스크롤**: 레벨이 많을 때 스크롤 가능&#10;- **카드 레이아웃**: 화면 너비에 맞춰 자동 조정&#10;- **패딩**: 좌우 16dp 일관된 여백&#10;&#10;---&#10;&#10;## 5. 구현 시 주의사항&#10;&#10;### (1) Jetpack Compose 컴포넌트&#10;```kotlin&#10;// BaseActivity 상속으로 공통 네비게이션 제공&#10;class LevelActivity : BaseActivity()&#10;&#10;// 메인 화면 구성&#10;@Composable&#10;fun LevelScreen(currentDays: Int, onBack: (() -&gt; Unit)? = null)&#10;&#10;// 레벨 카드 컴포넌트&#10;@Composable&#10;fun LevelCard(level: LevelInfo, currentDays: Int, enabled: Boolean)&#10;&#10;// 데이터 클래스&#10;data class LevelInfo(val name: String, val start: Int, val end: Int, val color: Color)&#10;```&#10;&#10;### (2) 색상 일관성&#10;- Material3 테마 기반&#10;- 각 레벨별 고유 색상 유지&#10;- 흰색 배경으로 통일&#10;&#10;### (3) 접근성&#10;- 충분한 색상 대비&#10;- 의미 있는 contentDescription&#10;- 텍스트 크기 가독성 확보&#10;&#10;### (4) 성능 최적화&#10;- remember를 통한 상태 관리&#10;- LazyColumn 대신 일반 Column + Scroll (레벨 수가 적음)&#10;- 불필요한 리컴포지션 방지&#10;&#10;---&#10;&#10;## 6. 프리뷰 및 테스트&#10;&#10;### (1) Compose 프리뷰&#10;```kotlin&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewLevelScreen() {&#10;    LevelActivity().LevelScreen(currentDays = 15)&#10;}&#10;```&#10;&#10;### (2) 테스트 케이스&#10;- 각 레벨 구간별 표시 확인&#10;- 진행도 바 정확성 검증&#10;- 최고 레벨 달성 시 UI 확인&#10;- 스크롤 동작 테스트&#10;&#10;---&#10;&#10;이 기획서는 실제 구현된 코드를 바탕으로 작성되었으며, 동일한 화면을 재구현할 때 참고 문서로 활용할 수 있습니다." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/assets/hamburger_view.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/assets/hamburger_view.md" />
              <option name="originalContent" value="#  햄버거 메뉴 상세 기획서 (MVP, Jetpack Compose)&#10;&#10;금주 타이머 앱의 사이드(햄버거) 메뉴 상세 기획서입니다.  &#10;Jetpack Compose 기반으로 구현하며, 최소 기능 제품(MVP) 기준으로 작성되었습니다.&#10;&#10;---&#10;&#10;## 1. 메뉴 구조 및 구성 요소&#10;&#10;### [상단 프로필 영역]&#10;- **동그란 원형 프로필(아바타)**&#10;    - 원형 배경 위에 중앙에 술병 모양 SVG 또는 PNG 아바타 이미지 표시&#10;    - 아바타 이미지는 앱 내 기본 제공 (커스텀/변경 기능은 MVP 범위 외)&#10;- **이름(별명)**&#10;    - 기본값: &quot;알중이1&quot;&#10;    - 사용자 이름(별명) 텍스트 표시&#10;    - 이름(별명) 클릭 시 이름 변경 다이얼로그 표시&#10;    - 변경된 별명은 SharedPreferences에 저장 및 불러오기&#10;&#10;### [구분선]&#10;- 얇은 회색 Divider로 시각적 구분  &#10;  (Jetpack Compose의 Divider 컴포넌트 사용)&#10;&#10;### [메뉴 목록]&#10;- **금주**&#10;    - 메뉴명: &quot;금주&quot;&#10;    - 클릭 시 동작:&#10;        - 금주 진행전: 금주 설정 화면(StartActivity)으로 이동&#10;        - 금주 진행중: 금주 상태 화면(StatusActivity)으로 이동&#10;    - 아이콘: 시작/진행 상태를 나타내는 아이콘(예: ▶️)&#10;- **기록**&#10;    - 메뉴명: &quot;기록&quot;&#10;    - 클릭 시 금주 기록/통계 화면(RecordsActivity)으로 이동&#10;    - 아이콘: 통계/차트 아이콘(예: )&#10;&#10;- **레벨**&#10;    - 메뉴명: &quot;레벨&quot;&#10;    - 클릭 시 레벨 화면(LevelActivity)으로 이동&#10;    - 아이콘: 레벨 아이콘(예: )&#10;&#10;- **구분선**&#10;    - 동일한 스타일의 Divider로 시각적 구분&#10;&#10;- **설정**&#10;    - 메뉴명: &quot;설정&quot;&#10;    - 클릭 시 앱 설정 화면(SettingsActivity)으로 이동&#10;    - 아이콘: 톱니바퀴(⚙️)&#10;&#10;- **테스트 (개발자용)**&#10;    - 메뉴명: &quot;테스트&quot;&#10;    - 클릭 시 테스트 화면(TestActivity)으로 이동&#10;    - 아이콘: 실험/테스트 아이콘(예: )&#10;    - 일반 사용자에게는 메뉴가 표시되지 않음 (빌드시 개발자 플래그로 제어)&#10;&#10;---&#10;&#10;## 2. UI/UX 상세&#10;&#10;### [레이아웃 예시]&#10;```&#10;┌─────────────────────────────┐&#10;│   ●                        │ ← 동그란 원(술병 아바타)&#10;│   알중이1                  │ ← 사용자 이름(클릭 가능, 변경 다이얼로그)&#10;├─────────────────────────────┤ ← 구분선&#10;│ ▶️ 금주                    │ ← 진입 화면: Start/StatusActivity&#10;│  기록                    │ ← 기록/통계 화면 진입&#10;├─────────────────────────────┤ ← 구분선&#10;│ ⚙️ 설정                    │ ← 설정 화면 진입&#10;│  테스트                  │ ← 테스트 화면(개발자 모드)&#10;└─────────────────────────────┘&#10;```&#10;&#10;### [상호작용]&#10;- 아바타/이름 클릭 → 이름 변경 다이얼로그&#10;- 메뉴 클릭 → 각 해당 화면으로 네비게이션&#10;    - 금주: 금주 설정(StartActivity) 또는 금주 상태(StatusActivity)&#10;    - 기록: RecordsActivity&#10;    - 설정: SettingsActivity&#10;    - 테스트: TestActivity (개발자 플래그 true일 때만 표시)&#10;&#10;---&#10;&#10;## 3. 데이터 연동&#10;&#10;- **SharedPreferences Key**&#10;    - `nickname`: 사용자 별명(예시: &quot;알중이1&quot;)&#10;- 금주 진행 상태 판단 로직:&#10;    - `start_date` 존재 여부로 판단&#10;    - 진행중: `start_date` 값 있음&#10;    - 진행전: `start_date` 값 없음&#10;&#10;---&#10;&#10;## 4. 구현 고려사항 (MVP 기준)&#10;&#10;- Jetpack Compose에서 Drawer/ModalDrawer를 사용&#10;- 메뉴 항목은 Column으로 고정 배치&#10;- 아이콘은 VectorDrawable, PNG, 또는 Emoji 활용(빠른 MVP 구현)&#10;- 각 메뉴 클릭 시 Navigation 처리&#10;- 구분선(Divider) 스타일 통일&#10;- 테스트 메뉴는 개발자 플래그로 conditionally 렌더링&#10;- 별명 변경은 AlertDialog 사용 (입력/저장/적용)&#10;&#10;---&#10;&#10;## 5. 개발 TODO&#10;&#10;- [ ] Drawer 메뉴 레이아웃 설계 및 Compose 구현&#10;- [ ] 아바타 &amp; 별명 표시, 별명 변경 다이얼로그 구현&#10;- [ ] 메뉴 클릭 시 네비게이션 처리 및 화면 연결&#10;- [ ] SharedPreferences 연동&#10;- [ ] 테스트 메뉴 개발자 플래그 처리&#10;&#10;---&#10;&#10;**이 기획서를 토대로 Jetpack Compose 코드 작성을 시작하세요.**" />
              <option name="updatedContent" value="#  햄버거 메뉴 상세 기획서 (Jetpack Compose 구현)&#10;&#10;금주 타이머 앱의 사이드(햄버거) 메뉴 상세 기획서입니다.  &#10;Jetpack Compose 기반으로 구현하며, 실제 구현된 UI를 반영한 완전한 문서입니다.&#10;&#10;---&#10;&#10;## 1. 메뉴 구조 및 구성 요소&#10;&#10;### [상단 프로필 영역]&#10;- **동그란 원형 아바타**&#10;    - **크기**: 80dp(가로) × 72dp(세로) Box 컨테이너&#10;    - **모양**: CircleShape로 완전한 원형&#10;    - **배경색**: Color(0xFF888888) - 진한 회색 톤&#10;    - **아이콘**: Icons.Default.Person (사람 모양)&#10;    - **아이콘 색상**: Color.White (밝은 흰색)&#10;    - **아이콘 크기**: 40dp&#10;    - **위치**: 좌측 시작점에서 8dp 패딩&#10;    - **정렬**: wrapContentSize(Alignment.Center)로 중앙 배치&#10;&#10;- **사용자 별명**&#10;    - **기본값**: &quot;알중이1&quot;&#10;    - **크기**: 18sp&#10;    - **스타일**: FontWeight.Bold&#10;    - **위치**: 아바타 아래 8dp 간격, 좌측 시작점에서 8dp 패딩&#10;    - **클릭 가능**: clickable { onNicknameClick() }&#10;    - **기능**: 클릭 시 별명 변경 기능 (현재 구현에서는 빈 함수)&#10;&#10;### [구분선]&#10;- **타입**: HorizontalDivider (Material3)&#10;- **여백**: 상하 12dp 패딩&#10;- **색상**: Material3 기본 색상&#10;&#10;### [메인 메뉴 목록]&#10;**메뉴 구성**:&#10;```kotlin&#10;val menuItems = listOf(&#10;    &quot;금주&quot; to Icons.Default.PlayArrow,&#10;    &quot;기록&quot; to Icons.Default.List,&#10;    &quot;레벨&quot; to Icons.Default.Star&#10;)&#10;```&#10;&#10;1. **금주**&#10;   - **아이콘**: Icons.Default.PlayArrow (▶️)&#10;   - **네비게이션 로직**: &#10;     - 금주 미시작/완료: StartActivity (목표 설정)&#10;     - 금주 진행중: StatusActivity (진행 상황)&#10;   - **판단 기준**: SharedPreferences의 &quot;start_time&quot;, &quot;timer_completed&quot; 값&#10;&#10;2. **기록**&#10;   - **아이콘**: Icons.Default.List (목록)&#10;   - **이동**: RecordsActivity&#10;&#10;3. **레벨**&#10;   - **아이콘**: Icons.Default.Star (별)&#10;   - **이동**: LevelActivity&#10;&#10;### [설정 구분선]&#10;- **타입**: HorizontalDivider&#10;- **여백**: 상하 8dp 패딩&#10;&#10;### [설정 메뉴 목록]&#10;**설정 구성**:&#10;```kotlin&#10;val settingsItems = listOf(&#10;    &quot;설정&quot; to Icons.Default.Settings,&#10;    &quot;테스트&quot; to Icons.Default.Build&#10;)&#10;```&#10;&#10;1. **설정**&#10;   - **아이콘**: Icons.Default.Settings (⚙️)&#10;   - **이동**: TestActivity&#10;&#10;2. **테스트**&#10;   - **아이콘**: Icons.Default.Build ()&#10;   - **이동**: TestActivity&#10;   - **용도**: 개발자/테스트용 기능&#10;&#10;---&#10;&#10;## 2. 상세 UI 스펙&#10;&#10;### (1) 전체 레이아웃&#10;```kotlin&#10;Column(&#10;    modifier = Modifier&#10;        .fillMaxWidth()&#10;        .padding(16.dp),&#10;    horizontalAlignment = Alignment.Start&#10;)&#10;```&#10;&#10;### (2) 아바타 영역&#10;```kotlin&#10;Box(&#10;    modifier = Modifier&#10;        .width(80.dp)&#10;        .height(72.dp)&#10;        .align(Alignment.Start)&#10;        .padding(start = 8.dp)&#10;) {&#10;    Surface(&#10;        shape = CircleShape,&#10;        color = Color(0xFF888888),&#10;        modifier = Modifier.fillMaxSize()&#10;    ) {&#10;        Icon(&#10;            imageVector = Icons.Default.Person,&#10;            contentDescription = &quot;아바타&quot;,&#10;            tint = Color.White,&#10;            modifier = Modifier.size(40.dp).wrapContentSize(Alignment.Center)&#10;        )&#10;    }&#10;}&#10;```&#10;&#10;### (3) 메뉴 아이템 구조&#10;```kotlin&#10;Row(&#10;    modifier = Modifier&#10;        .fillMaxWidth()&#10;        .clickable { onItemSelected(title) }&#10;        .padding(vertical = 12.dp, horizontal = 8.dp),&#10;    verticalAlignment = Alignment.CenterVertically&#10;) {&#10;    Icon(&#10;        imageVector = icon,&#10;        contentDescription = title,&#10;        modifier = Modifier.size(24.dp)&#10;    )&#10;    Spacer(modifier = Modifier.width(16.dp))&#10;    Text(&#10;        text = title,&#10;        fontSize = 16.sp&#10;    )&#10;}&#10;```&#10;&#10;---&#10;&#10;## 3. 색상 시스템&#10;&#10;### (1) 전체 색상 팔레트&#10;```kotlin&#10;// 메뉴 배경&#10;drawerContainerColor = Color.White&#10;modifier = Modifier.background(Color.White)&#10;&#10;// 아바타&#10;아바타 배경: Color(0xFF888888) // 진한 회색&#10;아바타 아이콘: Color.White // 흰색&#10;&#10;// 텍스트&#10;별명: Color.Black (기본값)&#10;메뉴 텍스트: Color.Black (기본값)&#10;&#10;// 아이콘&#10;메뉴 아이콘: Color.Black (기본값)&#10;&#10;// 구분선&#10;구분선: Material3 기본 색상 (연한 회색)&#10;```&#10;&#10;---&#10;&#10;## 4. 상호작용 및 네비게이션&#10;&#10;### (1) 메뉴 클릭 처리&#10;```kotlin&#10;private fun handleMenuSelection(menuItem: String) {&#10;    when (menuItem) {&#10;        &quot;금주&quot; -&gt; {&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            val startTime = sharedPref.getLong(&quot;start_time&quot;, 0L)&#10;            val timerCompleted = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;            if (startTime == 0L || timerCompleted) {&#10;                // StartActivity로 이동 (목표 설정)&#10;                if (this !is StartActivity) {&#10;                    navigateToActivity(StartActivity::class.java)&#10;                }&#10;            } else {&#10;                // StatusActivity로 이동 (진행 상황)&#10;                if (this !is StatusActivity) {&#10;                    navigateToActivity(StatusActivity::class.java)&#10;                }&#10;            }&#10;        }&#10;        &quot;기록&quot; -&gt; RecordsActivity&#10;        &quot;레벨&quot; -&gt; LevelActivity  &#10;        &quot;설정&quot; -&gt; TestActivity&#10;        &quot;테스트&quot; -&gt; TestActivity&#10;    }&#10;}&#10;```&#10;&#10;### (2) 화면 전환&#10;- **방식**: Intent를 통한 Activity 전환&#10;- **효과**: 전환 애니메이션 없음 (즉시 전환)&#10;- **중복 방지**: 현재 Activity와 동일한 경우 이동하지 않음&#10;&#10;---&#10;&#10;## 5. 레이아웃 구조도&#10;&#10;### 시각적 레이아웃&#10;```&#10;┌─────────────────────────────────┐&#10;│                                 │&#10;│    ●  알중이1                   │ ← 80×72dp 원형 + 18sp Bold&#10;│                                 │&#10;├─────────────────────────────────┤ ← HorizontalDivider (12dp 여백)&#10;│                                 │&#10;│ ▶️ 금주                        │ ← 24dp 아이콘 + 16sp 텍스트&#10;│  기록                        │&#10;│ ⭐ 레벨                        │&#10;│                                 │&#10;├─────────────────────────────────┤ ← HorizontalDivider (8dp 여백)&#10;│                                 │&#10;│ ⚙️ 설정                        │&#10;│  테스트                      │&#10;│                                 │&#10;└─────────────────────────────────┘&#10;```&#10;&#10;### 컴포넌트 계층&#10;```kotlin&#10;ModalNavigationDrawer {&#10;    ModalDrawerSheet(Color.White) {&#10;        DrawerMenu(&#10;            nickname = &quot;알중이1&quot;,&#10;            onNicknameClick = {},&#10;            onItemSelected = { handleMenuSelection(it) }&#10;        ) {&#10;            Column(16dp padding) {&#10;                // 아바타 + 별명 영역&#10;                Box(80×72dp) { CircleShape Surface + Person Icon }&#10;                Text(&quot;알중이1&quot;, 18sp Bold)&#10;                &#10;                // 첫 번째 구분선&#10;                HorizontalDivider(12dp vertical padding)&#10;                &#10;                // 메인 메뉴&#10;                forEach(menuItems) { &#10;                    Row { Icon(24dp) + Text(16sp) }&#10;                }&#10;                &#10;                // 두 번째 구분선  &#10;                HorizontalDivider(8dp vertical padding)&#10;                &#10;                // 설정 메뉴&#10;                forEach(settingsItems) {&#10;                    Row { Icon(24dp) + Text(16sp) }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;```&#10;&#10;---&#10;&#10;## 6. 데이터 연동&#10;&#10;### (1) SharedPreferences 키&#10;```kotlin&#10;// 금주 상태 판단용&#10;&quot;start_time&quot;: Long (금주 시작 시간, 0L이면 미시작)&#10;&quot;timer_completed&quot;: Boolean (금주 완료 여부)&#10;&#10;// 사용자 설정 (미래 확장용)&#10;&quot;nickname&quot;: String (사용자 별명, 기본값: &quot;알중이1&quot;)&#10;```&#10;&#10;### (2) 상태 판단 로직&#10;```kotlin&#10;val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;val startTime = sharedPref.getLong(&quot;start_time&quot;, 0L)&#10;val timerCompleted = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;// 금주 미시작 또는 완료 상태&#10;if (startTime == 0L || timerCompleted) {&#10;    // StartActivity (목표 설정 화면)&#10;} else {&#10;    // StatusActivity (진행 상황 화면)  &#10;}&#10;```&#10;&#10;---&#10;&#10;## 7. 구현 시 주의사항&#10;&#10;### (1) Material3 컴포넌트 사용&#10;- **ModalNavigationDrawer**: 최신 Material3 권장 방식&#10;- **HorizontalDivider**: Divider 대신 사용 (deprecated 방지)&#10;- **Icons.Default.***: Material Icons 활용&#10;&#10;### (2) 상태 관리&#10;```kotlin&#10;val drawerState = rememberDrawerState(DrawerValue.Closed)&#10;val scope = rememberCoroutineScope()&#10;&#10;// 메뉴 클릭 시 Drawer 자동 닫기&#10;scope.launch { drawerState.close() }&#10;```&#10;&#10;### (3) 접근성&#10;- **contentDescription**: 모든 아이콘에 의미 있는 설명 추가&#10;- **클릭 영역**: 충분한 터치 영역 확보 (vertical 12dp, horizontal 8dp 패딩)&#10;- **색상 대비**: 흰색 배경 + 검은색 텍스트로 높은 가독성&#10;&#10;---&#10;&#10;## 8. 프리뷰 코드&#10;&#10;### Compose 프리뷰&#10;```kotlin&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewDrawerMenu() {&#10;    MaterialTheme {&#10;        ModalNavigationDrawer(&#10;            drawerState = rememberDrawerState(DrawerValue.Open),&#10;            drawerContent = {&#10;                ModalDrawerSheet {&#10;                    DrawerMenu(&#10;                        nickname = &quot;알중이1&quot;,&#10;                        onNicknameClick = {},&#10;                        onItemSelected = {}&#10;                    )&#10;                }&#10;            }&#10;        ) {&#10;            Box(modifier = Modifier.fillMaxSize()) {}&#10;        }&#10;    }&#10;}&#10;```&#10;&#10;---&#10;&#10;## 9. 향후 확장 가능성&#10;&#10;### (1) 별명 변경 기능&#10;- AlertDialog + TextField로 별명 입력 받기&#10;- SharedPreferences에 저장 후 UI 업데이트&#10;&#10;### (2) 아바타 커스터마이징  &#10;- 여러 아바타 이미지 선택 기능&#10;- 색상 테마 변경 기능&#10;&#10;### (3) 메뉴 개인화&#10;- 자주 사용하는 메뉴 상단 고정&#10;- 메뉴 순서 커스터마이징&#10;&#10;---&#10;&#10;이 기획서는 실제 구현된 BaseActivity.kt의 DrawerMenu 코드를 정확히 분석하여 작성되었으며, 동일한 햄버거 메뉴를 재구현할 때 완벽한 참고 문서로 활용할 수 있습니다." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/CardDetailActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/CardDetailActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import kotlin.math.roundToInt&#10;&#10;/**&#10; * 금주 기록 카드의 상세 정보를 표시하는 액티비티&#10; * DetailActivity와 구분하여 카드 클릭 시 표시되는 화면으로 사용&#10; */&#10;class CardDetailActivity : ComponentActivity() {&#10;&#10;    companion object {&#10;        private const val TAG = &quot;CardDetailActivity&quot;&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        Log.d(TAG, &quot;===== CardDetailActivity onCreate 시작 =====&quot;)&#10;&#10;        try {&#10;            // Intent에서 데이터 받기 (안전한 방식으로)&#10;            val startTime = intent.getLongExtra(&quot;start_time&quot;, 0L)&#10;            val endTime = intent.getLongExtra(&quot;end_time&quot;, System.currentTimeMillis())&#10;            val targetDays = intent.getFloatExtra(&quot;target_days&quot;, 30f)&#10;            val actualDays = intent.getIntExtra(&quot;actual_days&quot;, 0)&#10;            val isCompleted = intent.getBooleanExtra(&quot;is_completed&quot;, false)&#10;&#10;            Log.d(TAG, &quot;수신된 데이터: startTime=$startTime, endTime=$endTime, targetDays=$targetDays, actualDays=$actualDays, isCompleted=$isCompleted&quot;)&#10;&#10;            // 데이터 유효성 검사 (조건 완화)&#10;            if (actualDays &lt; 0 || targetDays &lt; 0) {&#10;                Log.e(TAG, &quot;잘못된 데이터: actualDays=$actualDays, targetDays=$targetDays&quot;)&#10;                finish()&#10;                return&#10;            }&#10;&#10;            // targetDays가 0인 경우 기본값으로 설정&#10;            val safetargetDays = if (targetDays &lt;= 0) 30f else targetDays&#10;            Log.d(TAG, &quot;안전한 targetDays 값: $safetargetDays&quot;)&#10;&#10;            Log.d(TAG, &quot;setContent 호출 시작...&quot;)&#10;            setContent {&#10;                CardDetailScreen(&#10;                    startTime = startTime,&#10;                    endTime = endTime,&#10;                    targetDays = safetargetDays,&#10;                    actualDays = actualDays,&#10;                    isCompleted = isCompleted,&#10;                    onBack = {&#10;                        Log.d(TAG, &quot;뒤로가기 버튼 클릭&quot;)&#10;                        finish()&#10;                    }&#10;                )&#10;            }&#10;            Log.d(TAG, &quot;setContent 호출 완료&quot;)&#10;            Log.d(TAG, &quot;===== CardDetailActivity onCreate 완료 =====&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;CardDetailActivity 초기화 중 오류&quot;, e)&#10;            Log.e(TAG, &quot;오류 스택트레이스: ${e.stackTraceToString()}&quot;)&#10;            finish()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CardDetailScreen(&#10;    startTime: Long,&#10;    endTime: Long,&#10;    targetDays: Float,&#10;    actualDays: Int,&#10;    isCompleted: Boolean,&#10;    onBack: () -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    // 날짜/시간 포맷&#10;    val dateTimeFormat = SimpleDateFormat(&quot;yyyy-MM-dd - a h:mm&quot;, Locale.getDefault())&#10;    val displayDateTime = if (startTime &gt; 0) {&#10;        dateTimeFormat.format(Date(startTime))&#10;    } else {&#10;        &quot;오늘 - ${SimpleDateFormat(&quot;a h:mm&quot;, Locale.getDefault()).format(Date())}&quot;&#10;    }&#10;&#10;    // 기록 제목 자동 생성&#10;    val recordTitle = if (isCompleted) {&#10;        &quot;금주 ${actualDays}일 달성 기록&quot;&#10;    } else {&#10;        &quot;금주 ${actualDays}일차 중단 기록&quot;&#10;    }&#10;&#10;    // 금주 기간 계산&#10;    val totalDuration = if (startTime &gt; 0) {&#10;        ((endTime - startTime) / (24 * 60 * 60 * 1000)).toInt()&#10;    } else {&#10;        actualDays&#10;    }&#10;&#10;    // 설정값 가져오기 (절약 금액/시간 계산용)&#10;    val sharedPref = context.getSharedPreferences(&quot;user_settings&quot;, Context.MODE_PRIVATE)&#10;    val selectedCost = sharedPref.getString(&quot;selected_cost&quot;, &quot;중&quot;) ?: &quot;중&quot;&#10;    val selectedFrequency = sharedPref.getString(&quot;selected_frequency&quot;, &quot;주 2~3회&quot;) ?: &quot;주 2~3회&quot;&#10;    val selectedDuration = sharedPref.getString(&quot;selected_duration&quot;, &quot;보통&quot;) ?: &quot;보통&quot;&#10;&#10;    // 절약 금액/시간 계산&#10;    val costVal = when(selectedCost) {&#10;        &quot;저&quot; -&gt; 10000&#10;        &quot;중&quot; -&gt; 40000&#10;        &quot;고&quot; -&gt; 70000&#10;        else -&gt; 40000&#10;    }&#10;&#10;    val freqVal = when(selectedFrequency) {&#10;        &quot;주 1회 이하&quot; -&gt; 1.0&#10;        &quot;주 2~3회&quot; -&gt; 2.5&#10;        &quot;주 4회 이상&quot; -&gt; 5.0&#10;        else -&gt; 2.5&#10;    }&#10;&#10;    val drinkHoursVal = when(selectedDuration) {&#10;        &quot;짧음&quot; -&gt; 2&#10;        &quot;보통&quot; -&gt; 4&#10;        &quot;김&quot; -&gt; 6&#10;        else -&gt; 4&#10;    }&#10;&#10;    val hangoverHoursVal = 5&#10;    val weeks = actualDays / 7.0&#10;    val savedMoney = (weeks * freqVal * costVal).roundToInt()&#10;    val savedHours = (weeks * freqVal * (drinkHoursVal + hangoverHoursVal)).roundToInt()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(24.dp)&#10;    ) {&#10;        // 헤더 영역&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // 뒤로가기 버튼&#10;            Box(&#10;                contentAlignment = Alignment.Center,&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(Color.LightGray, CircleShape)&#10;                    .clickable { onBack() }&#10;            ) {&#10;                Text(&#10;                    text = &quot;←&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Text(&#10;                text = &quot;금주 기록 상세&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(40.dp)) // 균형 맞추기&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // 날짜 및 시간&#10;        Text(&#10;            text = displayDateTime,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // 기록 제목&#10;        Text(&#10;            text = recordTitle,&#10;            fontSize = 20.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(40.dp))&#10;&#10;        // 주요 통계 영역&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            // 왼쪽 대형 숫자&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                horizontalAlignment = Alignment.Start&#10;            ) {&#10;                Text(&#10;                    text = actualDays.toString(),&#10;                    fontSize = 72.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.Black,&#10;                    lineHeight = 72.sp&#10;                )&#10;                Text(&#10;                    text = &quot;일&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;&#10;            // 오른쪽 성취 아이콘&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                Text(&#10;                    text = if (isCompleted) &quot;&quot; else &quot;⏸️&quot;,&#10;                    fontSize = 60.sp&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = if (isCompleted) &quot;목표 달성&quot; else &quot;중단됨&quot;,&#10;                    fontSize = 14.sp,&#10;                    color = if (isCompleted) Color(0xFF4CAF50) else Color(0xFFFF9800),&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // 서브 통계 (2줄 배치)&#10;        Column {&#10;            // 첫 번째 줄&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                CardSubStatItem(&#10;                    value = &quot;${totalDuration}일&quot;,&#10;                    label = &quot;총 금주 기간&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                CardSubStatItem(&#10;                    value = String.format(Locale.getDefault(), &quot;%,d원&quot;, savedMoney),&#10;                    label = &quot;절약한 금액&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                CardSubStatItem(&#10;                    value = &quot;${savedHours}시간&quot;,&#10;                    label = &quot;절약한 시간&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // 두 번째 줄&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                CardSubStatItem(&#10;                    value = &quot;${((actualDays.toFloat() / targetDays) * 100).roundToInt()}%&quot;,&#10;                    label = &quot;목표 달성률&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                CardSubStatItem(&#10;                    value = getLevelName(actualDays),&#10;                    label = &quot;달성 레벨&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                CardSubStatItem(&#10;                    value = &quot;${(actualDays / 30.0).roundToInt()}일&quot;,&#10;                    label = &quot;기대 수명 증가&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // 하단 버튼&#10;        Button(&#10;            onClick = { onBack() },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp),&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = Color.Black&#10;            )&#10;        ) {&#10;            Text(&#10;                text = &quot;확인&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CardSubStatItem(&#10;    value: String,&#10;    label: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier.padding(horizontal = 8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = value,&#10;            fontSize = 18.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color.Black,&#10;            textAlign = TextAlign.Center&#10;        )&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;        Text(&#10;            text = label,&#10;            fontSize = 12.sp,&#10;            color = Color.Gray,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;// 레벨명 함수&#10;private fun getLevelName(days: Int): String {&#10;    return when {&#10;        days &lt; 7 -&gt; &quot;시작&quot;&#10;        days &lt; 30 -&gt; &quot;작심 7일&quot;&#10;        days &lt; 90 -&gt; &quot;한 달 클리어&quot;&#10;        days &lt; 365 -&gt; &quot;3개월 클리어&quot;&#10;        else -&gt; &quot;절제의 레전드&quot;&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewCardDetailScreen() {&#10;    CardDetailScreen(&#10;        startTime = System.currentTimeMillis() - (7 * 24 * 60 * 60 * 1000L),&#10;        endTime = System.currentTimeMillis(),&#10;        targetDays = 30f,&#10;        actualDays = 7,&#10;        isCompleted = true,&#10;        onBack = {}&#10;    )&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import android.util.Log&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;import kotlin.math.roundToInt&#10;&#10;/**&#10; * 금주 기록 카드의 상세 정보를 표시하는 액티비티&#10; * DetailActivity와 구분하여 카드 클릭 시 표시되는 화면으로 사용&#10; */&#10;class CardDetailActivity : ComponentActivity() {&#10;&#10;    companion object {&#10;        private const val TAG = &quot;CardDetailActivity&quot;&#10;    }&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        Log.d(TAG, &quot;===== CardDetailActivity onCreate 시작 =====&quot;)&#10;&#10;        try {&#10;            // Intent에서 데이터 받기 (안전한 방식으로)&#10;            val startTime = intent.getLongExtra(&quot;start_time&quot;, 0L)&#10;            val endTime = intent.getLongExtra(&quot;end_time&quot;, System.currentTimeMillis())&#10;            val targetDays = intent.getFloatExtra(&quot;target_days&quot;, 30f)&#10;            val actualDays = intent.getIntExtra(&quot;actual_days&quot;, 0)&#10;            val isCompleted = intent.getBooleanExtra(&quot;is_completed&quot;, false)&#10;&#10;            Log.d(TAG, &quot;수신된 데이터: startTime=$startTime, endTime=$endTime, targetDays=$targetDays, actualDays=$actualDays, isCompleted=$isCompleted&quot;)&#10;&#10;            // 데이터 유효성 검사 (더 관대하게)&#10;            if (actualDays &lt; 0) {&#10;                Log.e(TAG, &quot;잘못된 데이터: actualDays=$actualDays&quot;)&#10;                finish()&#10;                return&#10;            }&#10;            &#10;            // targetDays가 0 이하인 경우 기본값으로 설정&#10;            val safeTargetDays = if (targetDays &lt;= 0) 30f else targetDays&#10;            // actualDays가 0인 경우도 허용하되, 최소 1로 계산에 사용&#10;            val safeActualDays = if (actualDays &lt;= 0) 1 else actualDays&#10;            &#10;            Log.d(TAG, &quot;안전한 값들: targetDays=$safeTargetDays, actualDays=$safeActualDays&quot;)&#10;&#10;            Log.d(TAG, &quot;setContent 호출 시작...&quot;)&#10;            setContent {&#10;                CardDetailScreen(&#10;                    startTime = startTime,&#10;                    endTime = endTime,&#10;                    targetDays = safeTargetDays,&#10;                    actualDays = safeActualDays,&#10;                    isCompleted = isCompleted,&#10;                    onBack = {&#10;                        Log.d(TAG, &quot;뒤로가기 버튼 클릭&quot;)&#10;                        finish()&#10;                    }&#10;                )&#10;            }&#10;            Log.d(TAG, &quot;setContent 호출 완료&quot;)&#10;            Log.d(TAG, &quot;===== CardDetailActivity onCreate 완료 =====&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;CardDetailActivity 초기화 중 오류&quot;, e)&#10;            Log.e(TAG, &quot;오류 스택트레이스: ${e.stackTraceToString()}&quot;)&#10;            finish()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun CardDetailScreen(&#10;    startTime: Long,&#10;    endTime: Long,&#10;    targetDays: Float,&#10;    actualDays: Int,&#10;    isCompleted: Boolean,&#10;    onBack: () -&gt; Unit&#10;) {&#10;    val context = LocalContext.current&#10;&#10;    // 날짜/시간 포맷&#10;    val dateTimeFormat = SimpleDateFormat(&quot;yyyy-MM-dd - a h:mm&quot;, Locale.getDefault())&#10;    val displayDateTime = if (startTime &gt; 0) {&#10;        dateTimeFormat.format(Date(startTime))&#10;    } else {&#10;        &quot;오늘 - ${SimpleDateFormat(&quot;a h:mm&quot;, Locale.getDefault()).format(Date())}&quot;&#10;    }&#10;&#10;    // 기록 제목 자동 생성&#10;    val recordTitle = if (isCompleted) {&#10;        &quot;금주 ${actualDays}일 달성 기록&quot;&#10;    } else {&#10;        &quot;금주 ${actualDays}일차 중단 기록&quot;&#10;    }&#10;&#10;    // 금주 기간 계산&#10;    val totalDuration = if (startTime &gt; 0) {&#10;        ((endTime - startTime) / (24 * 60 * 60 * 1000)).toInt()&#10;    } else {&#10;        actualDays&#10;    }&#10;&#10;    // 설정값 가져오기 (절약 금액/시간 계산용)&#10;    val sharedPref = context.getSharedPreferences(&quot;user_settings&quot;, Context.MODE_PRIVATE)&#10;    val selectedCost = sharedPref.getString(&quot;selected_cost&quot;, &quot;중&quot;) ?: &quot;중&quot;&#10;    val selectedFrequency = sharedPref.getString(&quot;selected_frequency&quot;, &quot;주 2~3회&quot;) ?: &quot;주 2~3회&quot;&#10;    val selectedDuration = sharedPref.getString(&quot;selected_duration&quot;, &quot;보통&quot;) ?: &quot;보통&quot;&#10;&#10;    // 절약 금액/시간 계산&#10;    val costVal = when(selectedCost) {&#10;        &quot;저&quot; -&gt; 10000&#10;        &quot;중&quot; -&gt; 40000&#10;        &quot;고&quot; -&gt; 70000&#10;        else -&gt; 40000&#10;    }&#10;&#10;    val freqVal = when(selectedFrequency) {&#10;        &quot;주 1회 이하&quot; -&gt; 1.0&#10;        &quot;주 2~3회&quot; -&gt; 2.5&#10;        &quot;주 4회 이상&quot; -&gt; 5.0&#10;        else -&gt; 2.5&#10;    }&#10;&#10;    val drinkHoursVal = when(selectedDuration) {&#10;        &quot;짧음&quot; -&gt; 2&#10;        &quot;보통&quot; -&gt; 4&#10;        &quot;김&quot; -&gt; 6&#10;        else -&gt; 4&#10;    }&#10;&#10;    val hangoverHoursVal = 5&#10;    val weeks = actualDays / 7.0&#10;    val savedMoney = (weeks * freqVal * costVal).roundToInt()&#10;    val savedHours = (weeks * freqVal * (drinkHoursVal + hangoverHoursVal)).roundToInt()&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(Color.White)&#10;            .padding(24.dp)&#10;    ) {&#10;        // 헤더 영역&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically&#10;        ) {&#10;            // 뒤로가기 버튼&#10;            Box(&#10;                contentAlignment = Alignment.Center,&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(Color.LightGray, CircleShape)&#10;                    .clickable { onBack() }&#10;            ) {&#10;                Text(&#10;                    text = &quot;←&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            Text(&#10;                text = &quot;금주 기록 상세&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold&#10;            )&#10;&#10;            Spacer(modifier = Modifier.width(40.dp)) // 균형 맞추기&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // 날짜 및 시간&#10;        Text(&#10;            text = displayDateTime,&#10;            fontSize = 16.sp,&#10;            color = Color.Gray,&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(8.dp))&#10;&#10;        // 기록 제목&#10;        Text(&#10;            text = recordTitle,&#10;            fontSize = 20.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            modifier = Modifier.fillMaxWidth()&#10;        )&#10;&#10;        Spacer(modifier = Modifier.height(40.dp))&#10;&#10;        // 주요 통계 영역&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            // 왼쪽 대형 숫자&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                horizontalAlignment = Alignment.Start&#10;            ) {&#10;                Text(&#10;                    text = actualDays.toString(),&#10;                    fontSize = 72.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.Black,&#10;                    lineHeight = 72.sp&#10;                )&#10;                Text(&#10;                    text = &quot;일&quot;,&#10;                    fontSize = 16.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;&#10;            // 오른쪽 성취 아이콘&#10;            Column(&#10;                modifier = Modifier.weight(1f),&#10;                horizontalAlignment = Alignment.End&#10;            ) {&#10;                Text(&#10;                    text = if (isCompleted) &quot;&quot; else &quot;⏸️&quot;,&#10;                    fontSize = 60.sp&#10;                )&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;                Text(&#10;                    text = if (isCompleted) &quot;목표 달성&quot; else &quot;중단됨&quot;,&#10;                    fontSize = 14.sp,&#10;                    color = if (isCompleted) Color(0xFF4CAF50) else Color(0xFFFF9800),&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(32.dp))&#10;&#10;        // 서브 통계 (2줄 배치)&#10;        Column {&#10;            // 첫 번째 줄&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                CardSubStatItem(&#10;                    value = &quot;${totalDuration}일&quot;,&#10;                    label = &quot;총 금주 기간&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                CardSubStatItem(&#10;                    value = String.format(Locale.getDefault(), &quot;%,d원&quot;, savedMoney),&#10;                    label = &quot;절약한 금액&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                CardSubStatItem(&#10;                    value = &quot;${savedHours}시간&quot;,&#10;                    label = &quot;절약한 시간&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // 두 번째 줄&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceEvenly&#10;            ) {&#10;                CardSubStatItem(&#10;                    value = &quot;${((actualDays.toFloat() / targetDays) * 100).roundToInt()}%&quot;,&#10;                    label = &quot;목표 달성률&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                CardSubStatItem(&#10;                    value = getLevelName(actualDays),&#10;                    label = &quot;달성 레벨&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;                CardSubStatItem(&#10;                    value = &quot;${(actualDays / 30.0).roundToInt()}일&quot;,&#10;                    label = &quot;기대 수명 증가&quot;,&#10;                    modifier = Modifier.weight(1f)&#10;                )&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.weight(1f))&#10;&#10;        // 하단 버튼&#10;        Button(&#10;            onClick = { onBack() },&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .height(56.dp),&#10;            colors = ButtonDefaults.buttonColors(&#10;                containerColor = Color.Black&#10;            )&#10;        ) {&#10;            Text(&#10;                text = &quot;확인&quot;,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CardSubStatItem(&#10;    value: String,&#10;    label: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier.padding(horizontal = 8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = value,&#10;            fontSize = 18.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color.Black,&#10;            textAlign = TextAlign.Center&#10;        )&#10;        Spacer(modifier = Modifier.height(4.dp))&#10;        Text(&#10;            text = label,&#10;            fontSize = 12.sp,&#10;            color = Color.Gray,&#10;            textAlign = TextAlign.Center&#10;        )&#10;    }&#10;}&#10;&#10;// 레벨명 함수&#10;private fun getLevelName(days: Int): String {&#10;    return when {&#10;        days &lt; 7 -&gt; &quot;시작&quot;&#10;        days &lt; 30 -&gt; &quot;작심 7일&quot;&#10;        days &lt; 90 -&gt; &quot;한 달 클리어&quot;&#10;        days &lt; 365 -&gt; &quot;3개월 클리어&quot;&#10;        else -&gt; &quot;절제의 레전드&quot;&#10;    }&#10;}&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun PreviewCardDetailScreen() {&#10;    CardDetailScreen(&#10;        startTime = System.currentTimeMillis() - (7 * 24 * 60 * 60 * 1000L),&#10;        endTime = System.currentTimeMillis(),&#10;        targetDays = 30f,&#10;        actualDays = 7,&#10;        isCompleted = true,&#10;        onBack = {}&#10;    )&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/MainActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;&#10;class MainActivity : BaseActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 금주 타이머가 진행 중인지 확인하고 적절한 화면으로 이동&#10;        checkCurrentStateAndNavigate()&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 타이머&quot;&#10;&#10;    @Composable&#10;    private fun MainScreen() {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            Text(&#10;                text = &quot;Alcoholic Timer&quot;,&#10;                fontSize = 24.sp,&#10;                modifier = Modifier.padding(bottom = 16.dp)&#10;            )&#10;            Button(onClick = {&#10;                val intent = Intent(this@MainActivity, StartActivity::class.java)&#10;                startActivity(intent)&#10;            }) {&#10;                Text(&quot;시작하기&quot;)&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun checkCurrentStateAndNavigate() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val isSobrietyStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        if (isSobrietyStarted) {&#10;            // 금주가 진행 중이면 StatusActivity로 이동&#10;            val intent = Intent(this, StatusActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP)&#10;            startActivity(intent)&#10;            overridePendingTransition(0, 0)&#10;        } else {&#10;            // 금주가 시작되지 않았으면 StartActivity로 이동&#10;            val intent = Intent(this, StartActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP)&#10;            startActivity(intent)&#10;            overridePendingTransition(0, 0)&#10;        }&#10;        // MainActivity는 백스택에서 제거&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewMainScreen() {&#10;        MainScreen()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#13;&#10;&#13;&#10;import android.content.Intent&#13;&#10;import android.os.Bundle&#13;&#10;import androidx.activity.compose.setContent&#13;&#10;import androidx.compose.foundation.layout.*&#13;&#10;import androidx.compose.material3.*&#13;&#10;import androidx.compose.runtime.Composable&#13;&#10;import androidx.compose.ui.Alignment&#13;&#10;import androidx.compose.ui.Modifier&#13;&#10;import androidx.compose.ui.tooling.preview.Preview&#13;&#10;import androidx.compose.ui.unit.dp&#13;&#10;import androidx.compose.ui.unit.sp&#13;&#10;&#13;&#10;class MainActivity : BaseActivity() {&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;&#13;&#10;        // 금주 타이머가 진행 중인지 확인하고 적절한 화면으로 이동&#13;&#10;        checkCurrentStateAndNavigate()&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun getScreenTitle(): String = &quot;금주 타이머&quot;&#13;&#10;&#13;&#10;    @Composable&#13;&#10;    private fun MainScreen() {&#13;&#10;        Column(&#13;&#10;            modifier = Modifier&#13;&#10;                .fillMaxSize()&#13;&#10;                .padding(16.dp),&#13;&#10;            horizontalAlignment = Alignment.CenterHorizontally&#13;&#10;        ) {&#13;&#10;            Text(&#13;&#10;                text = &quot;Alcoholic Timer&quot;,&#13;&#10;                fontSize = 24.sp,&#13;&#10;                modifier = Modifier.padding(bottom = 16.dp)&#13;&#10;            )&#13;&#10;            Button(onClick = {&#13;&#10;                val intent = Intent(this@MainActivity, StartActivity::class.java)&#13;&#10;                startActivity(intent)&#13;&#10;            }) {&#13;&#10;                Text(&quot;시작하기&quot;)&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private fun checkCurrentStateAndNavigate() {&#13;&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#13;&#10;        val isSobrietyStarted = sharedPref.contains(&quot;start_time&quot;)&#13;&#10;&#13;&#10;        if (isSobrietyStarted) {&#13;&#10;            // 금주가 진행 중이면 RunActivity로 이동&#13;&#10;            val intent = Intent(this, RunActivity::class.java)&#13;&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP)&#13;&#10;            startActivity(intent)&#13;&#10;            overridePendingTransition(0, 0)&#13;&#10;        } else {&#13;&#10;            // 금주가 시작되지 않았으면 StartActivity로 이동&#13;&#10;            val intent = Intent(this, StartActivity::class.java)&#13;&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP)&#13;&#10;            startActivity(intent)&#13;&#10;            overridePendingTransition(0, 0)&#13;&#10;        }&#13;&#10;        // MainActivity는 백스택에서 제거&#13;&#10;        finish()&#13;&#10;        overridePendingTransition(0, 0)&#13;&#10;    }&#13;&#10;&#13;&#10;    @Preview(showBackground = true)&#13;&#10;    @Composable&#13;&#10;    fun PreviewMainScreen() {&#13;&#10;        MainScreen()&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/NoPasteEditText.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/NoPasteEditText.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.ClipboardManager&#10;import android.content.Context&#10;import android.util.AttributeSet&#10;import android.view.ActionMode&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import android.view.inputmethod.EditorInfo&#10;import android.view.inputmethod.InputConnection&#10;import android.widget.EditText&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.material3.TextField&#10;import androidx.compose.material3.Text&#10;import androidx.compose.material3.MaterialTheme&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.unit.dp&#10;&#10;/**&#10; * 붙여넣기 기능이 비활성화된 커스텀 EditText&#10; */&#10;class NoPasteEditText : EditText {&#10;    constructor(context: Context) : super(context) {&#10;        init()&#10;    }&#10;&#10;    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs) {&#10;        init()&#10;    }&#10;&#10;    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {&#10;        init()&#10;    }&#10;&#10;    private fun init() {&#10;        // 길게 누르기 비활성화&#10;        isLongClickable = false&#10;&#10;        // 텍스트 선택 비활성화&#10;        setTextIsSelectable(false)&#10;&#10;        // 컨텍스트 메뉴 비활성화&#10;        customSelectionActionModeCallback = object : ActionMode.Callback {&#10;            override fun onCreateActionMode(mode: ActionMode?, menu: Menu?): Boolean = false&#10;            override fun onPrepareActionMode(mode: ActionMode?, menu: Menu?): Boolean = false&#10;            override fun onActionItemClicked(mode: ActionMode?, item: MenuItem?): Boolean = false&#10;            override fun onDestroyActionMode(mode: ActionMode?) {}&#10;        }&#10;    }&#10;&#10;    override fun onTextContextMenuItem(id: Int): Boolean {&#10;        // 모든 컨텍스트 메뉴 항목(붙여넣기, 복사 등) 차단&#10;        return false&#10;    }&#10;&#10;    override fun onCreateInputConnection(outAttrs: EditorInfo): InputConnection {&#10;        val connection = super.onCreateInputConnection(outAttrs)&#10;&#10;        // IME 옵션 설정&#10;        outAttrs.imeOptions = outAttrs.imeOptions or&#10;                EditorInfo.IME_FLAG_NO_EXTRACT_UI or&#10;                EditorInfo.IME_FLAG_NO_FULLSCREEN&#10;&#10;        return connection&#10;    }&#10;&#10;    // 붙여넣기 방지를 위해 모든 입력 시도를 추가로 검사&#10;    override fun onTextChanged(text: CharSequence?, start: Int, lengthBefore: Int, lengthAfter: Int) {&#10;        super.onTextChanged(text, start, lengthBefore, lengthAfter)&#10;&#10;        // 텍스트가 한 번에 여러 자리 추가되는 경우 (붙여넣기로 추정)&#10;        if (lengthAfter &gt; 1 &amp;&amp; lengthBefore == 0) {&#10;            val currentText = this.text.toString()&#10;            if (start == 0 &amp;&amp; currentText.length &gt; 1) {&#10;                // 마지막 숫자만 유지&#10;                setText(currentText.substring(currentText.length - 1))&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Jetpack Compose 기반으로 UI를 완전히 전환한 경우, 이 파일은 더 이상 필요하지 않으므로 삭제해도 됩니다.&#10;// 만약 붙여넣기 방지 기능이 Compose에서 필요하다면, Compose용 커스텀 TextField를 별도로 구현해야 합니다.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java" />
              <option name="updatedContent" value="package com.example.alcoholictimer;&#10;&#10;import android.os.Bundle;&#10;import android.widget.TextView;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import java.util.Calendar;&#10;&#10;public class RecordSummaryActivity extends AppCompatActivity {&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_record_summary);&#10;&#10;        // ...existing code...&#10;&#10;        TextView tvRecordTitle = findViewById(R.id.tvRecordTitle);&#10;        // 예시: 현재 월을 기록 종료 시점의 월로 사용합니다.&#10;        int month = Calendar.getInstance().get(Calendar.MONTH) + 1;&#10;        tvRecordTitle.setText(String.format(&quot;%d월의 금주&quot;, month));&#10;&#10;        // ...existing code...&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordsActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordsActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import org.json.JSONArray&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;data class SobrietyRecord(&#10;    val id: String,&#10;    val startTime: Long,&#10;    val endTime: Long,&#10;    val targetDays: Int,&#10;    val actualDays: Int,&#10;    val isCompleted: Boolean,&#10;    val status: String,&#10;    val createdAt: Long&#10;)&#10;&#10;class RecordsActivity : BaseActivity() {&#10;&#10;    // 디버깅용 태그&#10;    private val TAG = &quot;RecordsActivity&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                RecordsScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 기록&quot;&#10;&#10;    @Composable&#10;    private fun RecordsScreen() {&#10;        val context = LocalContext.current&#10;        var records by remember { mutableStateOf&lt;List&lt;SobrietyRecord&gt;&gt;(emptyList()) }&#10;        var selectedPeriod by remember { mutableStateOf(&quot;월&quot;) } // 선택된 기간 상태 추가&#10;        var selectedRange by remember { mutableStateOf(&quot;전체&quot;) } // 드롭다운 선택 상태 추가&#10;&#10;        // 기록 로드&#10;        LaunchedEffect(Unit) {&#10;            records = loadSobrietyRecords(context)&#10;            Log.d(TAG, &quot;로드된 기록: ${records.size}개&quot;)&#10;&#10;            // 기록이 없으면 테스트용 더미 데이터 추가&#10;            if (records.isEmpty()) {&#10;                Log.d(TAG, &quot;기록이 없어서 테스트용 더미 데이터 추가&quot;)&#10;                records = listOf(&#10;                    SobrietyRecord(&#10;                        id = &quot;test1&quot;,&#10;                        startTime = System.currentTimeMillis() - (7 * 24 * 60 * 60 * 1000L),&#10;                        endTime = System.currentTimeMillis(),&#10;                        targetDays = 30,&#10;                        actualDays = 7,&#10;                        isCompleted = false,&#10;                        status = &quot;중단됨&quot;,&#10;                        createdAt = System.currentTimeMillis()&#10;                    ),&#10;                    SobrietyRecord(&#10;                        id = &quot;test2&quot;,&#10;                        startTime = System.currentTimeMillis() - (10 * 24 * 60 * 60 * 1000L),&#10;                        endTime = System.currentTimeMillis() - (3 * 24 * 60 * 60 * 1000L),&#10;                        targetDays = 14,&#10;                        actualDays = 14,&#10;                        isCompleted = true,&#10;                        status = &quot;완료&quot;,&#10;                        createdAt = System.currentTimeMillis() - (3 * 24 * 60 * 60 * 1000L)&#10;                    )&#10;                )&#10;                Log.d(TAG, &quot;더미 데이터 추가 완료: ${records.size}개&quot;)&#10;                records.forEach { record -&gt;&#10;                    Log.d(TAG, &quot;더미 데이터: id=${record.id}, actualDays=${record.actualDays}, targetDays=${record.targetDays}&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // 상단: 기간 선택 탭 섹션&#10;            item {&#10;                PeriodSelectionSection(&#10;                    selectedPeriod = selectedPeriod,&#10;                    onPeriodSelected = {&#10;                        selectedPeriod = it&#10;                        // 기간이 바뀌면 드롭다운 기본값도 변경&#10;                        selectedRange = when (it) {&#10;                            &quot;주&quot; -&gt; &quot;이번 주&quot;&#10;                            &quot;월&quot; -&gt; &quot;2025년&quot;&#10;                            &quot;년&quot; -&gt; &quot;2025년&quot;&#10;                            &quot;전체&quot; -&gt; &quot;2025년&quot;&#10;                            else -&gt; &quot;전체&quot;&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;&#10;            // 통계 카드들을 별도 아이템으로 빼내기&#10;            item {&#10;                StatisticsCardsSection(&#10;                    records = records,&#10;                    selectedPeriod = selectedPeriod,&#10;                    selectedRange = selectedRange,&#10;                    onRangeSelected = { selectedRange = it }&#10;                )&#10;            }&#10;&#10;            // 그래프 섹션을 별도 아이템으로 분리&#10;            item {&#10;                GraphSection(records = records, selectedPeriod = selectedPeriod)&#10;            }&#10;&#10;            // 하단: 최근 활동 섹션 헤더&#10;            item {&#10;                Text(&#10;                    text = &quot;최근 활동&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            if (records.isEmpty()) {&#10;                // 기록이 없을 때&#10;                item {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(containerColor = Color(0xFFF5F5F5))&#10;                    ) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(32.dp),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;아직 금주 기록이 없습니다.\n첫 번째 금주를 시작해보세요!&quot;,&#10;                                fontSize = 16.sp,&#10;                                color = Color.Gray,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // 기록이 있을 때 각 카드를 개별 아이템으로 표시&#10;                items(records) { record -&gt;&#10;                    SobrietyRecordCard(&#10;                        record = record,&#10;                        onClick = { handleCardClick(record) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun handleCardClick(record: SobrietyRecord) {&#10;        Log.d(TAG, &quot;===== 카드 클릭 시작 =====&quot;)&#10;        Log.d(TAG, &quot;카드 클릭: ${record.id}&quot;)&#10;        Log.d(TAG, &quot;actualDays=${record.actualDays}, targetDays=${record.targetDays}&quot;)&#10;        Log.d(TAG, &quot;startTime=${record.startTime}, endTime=${record.endTime}&quot;)&#10;        Log.d(TAG, &quot;isCompleted=${record.isCompleted}&quot;)&#10;&#10;        try {&#10;            // 데이터 유효성 검사 (더 관대하게)&#10;            if (record.actualDays &lt; 0) {&#10;                Log.e(TAG, &quot;잘못된 기록 데이터: actualDays=${record.actualDays}&quot;)&#10;                return&#10;            }&#10;&#10;            Log.d(TAG, &quot;Intent 생성 시작...&quot;)&#10;&#10;            // targetDays가 0이면 기본값으로 설정&#10;            val safeTargetDays = if (record.targetDays &lt;= 0) 30 else record.targetDays&#10;&#10;            // DetailActivity로 이동&#10;            val intent = Intent(this@RecordsActivity, DetailActivity::class.java)&#10;            intent.putExtra(&quot;start_time&quot;, record.startTime)&#10;            intent.putExtra(&quot;end_time&quot;, record.endTime)&#10;            intent.putExtra(&quot;target_days&quot;, safeTargetDays.toFloat())&#10;            intent.putExtra(&quot;actual_days&quot;, record.actualDays)&#10;            intent.putExtra(&quot;is_completed&quot;, record.isCompleted)&#10;&#10;            Log.d(TAG, &quot;Intent 데이터 전달: targetDays=$safeTargetDays, actualDays=${record.actualDays}&quot;)&#10;            Log.d(TAG, &quot;DetailActivity 호출...&quot;)&#10;            startActivity(intent)&#10;            Log.d(TAG, &quot;startActivity 호출 완료&quot;)&#10;            Log.d(TAG, &quot;===== 카드 클릭 종료 =====&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;CardDetail 화면 이동 중 오류&quot;, e)&#10;            Log.e(TAG, &quot;오류 스택트레이스: ${e.stackTraceToString()}&quot;)&#10;        }&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewRecordsScreen() {&#10;        BaseScreen {&#10;            RecordsScreen()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SobrietyRecordCard(&#10;    record: SobrietyRecord,&#10;    onClick: () -&gt; Unit = {}&#10;) {&#10;    val dateFormatter = SimpleDateFormat(&quot;yyyy.MM.dd&quot;, Locale.getDefault())&#10;    val timeFormatter = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault())&#10;&#10;    val startDate = dateFormatter.format(Date(record.startTime))&#10;    val endDate = dateFormatter.format(Date(record.endTime))&#10;    val startTime = timeFormatter.format(Date(record.startTime))&#10;    val endTime = timeFormatter.format(Date(record.endTime))&#10;&#10;    val duration = record.endTime - record.startTime&#10;    val durationDays = (duration / (24 * 60 * 60 * 1000)).toInt()&#10;    val durationHours = ((duration % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000)).toInt()&#10;    val durationMinutes = ((duration % (60 * 60 * 1000)) / (60 * 1000)).toInt()&#10;&#10;    val progressPercent = if (record.targetDays &gt; 0) {&#10;        ((record.actualDays.toFloat() / record.targetDays) * 100).toInt()&#10;    } else 0&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(4.dp)&#10;            .clickable { onClick() }, // 클릭 이벤트 추가&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (record.isCompleted) Color(0xFFE8F5E8) else Color(0xFFFFF3CD)&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            // 상단: 상태와 날짜&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // 상태 배지&#10;                Surface(&#10;                    color = if (record.isCompleted) Color(0xFF4CAF50) else Color(0xFFFF9800),&#10;                    shape = RoundedCornerShape(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = record.status,&#10;                        color = Color.White,&#10;                        fontSize = 12.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp)&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = if (startDate == endDate) startDate else &quot;$startDate ~ $endDate&quot;,&#10;                    fontSize = 14.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // 중앙: 주요 정보&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                // 왼쪽: 달성 일수&#10;                Column {&#10;                    Text(&#10;                        text = &quot;${record.actualDays}일&quot;,&#10;                        fontSize = 24.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.Black&#10;                    )&#10;                    Text(&#10;                        text = &quot;달성&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                }&#10;&#10;                // 중앙: 목표 대비 진행률&#10;                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                    Text(&#10;                        text = &quot;${progressPercent}%&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = if (record.isCompleted) Color(0xFF4CAF50) else Color(0xFFFF9800)&#10;                    )&#10;                    Text(&#10;                        text = &quot;목표 달성률&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                }&#10;&#10;                // 오른쪽: 목표 일수&#10;                Column(horizontalAlignment = Alignment.End) {&#10;                    Text(&#10;                        text = &quot;${record.targetDays}일&quot;,&#10;                        fontSize = 24.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.Black&#10;                    )&#10;                    Text(&#10;                        text = &quot;목표&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // 하단: 상세 정보&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;시작: $startTime&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;                Text(&#10;                    text = &quot;종료: $endTime&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;&#10;            if (durationDays &gt; 0 || durationHours &gt; 0 || durationMinutes &gt; 0) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;지속 시간: ${durationDays}일 ${durationHours}시간 ${durationMinutes}분&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun loadSobrietyRecords(context: android.content.Context): List&lt;SobrietyRecord&gt; {&#10;    return try {&#10;        val sharedPref = context.getSharedPreferences(&quot;user_settings&quot;, android.content.Context.MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;sobriety_records&quot;, &quot;[]&quot;) ?: &quot;[]&quot;&#10;        val jsonArray = JSONArray(recordsJson)&#10;&#10;        val records = mutableListOf&lt;SobrietyRecord&gt;()&#10;        for (i in 0 until jsonArray.length()) {&#10;            val jsonObject = jsonArray.getJSONObject(i)&#10;            records.add(&#10;                SobrietyRecord(&#10;                    id = jsonObject.getString(&quot;id&quot;),&#10;                    startTime = jsonObject.getLong(&quot;startTime&quot;),&#10;                    endTime = jsonObject.getLong(&quot;endTime&quot;),&#10;                    targetDays = jsonObject.getInt(&quot;targetDays&quot;),&#10;                    actualDays = jsonObject.getInt(&quot;actualDays&quot;),&#10;                    isCompleted = jsonObject.getBoolean(&quot;isCompleted&quot;),&#10;                    status = jsonObject.getString(&quot;status&quot;),&#10;                    createdAt = jsonObject.getLong(&quot;createdAt&quot;)&#10;                )&#10;            )&#10;        }&#10;&#10;        // 최신 순으로 정렬&#10;        records.sortedByDescending { it.createdAt }&#10;    } catch (_: Exception) {&#10;        emptyList()&#10;    }&#10;}&#10;&#10;// 상단: 기간 선택 탭 섹션&#10;@Composable&#10;fun PeriodSelectionSection(&#10;    selectedPeriod: String,&#10;    onPeriodSelected: (String) -&gt; Unit&#10;) {&#10;    val periods = listOf(&quot;주&quot;, &quot;월&quot;, &quot;년&quot;, &quot;전체&quot;)&#10;&#10;    // Card 배경 제거하고 바로 Row로 구성&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(&#10;                Color(0xFFE0E0E0),&#10;                RoundedCornerShape(25.dp)&#10;            )&#10;            .padding(4.dp),&#10;        horizontalArrangement = Arrangement.SpaceEvenly&#10;    ) {&#10;        periods.forEach { period -&gt;&#10;            val isSelected = period == selectedPeriod&#10;            Box(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .background(&#10;                        if (isSelected) Color.Black else Color.Transparent,&#10;                        RoundedCornerShape(20.dp)&#10;                    )&#10;                    .clickable { onPeriodSelected(period) }&#10;                    .padding(vertical = 8.dp),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = period,&#10;                    color = if (isSelected) Color.White else Color.Black,&#10;                    fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal,&#10;                    fontSize = 14.sp&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// 중단: 통계 및 그래프 섹션&#10;@Composable&#10;fun StatisticsCardsSection(&#10;    records: List&lt;SobrietyRecord&gt;,&#10;    selectedPeriod: String,&#10;    selectedRange: String,&#10;    onRangeSelected: (String) -&gt; Unit&#10;) {&#10;    val totalDays = records.sumOf { it.actualDays }&#10;    val completedCount = records.count { it.isCompleted }&#10;    val totalAttempts = records.size&#10;    val successRate = if (totalAttempts &gt; 0) (completedCount * 100) / totalAttempts else 0&#10;&#10;    // 드롭다운 메뉴 항목 생성 함수&#10;    fun getDropdownItems(period: String): List&lt;String&gt; {&#10;        val now = Calendar.getInstance()&#10;        return when (period) {&#10;            &quot;주&quot; -&gt; listOf(&#10;                &quot;이번 주&quot;,&#10;                &quot;지난 주&quot;,&#10;                &quot;07-20 ~ 07-26&quot;,&#10;                &quot;07-13 ~ 07-19&quot;&#10;            )&#10;            &quot;월&quot; -&gt; listOf(&#10;                &quot;2025년&quot;, &quot;2024년&quot;, &quot;8월&quot;, &quot;7월&quot;&#10;            )&#10;            &quot;년&quot; -&gt; listOf(&#10;                &quot;2025년&quot;, &quot;2024년&quot;&#10;            )&#10;            &quot;전체&quot; -&gt; listOf(&#10;                &quot;2025년&quot;, &quot;2024년 - 2025년&quot;&#10;            )&#10;            else -&gt; listOf(&quot;전체&quot;)&#10;        }&#10;    }&#10;&#10;    var expanded by remember { mutableStateOf(false) }&#10;    val dropdownItems = getDropdownItems(selectedPeriod)&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        // 텍스트 드롭다운 (왼쪽 정렬)&#10;        Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.TopStart) {&#10;            Text(&#10;                text = selectedRange,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier&#10;                    .clickable(enabled = selectedPeriod != &quot;전체&quot;) { if (selectedPeriod != &quot;전체&quot;) expanded = true }&#10;                    .padding(vertical = 8.dp)&#10;            )&#10;            if (selectedPeriod != &quot;전체&quot;) {&#10;                DropdownMenu(&#10;                    expanded = expanded,&#10;                    onDismissRequest = { expanded = false },&#10;                    modifier = Modifier.width(180.dp)&#10;                ) {&#10;                    dropdownItems.forEach { item -&gt;&#10;                        DropdownMenuItem(&#10;                            text = { Text(item) },&#10;                            onClick = {&#10;                                onRangeSelected(item)&#10;                                expanded = false&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // 상단 통계 카드들&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceEvenly&#10;        ) {&#10;            StatCard(&#10;                title = &quot;총 금주일&quot;,&#10;                value = &quot;${totalDays}일&quot;,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatCard(&#10;                title = &quot;성공률&quot;,&#10;                value = &quot;${successRate}%&quot;,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatCard(&#10;                title = &quot;시도 횟수&quot;,&#10;                value = &quot;${totalAttempts}회&quot;,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;// 그래프 섹션을 별도 아이템으로 분리&#10;@Composable&#10;fun GraphSection(records: List&lt;SobrietyRecord&gt;, selectedPeriod: String) {&#10;    // 실제 그래프 표시&#10;    MiniBarChart(&#10;        records = records,&#10;        selectedPeriod = selectedPeriod,&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(150.dp)&#10;    )&#10;}&#10;&#10;// 간단한 미니 막대 그래프 컴포저블 추가&#10;@Composable&#10;fun MiniBarChart(&#10;    records: List&lt;SobrietyRecord&gt;,&#10;    selectedPeriod: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    // 선택된 기간에 따라 그래프 데이터 생성&#10;    val graphData = when (selectedPeriod) {&#10;        &quot;주&quot; -&gt; generateWeeklyGraphData(records)&#10;        &quot;월&quot; -&gt; generateMonthlyGraphData(records)&#10;        &quot;년&quot; -&gt; generateYearlyGraphData(records)&#10;        &quot;전체&quot; -&gt; generateAllTimeGraphData(records)&#10;        else -&gt; generateWeeklyGraphData(records)&#10;    }&#10;&#10;    Box(modifier = modifier) {&#10;        Canvas(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            if (graphData.isEmpty()) return@Canvas&#10;&#10;            val canvasWidth = size.width&#10;            val canvasHeight = size.height&#10;&#10;            // 여백 설정&#10;            val leftMargin = 40.dp.toPx()&#10;            val rightMargin = 20.dp.toPx()&#10;            val topMargin = 20.dp.toPx()&#10;            val bottomMargin = 40.dp.toPx()&#10;&#10;            val chartWidth = canvasWidth - leftMargin - rightMargin&#10;            val chartHeight = canvasHeight - topMargin - bottomMargin&#10;&#10;            // Y축 가로선 그리기 (값 0, 0.5, 1에 해당하는 위치)&#10;            val yLines = listOf(0f, 0.5f, 1f)&#10;            yLines.forEach { value -&gt;&#10;                val y = topMargin + chartHeight - (value * chartHeight)&#10;                drawLine(&#10;                    color = Color.Gray.copy(alpha = 0.3f),&#10;                    start = Offset(leftMargin, y),&#10;                    end = Offset(leftMargin + chartWidth, y),&#10;                    strokeWidth = 1.dp.toPx()&#10;                )&#10;            }&#10;&#10;            // Y축 선&#10;            drawLine(&#10;                color = Color.Gray,&#10;                start = Offset(leftMargin, topMargin),&#10;                end = Offset(leftMargin, topMargin + chartHeight),&#10;                strokeWidth = 2.dp.toPx()&#10;            )&#10;&#10;            // X축 선&#10;            drawLine(&#10;                color = Color.Gray,&#10;                start = Offset(leftMargin, topMargin + chartHeight),&#10;                end = Offset(leftMargin + chartWidth, topMargin + chartHeight),&#10;                strokeWidth = 2.dp.toPx()&#10;            )&#10;&#10;            // 막대 그래프&#10;            val barWidth = chartWidth / graphData.size * 0.7f&#10;            val barSpacing = chartWidth / graphData.size * 0.3f&#10;&#10;            graphData.forEachIndexed { index, item -&gt;&#10;                val barHeight = if (item.value &gt; 0) chartHeight * 0.6f else 0f&#10;                val x = leftMargin + (index * (barWidth + barSpacing)) + barSpacing / 2&#10;                val y = topMargin + chartHeight - barHeight&#10;&#10;                // 막대 그리기&#10;                drawRect(&#10;                    color = if (item.value &gt; 0) Color(0xFF4CAF50) else Color(0xFFE0E0E0),&#10;                    topLeft = Offset(x, y),&#10;                    size = androidx.compose.ui.geometry.Size(barWidth, barHeight)&#10;                )&#10;            }&#10;        }&#10;&#10;        // X축 레이블&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .align(Alignment.BottomCenter)&#10;                .padding(bottom = 5.dp)&#10;                .padding(horizontal = 40.dp),&#10;            horizontalArrangement = Arrangement.SpaceEvenly&#10;        ) {&#10;            graphData.forEachIndexed { index, item -&gt;&#10;                val shouldShowLabel = when (selectedPeriod) {&#10;                    &quot;주&quot; -&gt; true&#10;                    &quot;월&quot; -&gt; index % 5 == 0 || index == graphData.size - 1&#10;                    &quot;년&quot; -&gt; true&#10;                    &quot;전체&quot; -&gt; true&#10;                    else -&gt; true&#10;                }&#10;&#10;                if (shouldShowLabel) {&#10;                    Text(&#10;                        text = item.label,&#10;                        fontSize = 10.sp,&#10;                        color = Color.Gray,&#10;                        modifier = Modifier.weight(1f),&#10;                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                    )&#10;                } else {&#10;                    Spacer(modifier = Modifier.weight(1f))&#10;                }&#10;            }&#10;        }&#10;&#10;        // Y축 레이블&#10;        Column(&#10;            modifier = Modifier&#10;                .align(Alignment.CenterStart)&#10;                .padding(start = 10.dp),&#10;            verticalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;1&quot;,&#10;                fontSize = 10.sp,&#10;                color = Color.Gray&#10;            )&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Text(&#10;                text = &quot;0&quot;,&#10;                fontSize = 10.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;// 최근 7일간의 그래프 데이터 생성 함수&#10;private fun generateWeeklyGraphData(records: List&lt;SobrietyRecord&gt;): List&lt;SimpleGraphData&gt; {&#10;    val calendar = Calendar.getInstance()&#10;    val weekDays = listOf(&quot;월&quot;, &quot;화&quot;, &quot;수&quot;, &quot;목&quot;, &quot;금&quot;, &quot;토&quot;, &quot;일&quot;)&#10;    val completedRecords = records.filter { it.isCompleted }&#10;&#10;    // 이번 주 월요일부터 시작&#10;    calendar.firstDayOfWeek = Calendar.MONDAY&#10;    calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY)&#10;    calendar.set(Calendar.HOUR_OF_DAY, 0)&#10;    calendar.set(Calendar.MINUTE, 0)&#10;    calendar.set(Calendar.SECOND, 0)&#10;    calendar.set(Calendar.MILLISECOND, 0)&#10;&#10;    val weekStart = calendar.timeInMillis&#10;&#10;    return weekDays.mapIndexed { index, dayName -&gt;&#10;        val dayStart = weekStart + (index * 24 * 60 * 60 * 1000L)&#10;        val dayEnd = dayStart + (24 * 60 * 60 * 1000L)&#10;&#10;        val hasSuccess = completedRecords.any { record -&gt;&#10;            record.startTime &gt;= dayStart &amp;&amp; record.startTime &lt; dayEnd&#10;        }&#10;&#10;        SimpleGraphData(dayName, if (hasSuccess) 1 else 0)&#10;    }&#10;}&#10;&#10;// 최근 30일간의 그래프 데이터 생성 함수&#10;private fun generateMonthlyGraphData(records: List&lt;SobrietyRecord&gt;): List&lt;SimpleGraphData&gt; {&#10;    val calendar = Calendar.getInstance()&#10;    val monthNames = listOf(&quot;1월&quot;, &quot;2월&quot;, &quot;3월&quot;, &quot;4월&quot;, &quot;5월&quot;, &quot;6월&quot;, &quot;7월&quot;, &quot;8월&quot;, &quot;9월&quot;, &quot;10월&quot;, &quot;11월&quot;, &quot;12월&quot;)&#10;    val completedRecords = records.filter { it.isCompleted }&#10;&#10;    // 이번 달 1일자로 설정&#10;    calendar.set(Calendar.DAY_OF_MONTH, 1)&#10;    calendar.set(Calendar.HOUR_OF_DAY, 0)&#10;    calendar.set(Calendar.MINUTE, 0)&#10;    calendar.set(Calendar.SECOND, 0)&#10;    calendar.set(Calendar.MILLISECOND, 0)&#10;&#10;    val monthStart = calendar.timeInMillis&#10;&#10;    return monthNames.mapIndexed { index, monthName -&gt;&#10;        val monthStartTime = monthStart + (index * 30 * 24 * 60 * 60 * 1000L)&#10;        val monthEndTime = monthStartTime + (30 * 24 * 60 * 60 * 1000L)&#10;&#10;        val hasSuccess = completedRecords.any { record -&gt;&#10;            record.startTime &gt;= monthStartTime &amp;&amp; record.startTime &lt; monthEndTime&#10;        }&#10;&#10;        SimpleGraphData(monthName, if (hasSuccess) 1 else 0)&#10;    }.take(12) // 최근 12개월만 표시&#10;}&#10;&#10;// 최근 1년간의 그래프 데이터 생성 함수&#10;private fun generateYearlyGraphData(records: List&lt;SobrietyRecord&gt;): List&lt;SimpleGraphData&gt; {&#10;    val calendar = Calendar.getInstance()&#10;    val completedRecords = records.filter { it.isCompleted }&#10;&#10;    // 올해 1월 1일자로 설정&#10;    calendar.set(Calendar.MONTH, Calendar.JANUARY)&#10;    calendar.set(Calendar.DAY_OF_MONTH, 1)&#10;    calendar.set(Calendar.HOUR_OF_DAY, 0)&#10;    calendar.set(Calendar.MINUTE, 0)&#10;    calendar.set(Calendar.SECOND, 0)&#10;    calendar.set(Calendar.MILLISECOND, 0)&#10;&#10;    val yearStart = calendar.timeInMillis&#10;&#10;    // 최근 1년간의 월별 데이터 생성&#10;    return (0 until 12).map { monthOffset -&gt;&#10;        val monthStart = yearStart + (monthOffset * 30 * 24 * 60 * 60 * 1000L)&#10;        val monthEnd = monthStart + (30 * 24 * 60 * 60 * 1000L)&#10;&#10;        val hasSuccess = completedRecords.any { record -&gt;&#10;            record.startTime &gt;= monthStart &amp;&amp; record.startTime &lt; monthEnd&#10;        }&#10;&#10;        SimpleGraphData(&quot;${monthOffset + 1}월&quot;, if (hasSuccess) 1 else 0)&#10;    }&#10;}&#10;&#10;// 전체 기간에 대한 그래프 데이터 생성 함수&#10;private fun generateAllTimeGraphData(records: List&lt;SobrietyRecord&gt;): List&lt;SimpleGraphData&gt; {&#10;    val completedRecords = records.filter { it.isCompleted }&#10;&#10;    return listOf(&#10;        SimpleGraphData(&quot;전체&quot;, if (completedRecords.isNotEmpty()) 1 else 0)&#10;    )&#10;}&#10;&#10;// RecordsActivity 전용 간단한 그래프 데이터 클래스&#10;data class SimpleGraphData(&#10;    val label: String,&#10;    val value: Int // 0 또는 1 (성공 여부)&#10;)&#10;&#10;@Composable&#10;fun StatCard(&#10;    title: String,&#10;    value: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier.padding(horizontal = 8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = value,&#10;            fontSize = 20.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color.Black&#10;        )&#10;        Text(&#10;            text = title,&#10;            fontSize = 12.sp,&#10;            color = Color.Gray&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.Canvas&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowForward&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.geometry.Offset&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import org.json.JSONArray&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;data class SobrietyRecord(&#10;    val id: String,&#10;    val startTime: Long,&#10;    val endTime: Long,&#10;    val targetDays: Int,&#10;    val actualDays: Int,&#10;    val isCompleted: Boolean,&#10;    val status: String,&#10;    val createdAt: Long&#10;)&#10;&#10;class RecordsActivity : BaseActivity() {&#10;&#10;    // 디버깅용 태그&#10;    private val TAG = &quot;RecordsActivity&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            BaseScreen {&#10;                RecordsScreen()&#10;            }&#10;        }&#10;    }&#10;&#10;    override fun getScreenTitle(): String = &quot;금주 기록&quot;&#10;&#10;    @Composable&#10;    private fun RecordsScreen() {&#10;        val context = LocalContext.current&#10;        var records by remember { mutableStateOf&lt;List&lt;SobrietyRecord&gt;&gt;(emptyList()) }&#10;        var selectedPeriod by remember { mutableStateOf(&quot;월&quot;) } // 선택된 기간 상태 추가&#10;        var selectedRange by remember { mutableStateOf(&quot;전체&quot;) } // 드롭다운 선택 상태 추가&#10;&#10;        // 기록 로드&#10;        LaunchedEffect(Unit) {&#10;            records = loadSobrietyRecords(context)&#10;            Log.d(TAG, &quot;로드된 기록: ${records.size}개&quot;)&#10;&#10;            // 기록이 없으면 테스트용 더미 데이터 추가&#10;            if (records.isEmpty()) {&#10;                Log.d(TAG, &quot;기록이 없어서 테스트용 더미 데이터 추가&quot;)&#10;                records = listOf(&#10;                    SobrietyRecord(&#10;                        id = &quot;test1&quot;,&#10;                        startTime = System.currentTimeMillis() - (7 * 24 * 60 * 60 * 1000L),&#10;                        endTime = System.currentTimeMillis(),&#10;                        targetDays = 30,&#10;                        actualDays = 7,&#10;                        isCompleted = false,&#10;                        status = &quot;중단됨&quot;,&#10;                        createdAt = System.currentTimeMillis()&#10;                    ),&#10;                    SobrietyRecord(&#10;                        id = &quot;test2&quot;,&#10;                        startTime = System.currentTimeMillis() - (10 * 24 * 60 * 60 * 1000L),&#10;                        endTime = System.currentTimeMillis() - (3 * 24 * 60 * 60 * 1000L),&#10;                        targetDays = 14,&#10;                        actualDays = 14,&#10;                        isCompleted = true,&#10;                        status = &quot;완료&quot;,&#10;                        createdAt = System.currentTimeMillis() - (3 * 24 * 60 * 60 * 1000L)&#10;                    )&#10;                )&#10;                Log.d(TAG, &quot;더미 데이터 추가 완료: ${records.size}개&quot;)&#10;                records.forEach { record -&gt;&#10;                    Log.d(TAG, &quot;더미 데이터: id=${record.id}, actualDays=${record.actualDays}, targetDays=${record.targetDays}&quot;)&#10;                }&#10;            }&#10;        }&#10;&#10;        LazyColumn(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            // 상단: 기간 선택 탭 섹션&#10;            item {&#10;                PeriodSelectionSection(&#10;                    selectedPeriod = selectedPeriod,&#10;                    onPeriodSelected = {&#10;                        selectedPeriod = it&#10;                        // 기간이 바뀌면 드롭다운 기본값도 변경&#10;                        selectedRange = when (it) {&#10;                            &quot;주&quot; -&gt; &quot;이번 주&quot;&#10;                            &quot;월&quot; -&gt; &quot;2025년&quot;&#10;                            &quot;년&quot; -&gt; &quot;2025년&quot;&#10;                            &quot;전체&quot; -&gt; &quot;2025년&quot;&#10;                            else -&gt; &quot;전체&quot;&#10;                        }&#10;                    }&#10;                )&#10;            }&#10;&#10;            // 통계 카드들을 별도 아이템으로 빼내기&#10;            item {&#10;                StatisticsCardsSection(&#10;                    records = records,&#10;                    selectedPeriod = selectedPeriod,&#10;                    selectedRange = selectedRange,&#10;                    onRangeSelected = { selectedRange = it }&#10;                )&#10;            }&#10;&#10;            // 그래프 섹션을 별도 아이템으로 분리&#10;            item {&#10;                GraphSection(records = records, selectedPeriod = selectedPeriod)&#10;            }&#10;&#10;            // 하단: 최근 활동 섹션 헤더&#10;            item {&#10;                Text(&#10;                    text = &quot;최근 활동&quot;,&#10;                    fontSize = 20.sp,&#10;                    fontWeight = FontWeight.Bold&#10;                )&#10;            }&#10;&#10;            if (records.isEmpty()) {&#10;                // 기록이 없을 때&#10;                item {&#10;                    Card(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        colors = CardDefaults.cardColors(containerColor = Color(0xFFF5F5F5))&#10;                    ) {&#10;                        Box(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(32.dp),&#10;                            contentAlignment = Alignment.Center&#10;                        ) {&#10;                            Text(&#10;                                text = &quot;아직 금주 기록이 없습니다.\n첫 번째 금주를 시작해보세요!&quot;,&#10;                                fontSize = 16.sp,&#10;                                color = Color.Gray,&#10;                                textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;            } else {&#10;                // 기록이 있을 때 각 카드를 개별 아이템으로 표시&#10;                items(records) { record -&gt;&#10;                    SobrietyRecordCard(&#10;                        record = record,&#10;                        onClick = { handleCardClick(record) }&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    private fun handleCardClick(record: SobrietyRecord) {&#10;        Log.d(TAG, &quot;===== 카드 클릭 시작 =====&quot;)&#10;        Log.d(TAG, &quot;카드 클릭: ${record.id}&quot;)&#10;        Log.d(TAG, &quot;actualDays=${record.actualDays}, targetDays=${record.targetDays}&quot;)&#10;        Log.d(TAG, &quot;startTime=${record.startTime}, endTime=${record.endTime}&quot;)&#10;        Log.d(TAG, &quot;isCompleted=${record.isCompleted}&quot;)&#10;&#10;        try {&#10;            // 데이터 유효성 검사 (더 관대하게)&#10;            if (record.actualDays &lt; 0) {&#10;                Log.e(TAG, &quot;잘못된 기록 데이터: actualDays=${record.actualDays}&quot;)&#10;                return&#10;            }&#10;&#10;            Log.d(TAG, &quot;Intent 생성 시작...&quot;)&#10;&#10;            // targetDays가 0이면 기본값으로 설정&#10;            val safeTargetDays = if (record.targetDays &lt;= 0) 30 else record.targetDays&#10;&#10;            // DetailActivity로 이동&#10;            val intent = Intent(this@RecordsActivity, DetailActivity::class.java)&#10;            intent.putExtra(&quot;start_time&quot;, record.startTime)&#10;            intent.putExtra(&quot;end_time&quot;, record.endTime)&#10;            intent.putExtra(&quot;target_days&quot;, safeTargetDays.toFloat())&#10;            intent.putExtra(&quot;actual_days&quot;, record.actualDays)&#10;            intent.putExtra(&quot;is_completed&quot;, record.isCompleted)&#10;&#10;            Log.d(TAG, &quot;Intent 데이터 전달: targetDays=$safeTargetDays, actualDays=${record.actualDays}&quot;)&#10;            Log.d(TAG, &quot;DetailActivity 호출...&quot;)&#10;            startActivity(intent)&#10;            Log.d(TAG, &quot;startActivity 호출 완료&quot;)&#10;            Log.d(TAG, &quot;===== 카드 클릭 종료 =====&quot;)&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;CardDetail 화면 이동 중 오류&quot;, e)&#10;            Log.e(TAG, &quot;오류 스택트레이스: ${e.stackTraceToString()}&quot;)&#10;        }&#10;    }&#10;&#10;    @Preview(showBackground = true)&#10;    @Composable&#10;    fun PreviewRecordsScreen() {&#10;        BaseScreen {&#10;            RecordsScreen()&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun SobrietyRecordCard(&#10;    record: SobrietyRecord,&#10;    onClick: () -&gt; Unit = {}&#10;) {&#10;    val dateFormatter = SimpleDateFormat(&quot;yyyy.MM.dd&quot;, Locale.getDefault())&#10;    val timeFormatter = SimpleDateFormat(&quot;HH:mm&quot;, Locale.getDefault())&#10;&#10;    val startDate = dateFormatter.format(Date(record.startTime))&#10;    val endDate = dateFormatter.format(Date(record.endTime))&#10;    val startTime = timeFormatter.format(Date(record.startTime))&#10;    val endTime = timeFormatter.format(Date(record.endTime))&#10;&#10;    val duration = record.endTime - record.startTime&#10;    val durationDays = (duration / (24 * 60 * 60 * 1000)).toInt()&#10;    val durationHours = ((duration % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000)).toInt()&#10;    val durationMinutes = ((duration % (60 * 60 * 1000)) / (60 * 1000)).toInt()&#10;&#10;    val progressPercent = if (record.targetDays &gt; 0) {&#10;        ((record.actualDays.toFloat() / record.targetDays) * 100).toInt()&#10;    } else 0&#10;&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(4.dp)&#10;            .clickable { onClick() }, // 클릭 이벤트 추가&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (record.isCompleted) Color(0xFFE8F5E8) else Color(0xFFFFF3CD)&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp),&#10;        shape = RoundedCornerShape(12.dp)&#10;    ) {&#10;        Column(&#10;            modifier = Modifier.padding(16.dp)&#10;        ) {&#10;            // 상단: 상태와 날짜&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                // 상태 배지&#10;                Surface(&#10;                    color = if (record.isCompleted) Color(0xFF4CAF50) else Color(0xFFFF9800),&#10;                    shape = RoundedCornerShape(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = record.status,&#10;                        color = Color.White,&#10;                        fontSize = 12.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        modifier = Modifier.padding(horizontal = 12.dp, vertical = 4.dp)&#10;                    )&#10;                }&#10;&#10;                Text(&#10;                    text = if (startDate == endDate) startDate else &quot;$startDate ~ $endDate&quot;,&#10;                    fontSize = 14.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // 중앙: 주요 정보&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                // 왼쪽: 달성 일수&#10;                Column {&#10;                    Text(&#10;                        text = &quot;${record.actualDays}일&quot;,&#10;                        fontSize = 24.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.Black&#10;                    )&#10;                    Text(&#10;                        text = &quot;달성&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                }&#10;&#10;                // 중앙: 목표 대비 진행률&#10;                Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;                    Text(&#10;                        text = &quot;${progressPercent}%&quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = if (record.isCompleted) Color(0xFF4CAF50) else Color(0xFFFF9800)&#10;                    )&#10;                    Text(&#10;                        text = &quot;목표 달성률&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                }&#10;&#10;                // 오른쪽: 목표 일수&#10;                Column(horizontalAlignment = Alignment.End) {&#10;                    Text(&#10;                        text = &quot;${record.targetDays}일&quot;,&#10;                        fontSize = 24.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = Color.Black&#10;                    )&#10;                    Text(&#10;                        text = &quot;목표&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = Color.Gray&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(12.dp))&#10;&#10;            // 하단: 상세 정보&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween&#10;            ) {&#10;                Text(&#10;                    text = &quot;시작: $startTime&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;                Text(&#10;                    text = &quot;종료: $endTime&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;&#10;            if (durationDays &gt; 0 || durationHours &gt; 0 || durationMinutes &gt; 0) {&#10;                Spacer(modifier = Modifier.height(4.dp))&#10;                Text(&#10;                    text = &quot;지속 시간: ${durationDays}일 ${durationHours}시간 ${durationMinutes}분&quot;,&#10;                    fontSize = 12.sp,&#10;                    color = Color.Gray&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;private fun loadSobrietyRecords(context: android.content.Context): List&lt;SobrietyRecord&gt; {&#10;    return try {&#10;        val sharedPref = context.getSharedPreferences(&quot;user_settings&quot;, android.content.Context.MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;sobriety_records&quot;, &quot;[]&quot;) ?: &quot;[]&quot;&#10;        val jsonArray = JSONArray(recordsJson)&#10;&#10;        val records = mutableListOf&lt;SobrietyRecord&gt;()&#10;        for (i in 0 until jsonArray.length()) {&#10;            val jsonObject = jsonArray.getJSONObject(i)&#10;            records.add(&#10;                SobrietyRecord(&#10;                    id = jsonObject.getString(&quot;id&quot;),&#10;                    startTime = jsonObject.getLong(&quot;startTime&quot;),&#10;                    endTime = jsonObject.getLong(&quot;endTime&quot;),&#10;                    targetDays = jsonObject.getInt(&quot;targetDays&quot;),&#10;                    actualDays = jsonObject.getInt(&quot;actualDays&quot;),&#10;                    isCompleted = jsonObject.getBoolean(&quot;isCompleted&quot;),&#10;                    status = jsonObject.getString(&quot;status&quot;),&#10;                    createdAt = jsonObject.getLong(&quot;createdAt&quot;)&#10;                )&#10;            )&#10;        }&#10;&#10;        // 최신 순으로 정렬&#10;        records.sortedByDescending { it.createdAt }&#10;    } catch (_: Exception) {&#10;        emptyList()&#10;    }&#10;}&#10;&#10;// 상단: 기간 선택 탭 섹션&#10;@Composable&#10;fun PeriodSelectionSection(&#10;    selectedPeriod: String,&#10;    onPeriodSelected: (String) -&gt; Unit&#10;) {&#10;    val periods = listOf(&quot;주&quot;, &quot;월&quot;, &quot;년&quot;, &quot;전체&quot;)&#10;&#10;    // Card 배경 제거하고 바로 Row로 구성&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .background(&#10;                Color(0xFFE0E0E0),&#10;                RoundedCornerShape(25.dp)&#10;            )&#10;            .padding(4.dp),&#10;        horizontalArrangement = Arrangement.SpaceEvenly&#10;    ) {&#10;        periods.forEach { period -&gt;&#10;            val isSelected = period == selectedPeriod&#10;            Box(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .background(&#10;                        if (isSelected) Color.Black else Color.Transparent,&#10;                        RoundedCornerShape(20.dp)&#10;                    )&#10;                    .clickable { onPeriodSelected(period) }&#10;                    .padding(vertical = 8.dp),&#10;                contentAlignment = Alignment.Center&#10;            ) {&#10;                Text(&#10;                    text = period,&#10;                    color = if (isSelected) Color.White else Color.Black,&#10;                    fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal,&#10;                    fontSize = 14.sp&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// 중단: 통계 및 그래프 섹션&#10;@Composable&#10;fun StatisticsCardsSection(&#10;    records: List&lt;SobrietyRecord&gt;,&#10;    selectedPeriod: String,&#10;    selectedRange: String,&#10;    onRangeSelected: (String) -&gt; Unit&#10;) {&#10;    val totalDays = records.sumOf { it.actualDays }&#10;    val completedCount = records.count { it.isCompleted }&#10;    val totalAttempts = records.size&#10;    val successRate = if (totalAttempts &gt; 0) (completedCount * 100) / totalAttempts else 0&#10;&#10;    // 드롭다운 메뉴 항목 생성 함수&#10;    fun getDropdownItems(period: String): List&lt;String&gt; {&#10;        val now = Calendar.getInstance()&#10;        return when (period) {&#10;            &quot;주&quot; -&gt; listOf(&#10;                &quot;이번 주&quot;,&#10;                &quot;지난 주&quot;,&#10;                &quot;07-20 ~ 07-26&quot;,&#10;                &quot;07-13 ~ 07-19&quot;&#10;            )&#10;            &quot;월&quot; -&gt; listOf(&#10;                &quot;2025년&quot;, &quot;2024년&quot;, &quot;8월&quot;, &quot;7월&quot;&#10;            )&#10;            &quot;년&quot; -&gt; listOf(&#10;                &quot;2025년&quot;, &quot;2024년&quot;&#10;            )&#10;            &quot;전체&quot; -&gt; listOf(&#10;                &quot;2025년&quot;, &quot;2024년 - 2025년&quot;&#10;            )&#10;            else -&gt; listOf(&quot;전체&quot;)&#10;        }&#10;    }&#10;&#10;    var expanded by remember { mutableStateOf(false) }&#10;    val dropdownItems = getDropdownItems(selectedPeriod)&#10;&#10;    Column(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(16.dp)&#10;    ) {&#10;        // 텍스트 드롭다운 (왼쪽 정렬)&#10;        Box(modifier = Modifier.fillMaxWidth(), contentAlignment = Alignment.TopStart) {&#10;            Text(&#10;                text = selectedRange,&#10;                fontSize = 18.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                modifier = Modifier&#10;                    .clickable(enabled = selectedPeriod != &quot;전체&quot;) { if (selectedPeriod != &quot;전체&quot;) expanded = true }&#10;                    .padding(vertical = 8.dp)&#10;            )&#10;            if (selectedPeriod == &quot;월&quot;) {&#10;                // 월일 때 2컬럼 드롭다운&#10;                val years = listOf(&quot;2025년&quot;, &quot;2024년&quot;)&#10;                val months = listOf(&quot;8월&quot;, &quot;7월&quot;, &quot;6월&quot;, &quot;5월&quot;, &quot;4월&quot;, &quot;3월&quot;, &quot;2월&quot;, &quot;1월&quot;)&#10;                var selectedYear by remember { mutableStateOf(years.first()) }&#10;                DropdownMenu(&#10;                    expanded = expanded,&#10;                    onDismissRequest = { expanded = false },&#10;                    modifier = Modifier.width(260.dp)&#10;                ) {&#10;                    Row(modifier = Modifier.padding(8.dp)) {&#10;                        // 년도 선택&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            years.forEach { year -&gt;&#10;                                Text(&#10;                                    text = year,&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .clickable {&#10;                                            selectedYear = year&#10;                                        }&#10;                                        .padding(8.dp),&#10;                                    fontWeight = if (selectedYear == year) FontWeight.Bold else FontWeight.Normal&#10;                                )&#10;                            }&#10;                        }&#10;                        // 월 선택&#10;                        Column(modifier = Modifier.weight(1f)) {&#10;                            months.forEach { month -&gt;&#10;                                Text(&#10;                                    text = month,&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .clickable {&#10;                                            onRangeSelected(&quot;$selectedYear $month&quot;)&#10;                                            expanded = false&#10;                                        }&#10;                                        .padding(8.dp),&#10;                                    fontWeight = FontWeight.Normal&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            } else if (selectedPeriod != &quot;전체&quot;) {&#10;                DropdownMenu(&#10;                    expanded = expanded,&#10;                    onDismissRequest = { expanded = false },&#10;                    modifier = Modifier.width(180.dp)&#10;                ) {&#10;                    dropdownItems.forEach { item -&gt;&#10;                        DropdownMenuItem(&#10;                            text = { Text(item) },&#10;                            onClick = {&#10;                                onRangeSelected(item)&#10;                                expanded = false&#10;                            }&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;        // 상단 통계 카드들&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.SpaceEvenly&#10;        ) {&#10;            StatCard(&#10;                title = &quot;총 금주일&quot;,&#10;                value = &quot;${totalDays}일&quot;,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatCard(&#10;                title = &quot;성공률&quot;,&#10;                value = &quot;${successRate}%&quot;,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;            StatCard(&#10;                title = &quot;시도 횟수&quot;,&#10;                value = &quot;${totalAttempts}회&quot;,&#10;                modifier = Modifier.weight(1f)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;// 그래프 섹션을 별도 아이템으로 분리&#10;@Composable&#10;fun GraphSection(records: List&lt;SobrietyRecord&gt;, selectedPeriod: String) {&#10;    // 실제 그래프 표시&#10;    MiniBarChart(&#10;        records = records,&#10;        selectedPeriod = selectedPeriod,&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(150.dp)&#10;    )&#10;}&#10;&#10;// 간단한 미니 막대 그래프 컴포저블 추가&#10;@Composable&#10;fun MiniBarChart(&#10;    records: List&lt;SobrietyRecord&gt;,&#10;    selectedPeriod: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    // 선택된 기간에 따라 그래프 데이터 생성&#10;    val graphData = when (selectedPeriod) {&#10;        &quot;주&quot; -&gt; generateWeeklyGraphData(records)&#10;        &quot;월&quot; -&gt; generateMonthlyGraphData(records)&#10;        &quot;년&quot; -&gt; generateYearlyGraphData(records)&#10;        &quot;전체&quot; -&gt; generateAllTimeGraphData(records)&#10;        else -&gt; generateWeeklyGraphData(records)&#10;    }&#10;&#10;    Box(modifier = modifier) {&#10;        Canvas(&#10;            modifier = Modifier.fillMaxSize()&#10;        ) {&#10;            if (graphData.isEmpty()) return@Canvas&#10;&#10;            val canvasWidth = size.width&#10;            val canvasHeight = size.height&#10;&#10;            // 여백 설정&#10;            val leftMargin = 40.dp.toPx()&#10;            val rightMargin = 20.dp.toPx()&#10;            val topMargin = 20.dp.toPx()&#10;            val bottomMargin = 40.dp.toPx()&#10;&#10;            val chartWidth = canvasWidth - leftMargin - rightMargin&#10;            val chartHeight = canvasHeight - topMargin - bottomMargin&#10;&#10;            // Y축 가로선 그리기 (값 0, 0.5, 1에 해당하는 위치)&#10;            val yLines = listOf(0f, 0.5f, 1f)&#10;            yLines.forEach { value -&gt;&#10;                val y = topMargin + chartHeight - (value * chartHeight)&#10;                drawLine(&#10;                    color = Color.Gray.copy(alpha = 0.3f),&#10;                    start = Offset(leftMargin, y),&#10;                    end = Offset(leftMargin + chartWidth, y),&#10;                    strokeWidth = 1.dp.toPx()&#10;                )&#10;            }&#10;&#10;            // Y축 선&#10;            drawLine(&#10;                color = Color.Gray,&#10;                start = Offset(leftMargin, topMargin),&#10;                end = Offset(leftMargin, topMargin + chartHeight),&#10;                strokeWidth = 2.dp.toPx()&#10;            )&#10;&#10;            // X축 선&#10;            drawLine(&#10;                color = Color.Gray,&#10;                start = Offset(leftMargin, topMargin + chartHeight),&#10;                end = Offset(leftMargin + chartWidth, topMargin + chartHeight),&#10;                strokeWidth = 2.dp.toPx()&#10;            )&#10;&#10;            // 막대 그래프&#10;            val barWidth = chartWidth / graphData.size * 0.7f&#10;            val barSpacing = chartWidth / graphData.size * 0.3f&#10;&#10;            graphData.forEachIndexed { index, item -&gt;&#10;                val barHeight = if (item.value &gt; 0) chartHeight * 0.6f else 0f&#10;                val x = leftMargin + (index * (barWidth + barSpacing)) + barSpacing / 2&#10;                val y = topMargin + chartHeight - barHeight&#10;&#10;                // 막대 그리기&#10;                drawRect(&#10;                    color = if (item.value &gt; 0) Color(0xFF4CAF50) else Color(0xFFE0E0E0),&#10;                    topLeft = Offset(x, y),&#10;                    size = androidx.compose.ui.geometry.Size(barWidth, barHeight)&#10;                )&#10;            }&#10;        }&#10;&#10;        // X축 레이블&#10;        Row(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .align(Alignment.BottomCenter)&#10;                .padding(bottom = 5.dp)&#10;                .padding(horizontal = 40.dp),&#10;            horizontalArrangement = Arrangement.SpaceEvenly&#10;        ) {&#10;            graphData.forEachIndexed { index, item -&gt;&#10;                val shouldShowLabel = when (selectedPeriod) {&#10;                    &quot;주&quot; -&gt; true&#10;                    &quot;월&quot; -&gt; index % 5 == 0 || index == graphData.size - 1&#10;                    &quot;년&quot; -&gt; true&#10;                    &quot;전체&quot; -&gt; true&#10;                    else -&gt; true&#10;                }&#10;&#10;                if (shouldShowLabel) {&#10;                    Text(&#10;                        text = item.label,&#10;                        fontSize = 10.sp,&#10;                        color = Color.Gray,&#10;                        modifier = Modifier.weight(1f),&#10;                        textAlign = androidx.compose.ui.text.style.TextAlign.Center&#10;                    )&#10;                } else {&#10;                    Spacer(modifier = Modifier.weight(1f))&#10;                }&#10;            }&#10;        }&#10;&#10;        // Y축 레이블&#10;        Column(&#10;            modifier = Modifier&#10;                .align(Alignment.CenterStart)&#10;                .padding(start = 10.dp),&#10;            verticalArrangement = Arrangement.SpaceBetween&#10;        ) {&#10;            Text(&#10;                text = &quot;1&quot;,&#10;                fontSize = 10.sp,&#10;                color = Color.Gray&#10;            )&#10;            Spacer(modifier = Modifier.weight(1f))&#10;            Text(&#10;                text = &quot;0&quot;,&#10;                fontSize = 10.sp,&#10;                color = Color.Gray&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;// 최근 7일간의 그래프 데이터 생성 함수&#10;private fun generateWeeklyGraphData(records: List&lt;SobrietyRecord&gt;): List&lt;SimpleGraphData&gt; {&#10;    val calendar = Calendar.getInstance()&#10;    val weekDays = listOf(&quot;월&quot;, &quot;화&quot;, &quot;수&quot;, &quot;목&quot;, &quot;금&quot;, &quot;토&quot;, &quot;일&quot;)&#10;    val completedRecords = records.filter { it.isCompleted }&#10;&#10;    // 이번 주 월요일부터 시작&#10;    calendar.firstDayOfWeek = Calendar.MONDAY&#10;    calendar.set(Calendar.DAY_OF_WEEK, Calendar.MONDAY)&#10;    calendar.set(Calendar.HOUR_OF_DAY, 0)&#10;    calendar.set(Calendar.MINUTE, 0)&#10;    calendar.set(Calendar.SECOND, 0)&#10;    calendar.set(Calendar.MILLISECOND, 0)&#10;&#10;    val weekStart = calendar.timeInMillis&#10;&#10;    return weekDays.mapIndexed { index, dayName -&gt;&#10;        val dayStart = weekStart + (index * 24 * 60 * 60 * 1000L)&#10;        val dayEnd = dayStart + (24 * 60 * 60 * 1000L)&#10;&#10;        val hasSuccess = completedRecords.any { record -&gt;&#10;            record.startTime &gt;= dayStart &amp;&amp; record.startTime &lt; dayEnd&#10;        }&#10;&#10;        SimpleGraphData(dayName, if (hasSuccess) 1 else 0)&#10;    }&#10;}&#10;&#10;// 최근 30일간의 그래프 데이터 생성 함수&#10;private fun generateMonthlyGraphData(records: List&lt;SobrietyRecord&gt;): List&lt;SimpleGraphData&gt; {&#10;    val calendar = Calendar.getInstance()&#10;    val monthNames = listOf(&quot;1월&quot;, &quot;2월&quot;, &quot;3월&quot;, &quot;4월&quot;, &quot;5월&quot;, &quot;6월&quot;, &quot;7월&quot;, &quot;8월&quot;, &quot;9월&quot;, &quot;10월&quot;, &quot;11월&quot;, &quot;12월&quot;)&#10;    val completedRecords = records.filter { it.isCompleted }&#10;&#10;    // 이번 달 1일자로 설정&#10;    calendar.set(Calendar.DAY_OF_MONTH, 1)&#10;    calendar.set(Calendar.HOUR_OF_DAY, 0)&#10;    calendar.set(Calendar.MINUTE, 0)&#10;    calendar.set(Calendar.SECOND, 0)&#10;    calendar.set(Calendar.MILLISECOND, 0)&#10;&#10;    val monthStart = calendar.timeInMillis&#10;&#10;    return monthNames.mapIndexed { index, monthName -&gt;&#10;        val monthStartTime = monthStart + (index * 30 * 24 * 60 * 60 * 1000L)&#10;        val monthEndTime = monthStartTime + (30 * 24 * 60 * 60 * 1000L)&#10;&#10;        val hasSuccess = completedRecords.any { record -&gt;&#10;            record.startTime &gt;= monthStartTime &amp;&amp; record.startTime &lt; monthEndTime&#10;        }&#10;&#10;        SimpleGraphData(monthName, if (hasSuccess) 1 else 0)&#10;    }.take(12) // 최근 12개월만 표시&#10;}&#10;&#10;// 최근 1년간의 그래프 데이터 생성 함수&#10;private fun generateYearlyGraphData(records: List&lt;SobrietyRecord&gt;): List&lt;SimpleGraphData&gt; {&#10;    val calendar = Calendar.getInstance()&#10;    val completedRecords = records.filter { it.isCompleted }&#10;&#10;    // 올해 1월 1일자로 설정&#10;    calendar.set(Calendar.MONTH, Calendar.JANUARY)&#10;    calendar.set(Calendar.DAY_OF_MONTH, 1)&#10;    calendar.set(Calendar.HOUR_OF_DAY, 0)&#10;    calendar.set(Calendar.MINUTE, 0)&#10;    calendar.set(Calendar.SECOND, 0)&#10;    calendar.set(Calendar.MILLISECOND, 0)&#10;&#10;    val yearStart = calendar.timeInMillis&#10;&#10;    // 최근 1년간의 월별 데이터 생성&#10;    return (0 until 12).map { monthOffset -&gt;&#10;        val monthStart = yearStart + (monthOffset * 30 * 24 * 60 * 60 * 1000L)&#10;        val monthEnd = monthStart + (30 * 24 * 60 * 60 * 1000L)&#10;&#10;        val hasSuccess = completedRecords.any { record -&gt;&#10;            record.startTime &gt;= monthStart &amp;&amp; record.startTime &lt; monthEnd&#10;        }&#10;&#10;        SimpleGraphData(&quot;${monthOffset + 1}월&quot;, if (hasSuccess) 1 else 0)&#10;    }&#10;}&#10;&#10;// 전체 기간에 대한 그래프 데이터 생성 함수&#10;private fun generateAllTimeGraphData(records: List&lt;SobrietyRecord&gt;): List&lt;SimpleGraphData&gt; {&#10;    val completedRecords = records.filter { it.isCompleted }&#10;&#10;    return listOf(&#10;        SimpleGraphData(&quot;전체&quot;, if (completedRecords.isNotEmpty()) 1 else 0)&#10;    )&#10;}&#10;&#10;// RecordsActivity 전용 간단한 그래프 데이터 클래스&#10;data class SimpleGraphData(&#10;    val label: String,&#10;    val value: Int // 0 또는 1 (성공 여부)&#10;)&#10;&#10;@Composable&#10;fun StatCard(&#10;    title: String,&#10;    value: String,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Column(&#10;        modifier = modifier.padding(horizontal = 8.dp),&#10;        horizontalAlignment = Alignment.CenterHorizontally&#10;    ) {&#10;        Text(&#10;            text = value,&#10;            fontSize = 20.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = Color.Black&#10;        )&#10;        Text(&#10;            text = title,&#10;            fontSize = 12.sp,&#10;            color = Color.Gray&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java" />
              <option name="originalContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}&#10;" />
              <option name="updatedContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.model.RecentActivity&#10;&#10;class RecentActivityAdapter : RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;    private val activities = ArrayList&lt;RecentActivity&gt;()&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val ivActivityIcon: ImageView = itemView.findViewById(R.id.ivActivityIcon)&#10;        val tvEndDate: TextView = itemView.findViewById(R.id.tvEndDate)&#10;        val tvActivityTitle: TextView = itemView.findViewById(R.id.tvActivityTitle)&#10;        val tvDuration: TextView = itemView.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val tvSavedMoney: TextView = itemView.findViewById(R.id.tvSavedMoney)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        &#10;        holder.tvEndDate.text = activity.endDate&#10;        holder.tvActivityTitle.text = activity.title&#10;        holder.tvDuration.text = &quot;${activity.duration}일 ${activity.hours}시간&quot;&#10;        holder.tvStatus.text = if(activity.isSuccess) &quot;성공&quot; else &quot;실패&quot;&#10;        holder.tvSavedMoney.text = &quot;${activity.savedMoney}만원 절약&quot;&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;&#10;    fun updateActivities(newActivities: List&lt;RecentActivity&gt;) {&#10;        activities.clear()&#10;        activities.addAll(newActivities.take(5)) // 최대 5개까지만 표시&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/models/RecentActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/models/RecentActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer.models&#10;&#10;/**&#10; * 최근 활동 데이터 클래스&#10; * 금주 완료/중단 기록을 나타냅니다.&#10; */&#10;data class RecentActivity(&#10;    val startDate: String,&#10;    val endDate: String,&#10;    val title: String,&#10;    val duration: Int,&#10;    val hours: Int,&#10;    val isSuccess: Boolean,&#10;    val savedMoney: Int,&#10;    val testMode: Int&#10;) {&#10;    /**&#10;     * 표시용 상태 텍스트 반환&#10;     */&#10;    fun getDisplayStatus(): String {&#10;        return if (isSuccess) &quot;완료&quot; else &quot;중지&quot;&#10;    }&#10;&#10;    /**&#10;     * 성공률을 퍼센트로 반환&#10;     */&#10;    fun getSuccessRate(): Int {&#10;        return if (duration &gt; 0) {&#10;            ((hours / 24.0 / duration) * 100).toInt()&#10;        } else {&#10;            0&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer.models&#10;&#10;import org.json.JSONArray&#10;import org.json.JSONObject&#10;&#10;/**&#10; * 최근 활동 데이터 클래스&#10; * 금주 완료/중단 기록을 나타냅니다.&#10; */&#10;data class RecentActivity(&#10;    val startDate: String,&#10;    val endDate: String,&#10;    val title: String,&#10;    val duration: Int,&#10;    val hours: Int,&#10;    val isSuccess: Boolean,&#10;    val savedMoney: Int,&#10;    val testMode: Int&#10;) {&#10;    /**&#10;     * 표시용 상태 텍스트 반환&#10;     */&#10;    fun getDisplayStatus(): String {&#10;        return if (isSuccess) &quot;완료&quot; else &quot;중지&quot;&#10;    }&#10;&#10;    /**&#10;     * 성공률을 퍼센트로 반환&#10;     */&#10;    fun getSuccessRate(): Int {&#10;        return if (duration &gt; 0) {&#10;            ((hours / 24.0 / duration) * 100).toInt()&#10;        } else {&#10;            0&#10;        }&#10;    }&#10;&#10;    /**&#10;     * JSON 객체로 변환&#10;     */&#10;    fun toJson(): JSONObject {&#10;        return JSONObject().apply {&#10;            put(&quot;startDate&quot;, startDate)&#10;            put(&quot;endDate&quot;, endDate)&#10;            put(&quot;title&quot;, title)&#10;            put(&quot;duration&quot;, duration)&#10;            put(&quot;hours&quot;, hours)&#10;            put(&quot;isSuccess&quot;, isSuccess)&#10;            put(&quot;savedMoney&quot;, savedMoney)&#10;            put(&quot;testMode&quot;, testMode)&#10;        }&#10;    }&#10;&#10;    companion object {&#10;        /**&#10;         * JSON 객체에서 RecentActivity 생성&#10;         */&#10;        fun fromJson(json: JSONObject): RecentActivity {&#10;            return RecentActivity(&#10;                startDate = json.getString(&quot;startDate&quot;),&#10;                endDate = json.getString(&quot;endDate&quot;),&#10;                title = json.getString(&quot;title&quot;),&#10;                duration = json.getInt(&quot;duration&quot;),&#10;                hours = json.getInt(&quot;hours&quot;),&#10;                isSuccess = json.getBoolean(&quot;isSuccess&quot;),&#10;                savedMoney = json.getInt(&quot;savedMoney&quot;),&#10;                testMode = json.getInt(&quot;testMode&quot;)&#10;            )&#10;        }&#10;&#10;        /**&#10;         * JSON 배열 문자열에서 RecentActivity 리스트 생성&#10;         */&#10;        fun fromJsonArray(jsonString: String): List&lt;RecentActivity&gt; {&#10;            return try {&#10;                val jsonArray = JSONArray(jsonString)&#10;                val activities = mutableListOf&lt;RecentActivity&gt;()&#10;&#10;                for (i in 0 until jsonArray.length()) {&#10;                    val jsonObject = jsonArray.getJSONObject(i)&#10;                    activities.add(fromJson(jsonObject))&#10;                }&#10;&#10;                activities&#10;            } catch (e: Exception) {&#10;                emptyList()&#10;            }&#10;        }&#10;&#10;        /**&#10;         * RecentActivity 리스트를 JSON 배열 문자열로 변환&#10;         */&#10;        fun toJsonArray(activities: List&lt;RecentActivity&gt;): String {&#10;            return try {&#10;                val jsonArray = JSONArray()&#10;                activities.forEach { activity -&gt;&#10;                    jsonArray.put(activity.toJson())&#10;                }&#10;                jsonArray.toString()&#10;            } catch (e: Exception) {&#10;                &quot;[]&quot;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/RecordManager.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/RecordManager.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer.utils&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;object RecordManager {&#10;    private const val PREFS_NAME = &quot;recent_activities&quot;&#10;    private const val KEY_ACTIVITIES = &quot;activities&quot;&#10;&#10;    private lateinit var prefs: SharedPreferences&#10;&#10;    fun init(context: Context) {&#10;        prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;    }&#10;&#10;    fun addActivity(activity: RecentActivity) {&#10;        // 간단한 문자열 형태로 저장&#10;        val activities = getActivities().toMutableList()&#10;        activities.add(0, activity) // 최신 활동을 맨 앞에 추가&#10;&#10;        // 최대 5개만 유지&#10;        while (activities.size &gt; 5) {&#10;            activities.removeLast()&#10;        }&#10;&#10;        // 간단한 문자열 저장 방식 사용&#10;        val activitiesString = activities.joinToString(&quot;|&quot;) {&#10;            &quot;${it.startDate},${it.endDate},${it.duration},${it.isSuccess}&quot;&#10;        }&#10;        prefs.edit().putString(KEY_ACTIVITIES, activitiesString).apply()&#10;    }&#10;&#10;    fun getActivities(): List&lt;RecentActivity&gt; {&#10;        val activitiesString = prefs.getString(KEY_ACTIVITIES, &quot;&quot;) ?: &quot;&quot;&#10;        if (activitiesString.isEmpty()) return emptyList()&#10;&#10;        return activitiesString.split(&quot;|&quot;).mapNotNull { activityData -&gt;&#10;            val parts = activityData.split(&quot;,&quot;)&#10;            if (parts.size == 4) {&#10;                RecentActivity(&#10;                    startDate = parts[0],&#10;                    endDate = parts[1],&#10;                    duration = parts[2].toIntOrNull() ?: 0,&#10;                    isSuccess = parts[3].toBoolean()&#10;                )&#10;            } else null&#10;        }&#10;    }&#10;&#10;    fun clearActivities() {&#10;        prefs.edit().remove(KEY_ACTIVITIES).apply()&#10;    }&#10;&#10;    private fun getCurrentDate(): String {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        return dateFormat.format(Date())&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#10;&#10;import android.content.Context&#10;import android.content.SharedPreferences&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import java.text.SimpleDateFormat&#10;import java.util.*&#10;&#10;object RecordManager {&#10;    private const val PREFS_NAME = &quot;recent_activities&quot;&#10;    private const val KEY_ACTIVITIES = &quot;activities&quot;&#10;&#10;    private lateinit var prefs: SharedPreferences&#10;&#10;    fun init(context: Context) {&#10;        prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)&#10;    }&#10;&#10;    fun addActivity(activity: RecentActivity) {&#10;        // 간단한 문자열 형태로 저장&#10;        val activities = getActivities().toMutableList()&#10;        activities.add(0, activity) // 최신 활동을 맨 앞에 추가&#10;&#10;        // 최대 5개만 유지&#10;        while (activities.size &gt; 5) {&#10;            activities.removeLast()&#10;        }&#10;&#10;        // 간단한 문자열 저장 방식 사용&#10;        val activitiesString = activities.joinToString(&quot;|&quot;) {&#10;            &quot;${it.startDate},${it.endDate},${it.duration},${it.isSuccess}&quot;&#10;        }&#10;        prefs.edit().putString(KEY_ACTIVITIES, activitiesString).apply()&#10;    }&#10;&#10;    fun getActivities(): List&lt;RecentActivity&gt; {&#10;        val activitiesString = prefs.getString(KEY_ACTIVITIES, &quot;&quot;) ?: &quot;&quot;&#10;        if (activitiesString.isEmpty()) return emptyList()&#10;&#10;        return activitiesString.split(&quot;|&quot;).mapNotNull { activityData -&gt;&#10;            val parts = activityData.split(&quot;,&quot;)&#10;            if (parts.size == 4) {&#10;                RecentActivity(&#10;                    startDate = parts[0],&#10;                    endDate = parts[1],&#10;                    title = &quot;금주 챌린지&quot;, // 기본 제목 추가&#10;                    duration = parts[2].toIntOrNull() ?: 0,&#10;                    hours = 0, // 기본값 추가&#10;                    isSuccess = parts[3].toBoolean(),&#10;                    savedMoney = 0, // 기본값 추가&#10;                    testMode = 0 // 기본값 추가&#10;                )&#10;            } else null&#10;        }&#10;    }&#10;&#10;    fun clearActivities() {&#10;        prefs.edit().remove(KEY_ACTIVITIES).apply()&#10;    }&#10;&#10;    private fun getCurrentDate(): String {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        return dateFormat.format(Date())&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/yourpackage/alcoholictimer/GraphActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/yourpackage/alcoholictimer/GraphActivity.kt" />
              <option name="originalContent" value="package com.yourpackage.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;&#10;class GraphActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            GraphScreen()&#10;        }&#10;    }&#10;}&#10;&#10;class GraphViewModel(context: Context) : ViewModel() {&#10;    private val _weeklyRecords = MutableStateFlow(listOf(0, 0, 0, 0, 0, 0, 0))&#10;    val weeklyRecords: StateFlow&lt;List&lt;Int&gt;&gt; = _weeklyRecords&#10;&#10;    init {&#10;        // SharedPreferences에서 금주 기록 데이터 불러오기 (예시)&#10;        val prefs = context.getSharedPreferences(&quot;records_prefs&quot;, Context.MODE_PRIVATE)&#10;        val records = (0..6).map { day -&gt;&#10;            prefs.getInt(&quot;record_day_$day&quot;, 0)&#10;        }&#10;        _weeklyRecords.value = records&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun GraphScreen() {&#10;    val context = LocalContext.current&#10;    val viewModel: GraphViewModel = ViewModelProvider(context as ComponentActivity).get(GraphViewModel::class.java)&#10;    val weeklyRecords by viewModel.weeklyRecords.collectAsState()&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(title = { Text(&quot;금주 기록 그래프&quot;) })&#10;        }&#10;    ) { padding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(padding)&#10;        ) {&#10;            BarChart(&#10;                data = weeklyRecords,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;                    .padding(16.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;// BarChart 컴포저블 구현&#10;@Composable&#10;fun BarChart(data: List&lt;Int&gt;, modifier: Modifier = Modifier) {&#10;    Row(&#10;        modifier = modifier,&#10;        horizontalArrangement = Arrangement.SpaceEvenly&#10;    ) {&#10;        data.forEach { value -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .fillMaxHeight()&#10;                    .padding(horizontal = 4.dp),&#10;                contentAlignment = Alignment.BottomCenter&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .width(24.dp)&#10;                        .height((value * 20).dp)&#10;                        .background(MaterialTheme.colorScheme.primary)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.yourpackage.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.platform.LocalContext&#10;import androidx.compose.ui.unit.dp&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.ViewModelProvider&#10;import androidx.lifecycle.viewmodel.compose.viewModel&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;&#10;class GraphActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContent {&#10;            GraphScreen()&#10;        }&#10;    }&#10;}&#10;&#10;class GraphViewModel(context: Context) : ViewModel() {&#10;    private val _weeklyRecords = MutableStateFlow(listOf(0, 0, 0, 0, 0, 0, 0))&#10;    val weeklyRecords: StateFlow&lt;List&lt;Int&gt;&gt; = _weeklyRecords&#10;&#10;    init {&#10;        // SharedPreferences에서 금주 기록 데이터 불러오기 (예시)&#10;        val prefs = context.getSharedPreferences(&quot;records_prefs&quot;, Context.MODE_PRIVATE)&#10;        val records = (0..6).map { day -&gt;&#10;            prefs.getInt(&quot;record_day_$day&quot;, 0)&#10;        }&#10;        _weeklyRecords.value = records&#10;    }&#10;}&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun GraphScreen() {&#10;    val context = LocalContext.current&#10;    val viewModel: GraphViewModel = ViewModelProvider(context as ComponentActivity).get(GraphViewModel::class.java)&#10;    val weeklyRecords by viewModel.weeklyRecords.collectAsState()&#10;    Scaffold(&#10;        topBar = {&#10;            TopAppBar(title = { Text(&quot;금주 기록 그래프&quot;) })&#10;        }&#10;    ) { padding -&gt;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(padding)&#10;        ) {&#10;            BarChart(&#10;                data = weeklyRecords,&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(200.dp)&#10;                    .padding(16.dp)&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;// BarChart 컴포저블 구현&#10;@Composable&#10;fun BarChart(data: List&lt;Int&gt;, modifier: Modifier = Modifier) {&#10;    Row(&#10;        modifier = modifier,&#10;        horizontalArrangement = Arrangement.SpaceEvenly&#10;    ) {&#10;        data.forEach { value -&gt;&#10;            Box(&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .fillMaxHeight()&#10;                    .padding(horizontal = 4.dp),&#10;                contentAlignment = Alignment.BottomCenter&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .width(24.dp)&#10;                        .height((value * 20).dp)&#10;                        .background(MaterialTheme.colorScheme.primary)&#10;                )&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/그래프_기능_구현_기획서.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/그래프_기능_구현_기획서.md" />
              <option name="updatedContent" value="# 금주 기록 그래프 기능 구현 기획서&#10;&#10;##  프로젝트 개요&#10;- **대상 화면**: RecordsActivity (금주 기록 화면)&#10;- **구현 목적**: 사용자의 금주 성과를 시각적으로 표현하여 동기부여 제공&#10;- **기술 스택**: Jetpack Compose Canvas, Kotlin&#10;&#10;##  기능 요구사항&#10;&#10;### 1. 초기 요구사항&#10;```&#10;&quot;그래프 기능 만들어 줘, &#10;x 축은 주, 월, 년 &#10;y 축은 수치, &#10;성공한 금주가 1개라도 있으면 1의 값을 한다.&quot;&#10;```&#10;&#10;### 2. 상세 요구사항 분석&#10;- **그래프 타입**: 막대 그래프 (Bar Chart)&#10;- **X축**: 기간별 구분 (주/월/년/전체)&#10;- **Y축**: 성공 여부 (0 또는 1의 이진 값)&#10;- **데이터 로직**: 해당 기간에 성공한 금주가 1개 이상 있으면 1, 없으면 0&#10;&#10;##  그래프 모드별 세부 사양&#10;&#10;### 주 모드 (Weekly View)&#10;- **X축**: 일, 월, 화, 수, 목, 금, 토 (7개 막대)&#10;- **Y축**: 0, 1&#10;- **데이터**: 이번 주 각 요일별로 성공한 금주 기록 존재 여부&#10;- **예시**: 월요일에 성공한 금주가 있으면 월요일 막대는 1&#10;&#10;### 월 모드 (Monthly View)&#10;- **X축**: 1일 ~ 마지막일 (28~31개 막대)&#10;- **Y축**: 0, 1&#10;- **레이블**: 5일 단위로 표시 (1, 5, 10, 15, 20, 25, 마지막일)&#10;- **데이터**: 선택한 월의 각 일별로 성공한 금주 기록 존재 여부&#10;&#10;### 년 모드 (Yearly View)&#10;- **X축**: 1월 ~ 12월 (12개 막대)&#10;- **Y축**: 0, 1 (또는 성공 횟수에 따라 동적 조정)&#10;- **데이터**: 선택한 년도의 각 월별로 성공한 금주 기록 존재 여부&#10;&#10;### 전체 모드 (All Time View)&#10;- **X축**: 년도별 (2023년, 2024년, 2025년 등)&#10;- **Y축**: 0, 1 (또는 성공 횟수에 따라 동적 조정)&#10;- **데이터**: 각 년도별로 성공한 금주 기록 존재 여부&#10;&#10;##  UI/UX 디자인 요구사항&#10;&#10;### 기간 선택 UI&#10;- **스타일**: iOS 스타일 Segmented Control&#10;- **배경**: 회색 (`Color(0xFFE0E0E0)`) + 25dp 라운딩&#10;- **선택 상태**: 검은색 배경 + 흰색 텍스트 + Bold&#10;- **비선택 상태**: 투명 배경 + 검은색 텍스트 + Normal&#10;&#10;```&#10;┌─────────────────────────────────────┐&#10;│ ○주○ ●월● ○년○ ○전체○              │&#10;└─────────────────────────────────────┘&#10;```&#10;&#10;### 그래프 레이아웃&#10;- **전체 너비**: 화면 가로폭 최대 활용&#10;- **Y축 레이블**: 왼쪽 30dp 영역에 0, 1 표시&#10;- **그래프 영역**: 나머지 공간 최대 활용&#10;- **X축 레이블**: 그래프 하단에 가로 정렬로 표시&#10;&#10;### 막대 그래프 스타일&#10;- **막대 색상**: 파란색 (`Color(0xFF2196F3)`)&#10;- **막대 너비**: 전체 너비의 70%, 간격 30%&#10;- **배경 격자**: Y축 기준으로 가로선 표시&#10;- **높이**: 200dp 고정&#10;&#10;##  기술 구현 사양&#10;&#10;### 데이터 변환 로직&#10;```kotlin&#10;// StatisticsUtils.kt에 구현된 함수들&#10;fun convertToWeeklyData(records: List&lt;SobrietyRecord&gt;): List&lt;Pair&lt;String, Int&gt;&gt;&#10;fun convertToMonthlyData(records: List&lt;SobrietyRecord&gt;): List&lt;Pair&lt;String, Int&gt;&gt;&#10;fun convertToYearlyData(records: List&lt;SobrietyRecord&gt;): List&lt;Pair&lt;String, Int&gt;&gt;&#10;fun convertToAllTimeData(records: List&lt;SobrietyRecord&gt;): List&lt;Pair&lt;String, Int&gt;&gt;&#10;```&#10;&#10;### 그래프 렌더링&#10;- **기술**: Jetpack Compose Canvas&#10;- **컴포넌트**: `SimpleBarChart` Composable&#10;- **위치**: RecordsActivity 내부 구현&#10;&#10;### 상태 관리&#10;```kotlin&#10;var selectedPeriod by remember { mutableStateOf(&quot;월&quot;) }&#10;val data = remember(records, selectedPeriod) { /* 데이터 변환 */ }&#10;```&#10;&#10;##  화면 구성&#10;&#10;### 최종 레이아웃 구조&#10;```&#10;┌─────────────────────────────────────┐&#10;│ 기간별 보기                         │&#10;│ ○주○ ●월● ○년○ ○전체○              │&#10;├─────────────────────────────────────┤&#10;│ 1 ┤                                 │&#10;│   │  █     █   █                    │&#10;│ 0 ┤  █  █  █ █ █                    │&#10;│   └─────────────────────────────    │&#10;│    1  5 10 15 20 25 31             │&#10;└─────────────────────────────────────┘&#10;```&#10;&#10;##  구현 단계&#10;&#10;### Phase 1: 기본 그래프 구현 ✅&#10;- [x] 기간 선택 UI (Segmented Control 스타일)&#10;- [x] 막대 그래프 Canvas 구현&#10;- [x] Y축 레이블 (0, 1) 표시&#10;- [x] X축 레이블 동적 표시&#10;&#10;### Phase 2: 데이터 연동 ✅&#10;- [x] StatisticsUtils 데이터 변환 함수 구현&#10;- [x] 실제 금주 기록 데이터와 연동&#10;- [x] 기간별 데이터 필터링&#10;&#10;### Phase 3: UI 최적화 ✅&#10;- [x] 그래프 너비 화면 전체 활용&#10;- [x] Y축과 그래프 정렬&#10;- [x] 반응형 막대 너비 조정&#10;&#10;### Phase 4: 고도화 (향후)&#10;- [ ] 애니메이션 효과 추가&#10;- [ ] 터치 인터랙션 (막대 클릭시 상세 정보)&#10;- [ ] 그래프 스크롤 (월 모드에서 긴 데이터)&#10;&#10;##  테스트 시나리오&#10;&#10;### 데이터 시나리오&#10;1. **빈 데이터**: &quot;표시할 데이터가 없습니다&quot; 메시지&#10;2. **일부 성공**: 해당 기간만 막대 높이 1&#10;3. **전체 성공**: 모든 막대 높이 1&#10;4. **기간 전환**: 각 모드별 데이터 정확성&#10;&#10;### UI 테스트&#10;1. **기간 선택**: 각 버튼 클릭시 그래프 변경&#10;2. **반응형**: 다양한 화면 크기에서 레이아웃&#10;3. **성능**: 많은 데이터에서 렌더링 속도&#10;&#10;##  완성된 기능&#10;&#10;### 현재 구현 상태&#10;- ✅ iOS 스타일 기간 선택 UI&#10;- ✅ Canvas 기반 막대 그래프&#10;- ✅ 실시간 데이터 연동&#10;- ✅ 4가지 기간 모드 (주/월/년/전체)&#10;- ✅ 반응형 레이아웃&#10;&#10;### 사용자 경험&#10;1. 사용자가 &quot;월&quot; 탭 클릭&#10;2. 이번 달 1일~31일 막대 그래프 표시&#10;3. 성공한 금주가 있는 날은 높이 1 막대&#10;4. 실패하거나 기록이 없는 날은 높이 0&#10;5. 직관적인 성과 시각화로 동기부여&#10;&#10;##  핵심 성과&#10;&#10;### 기술적 성과&#10;- Jetpack Compose Canvas 활용한 커스텀 그래프&#10;- 효율적인 데이터 변환 및 상태 관리&#10;- 반응형 UI 구현&#10;&#10;### 사용자 가치&#10;- 금주 성과의 시각적 표현&#10;- 기간별 성과 비교 가능&#10;- 직관적인 인터페이스&#10;- 지속적인 동기부여 제공&#10;&#10;---&#10;&#10;** 작성일**: 2025.08.09  &#10;**✍️ 작성자**: GitHub Copilot  &#10;** 버전**: v1.0" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>