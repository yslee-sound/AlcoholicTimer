<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/Constants.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/LevelActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/LevelActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.LinearLayout&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.utils.SharedPreferencesManager&#10;&#10;class LevelActivity : BaseActivity() {&#10;&#10;    private lateinit var layoutCurrentLevel: LinearLayout&#10;    private lateinit var viewCurrentLevelBadge: View&#10;    private lateinit var tvCurrentLevel: TextView&#10;    private lateinit var tvNextLevelDays: TextView&#10;    private lateinit var progressBarLevel: ProgressBar&#10;    private lateinit var recyclerViewLevels: RecyclerView&#10;    private lateinit var levelAdapter: LevelAdapter&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setupContentView()&#10;        initViews()&#10;        setupLevelData()&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        layoutInflater.inflate(R.layout.activity_level, contentFrame, true)&#10;    }&#10;&#10;    private fun initViews() {&#10;        layoutCurrentLevel = findViewById(R.id.layoutCurrentLevel)&#10;        viewCurrentLevelBadge = findViewById(R.id.viewCurrentLevelBadge)&#10;        tvCurrentLevel = findViewById(R.id.tvCurrentLevel)&#10;        tvNextLevelDays = findViewById(R.id.tvNextLevelDays)&#10;        progressBarLevel = findViewById(R.id.progressBarLevel)&#10;        recyclerViewLevels = findViewById(R.id.recyclerViewLevels)&#10;&#10;        recyclerViewLevels.layoutManager = LinearLayoutManager(this)&#10;        levelAdapter = LevelAdapter()&#10;        recyclerViewLevels.adapter = levelAdapter&#10;&#10;        // RecyclerView 확인을 위한 디버깅&#10;        android.util.Log.d(&quot;LevelActivity&quot;, &quot;RecyclerView initialized: ${recyclerViewLevels != null}&quot;)&#10;        android.util.Log.d(&quot;LevelActivity&quot;, &quot;Adapter initialized: ${levelAdapter != null}&quot;)&#10;    }&#10;&#10;    private fun setupLevelData() {&#10;        val currentDays = getCurrentAbstainDays()&#10;        val currentLevel = getLevelFromDays(currentDays)&#10;        val nextLevel = getNextLevel(currentLevel)&#10;&#10;        // 디버깅 로그 추가&#10;        android.util.Log.d(&quot;LevelActivity&quot;, &quot;Current days: $currentDays&quot;)&#10;        android.util.Log.d(&quot;LevelActivity&quot;, &quot;Current level: $currentLevel&quot;)&#10;&#10;        // 현재 레벨 표시&#10;        displayCurrentLevel(currentLevel, currentDays)&#10;&#10;        // 모든 레벨 데이터 설정&#10;        val allLevels = getAllLevels()&#10;        android.util.Log.d(&quot;LevelActivity&quot;, &quot;All levels count: ${allLevels.size}&quot;)&#10;        &#10;        // 데이터 유효성 검사&#10;        allLevels.forEachIndexed { index, level -&gt;&#10;            android.util.Log.d(&quot;LevelActivity&quot;, &quot;Level $index: ${level.title} - ${level.minDays}일&quot;)&#10;        }&#10;        &#10;        levelAdapter.setLevels(allLevels, currentDays)&#10;        &#10;        // RecyclerView 어댑터 확인&#10;        android.util.Log.d(&quot;LevelActivity&quot;, &quot;RecyclerView adapter item count: ${levelAdapter.itemCount}&quot;)&#10;        &#10;        // 강제로 RecyclerView 새로고침&#10;        recyclerViewLevels.post {&#10;            levelAdapter.notifyDataSetChanged()&#10;            android.util.Log.d(&quot;LevelActivity&quot;, &quot;Force refresh RecyclerView completed&quot;)&#10;        }&#10;    }&#10;&#10;    private fun getCurrentAbstainDays(): Int {&#10;        val sharedPrefs = getSharedPreferences(&quot;AlcoholicTimer&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPrefs.getLong(&quot;abstainStartTime&quot;, 0L)&#10;        if (startTime == 0L) return 0&#10;&#10;        val currentTime = System.currentTimeMillis()&#10;        val diffMillis = currentTime - startTime&#10;&#10;        val testMode = sharedPrefs.getString(&quot;testMode&quot;, &quot;TEST_MODE_REAL&quot;) ?: &quot;TEST_MODE_REAL&quot;&#10;        return when (testMode) {&#10;            &quot;SECOND_TEST_MODE&quot; -&gt; (diffMillis / 1000).toInt() // 초 단위&#10;            &quot;MINUTE_TEST_MODE&quot; -&gt; (diffMillis / (1000 * 60)).toInt() // 분 단위&#10;            else -&gt; (diffMillis / (1000 * 60 * 60 * 24)).toInt() // 일 단위&#10;        }&#10;    }&#10;&#10;    private fun getLevelFromDays(days: Int): Int {&#10;        return when {&#10;            days &gt;= 365 -&gt; 7 // 1년 (최고 레벨)&#10;            days &gt;= 100 -&gt; 6 // 100일&#10;            days &gt;= 30 -&gt; 5  // 한 달&#10;            days &gt;= 14 -&gt; 4  // 2주&#10;            days &gt;= 7 -&gt; 3   // 1주&#10;            days &gt;= 3 -&gt; 2   // 3일&#10;            days &gt;= 1 -&gt; 1   // 첫 날&#10;            else -&gt; 0        // 시작 전&#10;        }&#10;    }&#10;&#10;    private fun getNextLevel(currentLevel: Int): Int {&#10;        return if (currentLevel &lt; 7) currentLevel + 1 else 7&#10;    }&#10;&#10;    private fun displayCurrentLevel(level: Int, days: Int) {&#10;        val levelInfo = getLevelInfo(level)&#10;        tvCurrentLevel.text = levelInfo.title&#10;&#10;        // 다음 레벨까지 남은 일수 계산&#10;        val nextLevelDays = getNextLevelDays(level)&#10;        val remainingDays = if (nextLevelDays &gt; 0) nextLevelDays - days else 0&#10;&#10;        val sharedPrefs = getSharedPreferences(&quot;AlcoholicTimer&quot;, MODE_PRIVATE)&#10;        val testMode = sharedPrefs.getString(&quot;testMode&quot;, &quot;TEST_MODE_REAL&quot;) ?: &quot;TEST_MODE_REAL&quot;&#10;&#10;        when (testMode) {&#10;            &quot;SECOND_TEST_MODE&quot; -&gt; {&#10;                tvNextLevelDays.text = if (remainingDays &gt; 0) &quot;다음 레벨까지 ${remainingDays}초&quot; else &quot;최고 레벨 달성!&quot;&#10;            }&#10;            &quot;MINUTE_TEST_MODE&quot; -&gt; {&#10;                tvNextLevelDays.text = if (remainingDays &gt; 0) &quot;다음 레벨까지 ${remainingDays}분&quot; else &quot;최고 레벨 달성!&quot;&#10;            }&#10;            else -&gt; {&#10;                tvNextLevelDays.text = if (remainingDays &gt; 0) &quot;다음 레벨까지 ${remainingDays}일&quot; else &quot;최고 레벨 달성!&quot;&#10;            }&#10;        }&#10;&#10;        // 프로그레스바 설정&#10;        if (nextLevelDays &gt; 0) {&#10;            val previousLevelDays = getPreviousLevelDays(level)&#10;            val totalDaysForLevel = nextLevelDays - previousLevelDays&#10;            val currentProgress = days - previousLevelDays&#10;            val progress = ((currentProgress.toFloat() / totalDaysForLevel.toFloat()) * 100).toInt()&#10;            progressBarLevel.progress = progress.coerceIn(0, 100)&#10;        } else {&#10;            progressBarLevel.progress = 100&#10;        }&#10;&#10;        // 레벨 배지 색상 설정&#10;        setLevelBadgeColor(level)&#10;    }&#10;&#10;    private fun getLevelInfo(level: Int): LevelData {&#10;        return when (level) {&#10;            1 -&gt; LevelData(1, &quot;첫걸음 성공&quot;, 1, &quot;금주의 첫 걸음을 내딛었습니다!&quot;)&#10;            2 -&gt; LevelData(2, &quot;의지 다지기&quot;, 3, &quot;3일간의 의지를 보여주었습니다&quot;)&#10;            3 -&gt; LevelData(3, &quot;일주일 챌린지&quot;, 7, &quot;일주일 동안 금주에 성공했습니다&quot;)&#10;            4 -&gt; LevelData(4, &quot;2주 달성&quot;, 14, &quot;2주간의 꾸준한 노력이 빛납니다&quot;)&#10;            5 -&gt; LevelData(5, &quot;한 달 마스터&quot;, 30, &quot;한 달간의 금주, 정말 대단합니다!&quot;)&#10;            6 -&gt; LevelData(6, &quot;100일 영웅&quot;, 100, &quot;100일 달성! 진정한 영웅입니다&quot;)&#10;            7 -&gt; LevelData(7, &quot;1년 레전드&quot;, 365, &quot;1년 달성! 당신은 레전드입니다!&quot;)&#10;            else -&gt; LevelData(0, &quot;시작 준비&quot;, 0, &quot;금주를 시작해보세요&quot;)&#10;        }&#10;    }&#10;&#10;    private fun getNextLevelDays(currentLevel: Int): Int {&#10;        return when (currentLevel) {&#10;            0 -&gt; 1&#10;            1 -&gt; 3&#10;            2 -&gt; 7&#10;            3 -&gt; 14&#10;            4 -&gt; 30&#10;            5 -&gt; 100&#10;            6 -&gt; 365&#10;            else -&gt; -1 // 최고 레벨&#10;        }&#10;    }&#10;&#10;    private fun getPreviousLevelDays(currentLevel: Int): Int {&#10;        return when (currentLevel) {&#10;            0 -&gt; 0&#10;            1 -&gt; 0&#10;            2 -&gt; 1&#10;            3 -&gt; 3&#10;            4 -&gt; 7&#10;            5 -&gt; 14&#10;            6 -&gt; 30&#10;            7 -&gt; 100&#10;            else -&gt; 0&#10;        }&#10;    }&#10;&#10;    private fun setLevelBadgeColor(level: Int) {&#10;        val colorRes = when (level) {&#10;            1 -&gt; android.R.color.holo_green_light&#10;            2 -&gt; android.R.color.holo_blue_light&#10;            3 -&gt; android.R.color.holo_orange_light&#10;            4 -&gt; android.R.color.holo_red_light&#10;            5 -&gt; android.R.color.holo_purple&#10;            6 -&gt; android.R.color.darker_gray&#10;            7 -&gt; android.R.color.holo_orange_dark // 금색 대신&#10;            else -&gt; android.R.color.darker_gray&#10;        }&#10;&#10;        viewCurrentLevelBadge.setBackgroundColor(getColor(colorRes))&#10;    }&#10;&#10;    private fun getAllLevels(): List&lt;LevelData&gt; {&#10;        return listOf(&#10;            LevelData(1, &quot;첫걸음 성공&quot;, 1, &quot;금주의 첫 걸음을 내딛었습니다!&quot;),&#10;            LevelData(2, &quot;의지 다지기&quot;, 3, &quot;3일간의 의지를 보여주었습니다&quot;),&#10;            LevelData(3, &quot;일주일 챌린지&quot;, 7, &quot;일주일 동안 금주에 성공했습니다&quot;),&#10;            LevelData(4, &quot;2주 달성&quot;, 14, &quot;2주간의 꾸준한 노력이 빛납니다&quot;),&#10;            LevelData(5, &quot;한 달 마스터&quot;, 30, &quot;한 달간의 금주, 정말 대단합니다!&quot;),&#10;            LevelData(6, &quot;100일 영웅&quot;, 100, &quot;100일 달성! 진정한 영웅입니다&quot;),&#10;            LevelData(7, &quot;1년 레전드&quot;, 365, &quot;1년 달성! 당신은 레전드입니다!&quot;)&#10;        )&#10;    }&#10;}&#10;&#10;data class LevelData(&#10;    val id: Int,&#10;    val title: String,&#10;    val minDays: Int,&#10;    val description: String&#10;)&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.LinearLayout&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import com.example.alcoholictimer.utils.SharedPreferencesManager&#10;&#10;class LevelActivity : BaseActivity() {&#10;&#10;    private lateinit var layoutCurrentLevel: LinearLayout&#10;    private lateinit var viewCurrentLevelBadge: View&#10;    private lateinit var tvCurrentLevel: TextView&#10;    private lateinit var tvNextLevelDays: TextView&#10;    private lateinit var progressBarLevel: ProgressBar&#10;&#10;    // 개별 레벨 카드들&#10;    private lateinit var levelCard1: LinearLayout&#10;    private lateinit var levelCard2: LinearLayout&#10;    private lateinit var levelCard3: LinearLayout&#10;    private lateinit var levelCard4: LinearLayout&#10;    private lateinit var levelCard5: LinearLayout&#10;    private lateinit var levelCard6: LinearLayout&#10;    private lateinit var levelCard7: LinearLayout&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setupContentView()&#10;        initViews()&#10;        setupLevelData()&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        layoutInflater.inflate(R.layout.activity_level, contentFrame, true)&#10;    }&#10;&#10;    private fun initViews() {&#10;        layoutCurrentLevel = findViewById(R.id.layoutCurrentLevel)&#10;        viewCurrentLevelBadge = findViewById(R.id.viewCurrentLevelBadge)&#10;        tvCurrentLevel = findViewById(R.id.tvCurrentLevel)&#10;        tvNextLevelDays = findViewById(R.id.tvNextLevelDays)&#10;        progressBarLevel = findViewById(R.id.progressBarLevel)&#10;&#10;        // 개별 레벨 카드들 초기화&#10;        levelCard1 = findViewById(R.id.levelCard1)&#10;        levelCard2 = findViewById(R.id.levelCard2)&#10;        levelCard3 = findViewById(R.id.levelCard3)&#10;        levelCard4 = findViewById(R.id.levelCard4)&#10;        levelCard5 = findViewById(R.id.levelCard5)&#10;        levelCard6 = findViewById(R.id.levelCard6)&#10;        levelCard7 = findViewById(R.id.levelCard7)&#10;    }&#10;&#10;    private fun setupLevelData() {&#10;        val sharedPrefs = SharedPreferencesManager(this)&#10;        val totalDays = sharedPrefs.getTotalAbstainDays()&#10;        &#10;        // 현재 레벨 계산&#10;        val currentLevel = calculateCurrentLevel(totalDays)&#10;        val nextLevelDays = getNextLevelDays(currentLevel)&#10;        val progress = calculateProgress(totalDays, currentLevel)&#10;&#10;        // 현재 레벨 정보 표시&#10;        updateCurrentLevelInfo(currentLevel, nextLevelDays, progress)&#10;        &#10;        // 모든 레벨 카드 상태 업데이트&#10;        updateAllLevelCards(totalDays)&#10;    }&#10;&#10;    private fun calculateCurrentLevel(totalDays: Int): Int {&#10;        return when {&#10;            totalDays &gt;= 365 -&gt; 7  // 1년&#10;            totalDays &gt;= 100 -&gt; 6  // 100일&#10;            totalDays &gt;= 30 -&gt; 5   // 한달&#10;            totalDays &gt;= 14 -&gt; 4   // 2주&#10;            totalDays &gt;= 7 -&gt; 3    // 일주일&#10;            totalDays &gt;= 3 -&gt; 2    // 3일&#10;            totalDays &gt;= 1 -&gt; 1    // 첫걸음&#10;            else -&gt; 0              // 시작 전&#10;        }&#10;    }&#10;&#10;    private fun getNextLevelDays(currentLevel: Int): Int {&#10;        return when (currentLevel) {&#10;            0 -&gt; 1&#10;            1 -&gt; 3&#10;            2 -&gt; 7&#10;            3 -&gt; 14&#10;            4 -&gt; 30&#10;            5 -&gt; 100&#10;            6 -&gt; 365&#10;            else -&gt; 0&#10;        }&#10;    }&#10;&#10;    private fun calculateProgress(totalDays: Int, currentLevel: Int): Int {&#10;        val currentLevelStart = when (currentLevel) {&#10;            0 -&gt; 0&#10;            1 -&gt; 1&#10;            2 -&gt; 3&#10;            3 -&gt; 7&#10;            4 -&gt; 14&#10;            5 -&gt; 30&#10;            6 -&gt; 100&#10;            else -&gt; 365&#10;        }&#10;        &#10;        val nextLevelStart = getNextLevelDays(currentLevel)&#10;        &#10;        if (nextLevelStart == 0) return 100 // 최고 레벨&#10;        &#10;        val progressInLevel = totalDays - currentLevelStart&#10;        val levelRange = nextLevelStart - currentLevelStart&#10;        &#10;        return ((progressInLevel.toFloat() / levelRange.toFloat()) * 100).toInt().coerceIn(0, 100)&#10;    }&#10;&#10;    private fun updateCurrentLevelInfo(level: Int, nextLevelDays: Int, progress: Int) {&#10;        val levelName = when (level) {&#10;            0 -&gt; &quot;시작 준비&quot;&#10;            1 -&gt; &quot;첫걸음 성공&quot;&#10;            2 -&gt; &quot;의지 다지기&quot;&#10;            3 -&gt; &quot;일주일 챌린지&quot;&#10;            4 -&gt; &quot;2주 달성&quot;&#10;            5 -&gt; &quot;한달 마스터&quot;&#10;            6 -&gt; &quot;100일 영웅&quot;&#10;            7 -&gt; &quot;1년 전설&quot;&#10;            else -&gt; &quot;시작 준비&quot;&#10;        }&#10;&#10;        tvCurrentLevel.text = levelName&#10;        &#10;        if (nextLevelDays &gt; 0) {&#10;            tvNextLevelDays.text = &quot;다음 레벨까지 ${nextLevelDays}일 남음&quot;&#10;        } else {&#10;            tvNextLevelDays.text = &quot;최고 레벨 달성!&quot;&#10;        }&#10;        &#10;        progressBarLevel.progress = progress&#10;    }&#10;&#10;    private fun updateAllLevelCards(totalDays: Int) {&#10;        // 각 레벨 카드의 상태를 업데이트&#10;        updateLevelCard(levelCard1, 1, totalDays &gt;= 1)&#10;        updateLevelCard(levelCard2, 2, totalDays &gt;= 3)&#10;        updateLevelCard(levelCard3, 3, totalDays &gt;= 7)&#10;        updateLevelCard(levelCard4, 4, totalDays &gt;= 14)&#10;        updateLevelCard(levelCard5, 5, totalDays &gt;= 30)&#10;        updateLevelCard(levelCard6, 6, totalDays &gt;= 100)&#10;        updateLevelCard(levelCard7, 7, totalDays &gt;= 365)&#10;    }&#10;&#10;    private fun updateLevelCard(card: LinearLayout, level: Int, isAchieved: Boolean) {&#10;        // 달성하지 못한 레벨은 그레이 처리&#10;        if (isAchieved) {&#10;            card.alpha = 1.0f&#10;            card.setBackgroundColor(resources.getColor(android.R.color.white))&#10;        } else {&#10;            card.alpha = 0.5f&#10;            card.setBackgroundColor(resources.getColor(android.R.color.darker_gray))&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.java" />
              <option name="updatedContent" value="package com.example.alcoholictimer;&#10;&#10;import android.os.Bundle;&#10;import android.widget.TextView;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;import java.util.Calendar;&#10;&#10;public class RecordSummaryActivity extends AppCompatActivity {&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.activity_record_summary);&#10;&#10;        // ...existing code...&#10;&#10;        TextView tvRecordTitle = findViewById(R.id.tvRecordTitle);&#10;        // 예시: 현재 월을 기록 종료 시점의 월로 사용합니다.&#10;        int month = Calendar.getInstance().get(Calendar.MONTH) + 1;&#10;        tvRecordTitle.setText(String.format(&quot;%d월의 금주&quot;, month));&#10;&#10;        // ...existing code...&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/SoberScreenActivity.java" />
              <option name="originalContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}&#10;" />
              <option name="updatedContent" value="// ...existing imports...&#10;import android.os.Bundle;&#10;import android.os.Handler;&#10;import android.widget.TextView;&#10;&#10;import androidx.appcompat.app.AppCompatActivity;&#10;&#10;import com.example.alcoholictimer.R; // R 클래스 import 추가&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton;&#10;&#10;import java.util.Locale;&#10;&#10;public class SoberScreenActivity extends AppCompatActivity {&#10;    private Handler handler = new Handler();&#10;    private int elapsedSeconds = 0;&#10;    private boolean isTimerRunning = false;&#10;    private TextView tvTimeDetail; // 변수명 변경&#10;&#10;    @Override&#10;    protected void onCreate(Bundle savedInstanceState) {&#10;        super.onCreate(savedInstanceState);&#10;        setContentView(R.layout.content_status);&#10;&#10;        tvTimeDetail = findViewById(R.id.tvTimeDetail); // ID 변경&#10;&#10;        // 타이머 시작 버튼 설정&#10;        FloatingActionButton btnStartTimer = findViewById(R.id.btnStopSobriety);&#10;        btnStartTimer.setOnClickListener(v -&gt; {&#10;            if (!isTimerRunning) {&#10;                startTimer();&#10;            }&#10;        });&#10;    }&#10;&#10;    private void startTimer() {&#10;        elapsedSeconds = 0; // 타이머 초기화&#10;        isTimerRunning = true; // 타이머 상태 변경&#10;        handler.post(timerRunnable); // Runnable 실행&#10;    }&#10;&#10;    private final Runnable timerRunnable = new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            if (isTimerRunning) {&#10;                int minutes = elapsedSeconds / 60;&#10;                int seconds = elapsedSeconds % 60;&#10;                tvTimeDetail.setText(String.format(Locale.getDefault(), &quot;%02d:%02d&quot;, minutes, seconds));&#10;                elapsedSeconds++;&#10;                handler.postDelayed(this, 1000); // 1초마다 업데이트&#10;            }&#10;        }&#10;    };&#10;&#10;    @Override&#10;    protected void onDestroy() {&#10;        super.onDestroy();&#10;        handler.removeCallbacks(timerRunnable); // 핸들러 콜백 제거&#10;        isTimerRunning = false; // 타이머 상태 초기화&#10;    }&#10;&#10;    // 예: 결과 화면으로 넘어가기 위한 딜레이 코드&#10;    handler.postDelayed(new Runnable() {&#10;        @Override&#10;        public void run() {&#10;            // ...화면 전환 코드...&#10;        }&#10;    }, 2000); // 변경: 기존 3000 -&gt; 2000&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.model.RecentActivity&#10;&#10;class RecentActivityAdapter : RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;    private val activities = ArrayList&lt;RecentActivity&gt;()&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val ivActivityIcon: ImageView = itemView.findViewById(R.id.ivActivityIcon)&#10;        val tvEndDate: TextView = itemView.findViewById(R.id.tvEndDate)&#10;        val tvActivityTitle: TextView = itemView.findViewById(R.id.tvActivityTitle)&#10;        val tvDuration: TextView = itemView.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val tvSavedMoney: TextView = itemView.findViewById(R.id.tvSavedMoney)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        &#10;        holder.tvEndDate.text = activity.endDate&#10;        holder.tvActivityTitle.text = activity.title&#10;        holder.tvDuration.text = &quot;${activity.duration}일 ${activity.hours}시간&quot;&#10;        holder.tvStatus.text = if(activity.isSuccess) &quot;성공&quot; else &quot;실패&quot;&#10;        holder.tvSavedMoney.text = &quot;${activity.savedMoney}만원 절약&quot;&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;&#10;    fun updateActivities(newActivities: List&lt;RecentActivity&gt;) {&#10;        activities.clear()&#10;        activities.addAll(newActivities.take(5)) // 최대 5개까지만 표시&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>