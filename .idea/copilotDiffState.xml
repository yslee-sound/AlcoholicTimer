<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/BaseActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.widget.ImageButton&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.google.android.material.navigation.NavigationView&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity() {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 금주 상태를 확인하여 메뉴 아이템 활성화/비활성화 설정&#10;            updateNavigationMenuState()&#10;            drawerLayout.open()&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener { menuItem -&gt;&#10;            when (menuItem.itemId) {&#10;                R.id.nav_start -&gt; {&#10;                    if (this !is StartActivity) {&#10;                        startActivity(Intent(this, StartActivity::class.java))&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_status -&gt; {&#10;                    if (this !is StatusActivity) {&#10;                        startActivity(Intent(this, StatusActivity::class.java))&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            drawerLayout.close()&#10;            true&#10;        }&#10;&#10;        // 각 액티비티의 레이아웃을 contentFrame에 추가&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 이미 금주를 시작했다면 금주 시작 메뉴를 비활성화합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주가 이미 시작되었으면 시작 메뉴 비활성화&#10;        val startMenuItem = navigationView.menu.findItem(R.id.nav_start)&#10;        startMenuItem.isEnabled = !hasStarted&#10;&#10;        // 금주가 시작되었을 때만 상태 메뉴 활성화&#10;        val statusMenuItem = navigationView.menu.findItem(R.id.nav_status)&#10;        statusMenuItem.isEnabled = hasStarted&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.View&#10;import android.widget.ImageButton&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import androidx.appcompat.app.AppCompatActivity&#10;import androidx.core.view.WindowCompat&#10;import androidx.drawerlayout.widget.DrawerLayout&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.google.android.material.navigation.NavigationView&#10;import java.util.Date&#10;&#10;/**&#10; * 모든 액티비티의 베이스 클래스&#10; * 공통된 햄버거 메뉴와 네비게이션 기능을 제공합니다.&#10; */&#10;abstract class BaseActivity : AppCompatActivity() {&#10;&#10;    protected lateinit var drawerLayout: DrawerLayout&#10;    protected lateinit var navigationView: NavigationView&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 시스템 UI와의 겹침 처리를 위한 설정&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContentView(R.layout.layout_base)&#10;&#10;        // 공통 UI 요소 초기화&#10;        drawerLayout = findViewById(R.id.drawerLayout)&#10;        navigationView = findViewById(R.id.navigationView)&#10;        val btnMenu = findViewById&lt;ImageButton&gt;(R.id.btnMenu)&#10;&#10;        // 메뉴 버튼 클릭 시 드로어 열기&#10;        btnMenu.setOnClickListener {&#10;            // 드로어를 열기 전에 최신 상태로 업데이트&#10;            updateNavigationDrawer()&#10;            drawerLayout.open()&#10;        }&#10;&#10;        // 내비게이션 메뉴 아이템 클릭 이벤트&#10;        navigationView.setNavigationItemSelectedListener { menuItem -&gt;&#10;            when (menuItem.itemId) {&#10;                R.id.nav_start -&gt; {&#10;                    if (this !is StartActivity) {&#10;                        startActivity(Intent(this, StartActivity::class.java))&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_records -&gt; {&#10;                    // 활동 보기 화면으로 이동&#10;                    if (this !is StatusActivity) {&#10;                        val intent = Intent(this, StatusActivity::class.java)&#10;                        startActivity(intent)&#10;                        if (this !is MainActivity) {&#10;                            finish()&#10;                        }&#10;                    }&#10;                }&#10;                R.id.nav_challenge -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_messages -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_notifications -&gt; {&#10;                    Toast.makeText(this, &quot;준비 중인 기능입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;                R.id.nav_settings -&gt; {&#10;                    Toast.makeText(this, &quot;설정 기능은 준비 중입니다&quot;, Toast.LENGTH_SHORT).show()&#10;                }&#10;            }&#10;            drawerLayout.close()&#10;            true&#10;        }&#10;&#10;        // 각 액티비티의 레이아웃을 contentFrame에 추가&#10;        setupContentView()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태와 헤더 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationDrawer() {&#10;        // 네비게이션 메뉴 상태 업데이트&#10;        updateNavigationMenuState()&#10;&#10;        // 네비게이션 헤더 정보 업데이트&#10;        updateNavigationHeader()&#10;    }&#10;&#10;    /**&#10;     * 금주 상태에 따라 내비게이션 메뉴 상태를 업데이트합니다.&#10;     * 이미 금주를 시작했다면 금주 시작 메뉴를 비활성화합니다.&#10;     */&#10;    private fun updateNavigationMenuState() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val hasStarted = sharedPref.contains(&quot;start_time&quot;)&#10;&#10;        // 금주가 이미 시작되었으면 시작 메뉴 비활성화&#10;        val startMenuItem = navigationView.menu.findItem(R.id.nav_start)&#10;        startMenuItem.isEnabled = !hasStarted&#10;&#10;        // 금주가 시작되었을 때만 상태 메뉴 활성화&#10;        val statusMenuItem = navigationView.menu.findItem(R.id.nav_records)&#10;        statusMenuItem.isEnabled = hasStarted&#10;    }&#10;&#10;    /**&#10;     * 네비게이션 헤더의 사용자 정보를 업데이트합니다.&#10;     */&#10;    private fun updateNavigationHeader() {&#10;        val headerView = navigationView.getHeaderView(0)&#10;        if (headerView != null) {&#10;            val tvUserNickname = headerView.findViewById&lt;TextView&gt;(R.id.tvUserNickname)&#10;            val tvUserLevelDays = headerView.findViewById&lt;TextView&gt;(R.id.tvUserLevelDays)&#10;&#10;            // 사용자 이름은 기본값으로 &quot;알중이&quot; 사용&#10;            tvUserNickname.text = &quot;알중이&quot;&#10;&#10;            // 금주 상태에 따른 레벨 및 일수 정보 업데이트&#10;            val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;            if (sharedPref.contains(&quot;start_time&quot;)) {&#10;                val startTime = sharedPref.getLong(&quot;start_time&quot;, Date().time)&#10;                val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;                // 레벨 계산 (시간 단위에 따라 적절한 마일스톤 사용)&#10;                val adjustedMilestones = when {&#10;                    Constants.SECOND_TEST_MODE -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                    Constants.TEST_MODE -&gt; listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;                    else -&gt; listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;                }&#10;&#10;                var currentLevel = 1&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i + 1&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                tvUserLevelDays.text = &quot;Level $currentLevel · ${timePassed}${Constants.TIME_UNIT_TEXT} 금주 중&quot;&#10;            } else {&#10;                tvUserLevelDays.text = &quot;금주를 시작해보세요!&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 각 액티비티에서 구현할 추상 메소드&#10;     * 각자의 레이아웃을 contentFrame에 추가하는 작업을 수행&#10;     */&#10;    protected abstract fun setupContentView()&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/NoPasteEditText.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/NoPasteEditText.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Context&#10;import android.util.AttributeSet&#10;import android.view.inputmethod.EditorInfo&#10;import android.view.inputmethod.InputConnection&#10;import android.widget.EditText&#10;&#10;/**&#10; * 붙여넣기 기능이 비활성화된 커스텀 EditText&#10; */&#10;class NoPasteEditText : EditText {&#10;    constructor(context: Context) : super(context)&#10;    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs)&#10;    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr)&#10;&#10;    override fun onTextContextMenuItem(id: Int): Boolean {&#10;        // 붙여넣기(PASTE) 작업 차단&#10;        return if (id == android.R.id.paste) {&#10;            false&#10;        } else {&#10;            super.onTextContextMenuItem(id)&#10;        }&#10;    }&#10;&#10;    override fun onCreateInputConnection(outAttrs: EditorInfo): InputConnection {&#10;        val connection = super.onCreateInputConnection(outAttrs)&#10;&#10;        // 입력 메뉴에서 붙여넣기 옵션을 제거&#10;        outAttrs.imeOptions = outAttrs.imeOptions or EditorInfo.IME_FLAG_NO_EXTRACT_UI&#10;&#10;        return connection&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.ClipboardManager&#10;import android.content.Context&#10;import android.util.AttributeSet&#10;import android.view.ActionMode&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import android.view.inputmethod.EditorInfo&#10;import android.view.inputmethod.InputConnection&#10;import android.widget.EditText&#10;&#10;/**&#10; * 붙여넣기 기능이 비활성화된 커스텀 EditText&#10; */&#10;class NoPasteEditText : EditText {&#10;    constructor(context: Context) : super(context) {&#10;        init()&#10;    }&#10;&#10;    constructor(context: Context, attrs: AttributeSet?) : super(context, attrs) {&#10;        init()&#10;    }&#10;&#10;    constructor(context: Context, attrs: AttributeSet?, defStyleAttr: Int) : super(context, attrs, defStyleAttr) {&#10;        init()&#10;    }&#10;&#10;    private fun init() {&#10;        // 길게 누르기 비활성화&#10;        isLongClickable = false&#10;&#10;        // 텍스트 선택 비활성화&#10;        setTextIsSelectable(false)&#10;&#10;        // 컨텍스트 메뉴 비활성화&#10;        customSelectionActionModeCallback = object : ActionMode.Callback {&#10;            override fun onCreateActionMode(mode: ActionMode?, menu: Menu?): Boolean = false&#10;            override fun onPrepareActionMode(mode: ActionMode?, menu: Menu?): Boolean = false&#10;            override fun onActionItemClicked(mode: ActionMode?, item: MenuItem?): Boolean = false&#10;            override fun onDestroyActionMode(mode: ActionMode?) {}&#10;        }&#10;    }&#10;&#10;    override fun onTextContextMenuItem(id: Int): Boolean {&#10;        // 모든 컨텍스트 메뉴 항목(붙여넣기, 복사 등) 차단&#10;        return false&#10;    }&#10;&#10;    override fun onCreateInputConnection(outAttrs: EditorInfo): InputConnection {&#10;        val connection = super.onCreateInputConnection(outAttrs)&#10;&#10;        // IME 옵션 설정&#10;        outAttrs.imeOptions = outAttrs.imeOptions or&#10;                EditorInfo.IME_FLAG_NO_EXTRACT_UI or&#10;                EditorInfo.IME_FLAG_NO_FULLSCREEN&#10;&#10;        return connection&#10;    }&#10;&#10;    // 붙여넣기 방지를 위해 모든 입력 시도를 추가로 검사&#10;    override fun onTextChanged(text: CharSequence?, start: Int, lengthBefore: Int, lengthAfter: Int) {&#10;        super.onTextChanged(text, start, lengthBefore, lengthAfter)&#10;&#10;        // 텍스트가 한 번에 여러 자리 추가되는 경우 (붙여넣기로 추정)&#10;        if (lengthAfter &gt; 1 &amp;&amp; lengthBefore == 0) {&#10;            val currentText = this.text.toString()&#10;            if (start == 0 &amp;&amp; currentText.length &gt; 1) {&#10;                // 마지막 숫자만 유지&#10;                setText(currentText.substring(currentText.length - 1))&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/RecordSummaryActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.concurrent.TimeUnit&#10;&#10;/**&#10; * 금주 완료 후 결과 요약을 보여주는 액티비티&#10; */&#10;class RecordSummaryActivity : BaseActivity() {&#10;&#10;    private var record: SobrietyRecord? = null&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;&#10;        // 이전 화면에서 전달받은 기록 ID 가져오기&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1L)&#10;        if (recordId == -1L) {&#10;            // ID가 없으면 메인 화면으로 이동&#10;            finish()&#10;            return&#10;        }&#10;&#10;        // 해당 ID의 기록 데이터 불러오기&#10;        record = loadRecord(recordId)&#10;        if (record == null) {&#10;            finish()&#10;            return&#10;        }&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // 기록이 없으면 화면 설정 건너뛰기&#10;        if (record == null) {&#10;            return&#10;        }&#10;&#10;        // BaseActivity에서 상속받은 contentFrame에 레이아웃 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.activity_record_summary, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        val tvTitle = view.findViewById&lt;TextView&gt;(R.id.tvSummaryTitle)&#10;        val tvPeriod = view.findViewById&lt;TextView&gt;(R.id.tvPeriod)&#10;        val tvAchievedLevel = view.findViewById&lt;TextView&gt;(R.id.tvAchievedLevel)&#10;        val tvTotalDuration = view.findViewById&lt;TextView&gt;(R.id.tvTotalDuration)&#10;        val btnNewChallenge = view.findViewById&lt;Button&gt;(R.id.btnNewChallenge)&#10;&#10;        // 데이터 표시&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy년 MM월 dd일 HH:mm&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.startDate) ?: Date())&#10;        val endDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.endDate) ?: Date())&#10;&#10;        // 제목 설정&#10;        if (record!!.isCompleted) {&#10;            tvTitle.text = &quot;목표 달성을 축하합니다!&quot;&#10;        } else {&#10;            tvTitle.text = &quot;금주 기록 요약&quot;&#10;        }&#10;&#10;        // 기간 표시&#10;        tvPeriod.text = &quot;시작: $startDate\n종료: $endDate&quot;&#10;&#10;        // 달성 레벨&#10;        tvAchievedLevel.text = &quot;달성 레벨: ${record!!.achievedLevel} (${record!!.levelTitle})&quot;&#10;&#10;        // 총 금주 기간&#10;        val durationText = if (record!!.isCompleted) {&#10;            &quot;목표 ${record!!.duration}${getUnitText()} 완료했습니다!&quot;&#10;        } else {&#10;            &quot;목표 ${record!!.duration}${getUnitText()} 중 ${record!!.achievedDays}${getUnitText()} 달성 (${(record!!.achievedDays.toFloat() / record!!.duration * 100).toInt()}%)&quot;&#10;        }&#10;        tvTotalDuration.text = durationText&#10;&#10;        // 버튼 설정&#10;        btnNewChallenge.setOnClickListener {&#10;            // 새로운 도전 시작을 위해 메인 화면으로 이동&#10;            val intent = Intent(this, MainActivity::class.java)&#10;            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK&#10;            startActivity(intent)&#10;            finish()&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 현재 테스트 모드에 맞는 단위 텍스트를 반환&#10;     */&#10;    private fun getUnitText(): String {&#10;        return if (com.example.alcoholictimer.utils.Constants.SECOND_TEST_MODE) {&#10;            &quot;초를&quot;&#10;        } else if (com.example.alcoholictimer.utils.Constants.TEST_MODE) {&#10;            &quot;분을&quot;&#10;        } else {&#10;            &quot;일을&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * SharedPreferences에서 특정 ID의 금주 기록을 불러옴&#10;     */&#10;    private fun loadRecord(recordId: Long): SobrietyRecord? {&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;&#10;        return records.find { it.id == recordId }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.util.Log&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;/**&#10; * 금주 완료 후 결과 요약을 보여주는 액티비티&#10; */&#10;class RecordSummaryActivity : BaseActivity() {&#10;&#10;    private var record: SobrietyRecord? = null&#10;    private val TAG = &quot;RecordSummaryActivity&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        Log.d(TAG, &quot;onCreate: 기록화면 시작&quot;)&#10;&#10;        // 이전 화면에서 전달받은 기록 ID 가져오기&#10;        val recordId = intent.getLongExtra(&quot;record_id&quot;, -1L)&#10;        Log.d(TAG, &quot;onCreate: recordId=$recordId&quot;)&#10;&#10;        if (recordId == -1L) {&#10;            // ID가 없으면 메인 화면으로 이동&#10;            Toast.makeText(this, &quot;기록 정보를 찾을 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Record ID not found in intent&quot;)&#10;            finish()&#10;            return&#10;        }&#10;&#10;        // 해당 ID의 기록 데이터 불러오기&#10;        record = loadRecord(recordId)&#10;&#10;        if (record == null) {&#10;            Toast.makeText(this, &quot;해당 기록을 불러올 수 없습니다.&quot;, Toast.LENGTH_LONG).show()&#10;            Log.e(TAG, &quot;Failed to load record with id: $recordId&quot;)&#10;        } else {&#10;            Log.d(TAG, &quot;Record loaded: ${record?.startDate} to ${record?.endDate}, completed=${record?.isCompleted}&quot;)&#10;        }&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        Log.d(TAG, &quot;setupContentView: 시작&quot;)&#10;        &#10;        try {&#10;            // BaseActivity에서 상속받은 contentFrame에 레이아웃 추가&#10;            val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;            if (contentFrame == null) {&#10;                Log.e(TAG, &quot;contentFrame not found&quot;)&#10;                return&#10;            }&#10;&#10;            val view = LayoutInflater.from(this).inflate(R.layout.activity_record_summary, contentFrame, true)&#10;            Log.d(TAG, &quot;Layout inflated successfully&quot;)&#10;&#10;            // UI 요소 초기화&#10;            val tvRecordScreenTitle = view.findViewById&lt;TextView&gt;(R.id.tvRecordScreenTitle)&#10;            val tvSummaryTitle = view.findViewById&lt;TextView&gt;(R.id.tvSummaryTitle)&#10;            val tvPeriod = view.findViewById&lt;TextView&gt;(R.id.tvPeriod)&#10;            val btnNewChallenge = view.findViewById&lt;Button&gt;(R.id.btnNewChallenge)&#10;&#10;            if (tvRecordScreenTitle == null || tvSummaryTitle == null || tvPeriod == null || btnNewChallenge == null) {&#10;                Log.e(TAG, &quot;One or more UI elements not found in layout&quot;)&#10;                return&#10;            }&#10;&#10;            // 기본 타이틀은 항상 표시&#10;            tvRecordScreenTitle.text = &quot;기록화면&quot;&#10;            &#10;            // 레코드가 있는 경우에만 데이터 표시&#10;            if (record != null) {&#10;                // 제목 설정&#10;                if (record!!.isCompleted) {&#10;                    tvSummaryTitle.text = &quot;목표 달성을 축하합니다!&quot;&#10;                } else {&#10;                    tvSummaryTitle.text = &quot;금주 기록 요약&quot;&#10;                }&#10;&#10;                // 날짜 포맷 설정&#10;                val dateFormat = SimpleDateFormat(&quot;yyyy년 MM월 dd일 HH:mm&quot;, Locale.getDefault())&#10;                val startDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.startDate) ?: Date())&#10;                val endDate = dateFormat.format(SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault()).parse(record!!.endDate) ?: Date())&#10;                &#10;                // 기간 표시&#10;                tvPeriod.text = &quot;시작: $startDate\n종료: $endDate&quot;&#10;            } else {&#10;                // 레코드가 없는 경우 기본 텍스트 설정&#10;                tvSummaryTitle.text = &quot;금주 기록&quot;&#10;                tvPeriod.text = &quot;기록 정보 없음&quot;&#10;            }&#10;&#10;            // 새로운 도전 버튼 클릭 리스너 설정&#10;            btnNewChallenge.setOnClickListener {&#10;                // MainActivity로 이동&#10;                val intent = Intent(this, MainActivity::class.java)&#10;                intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP  // 스택의 MainActivity 위의 모든 액티비티 제거&#10;                startActivity(intent)&#10;                finish()&#10;            }&#10;            &#10;            Log.d(TAG, &quot;setupContentView: 완료&quot;)&#10;            &#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error setting up content view: ${e.message}&quot;, e)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * ID로 기록 불러오기&#10;     */&#10;    private fun loadRecord(recordId: Long): SobrietyRecord? {&#10;        try {&#10;            val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;            val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;            val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;)&#10;            &#10;            return records.find { it.id == recordId }&#10;        } catch (e: Exception) {&#10;            Log.e(TAG, &quot;Error loading record: ${e.message}&quot;, e)&#10;            return null&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StartActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StartActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.text.InputType&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.Button&#10;import android.widget.EditText&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.utils.Constants&#10;import android.view.ActionMode&#10;import android.view.Menu&#10;import android.view.MenuItem&#10;import android.content.Context&#10;import android.view.inputmethod.EditorInfo&#10;import android.view.inputmethod.InputConnection&#10;import android.view.inputmethod.BaseInputConnection&#10;&#10;class StartActivity : BaseActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StartActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_start, contentFrame, true)&#10;&#10;        // 버튼 및 기타 UI 요소에 대한 이벤트 처리&#10;        val btnStart = view.findViewById&lt;Button&gt;(R.id.btnStart)&#10;        val editTextDays = view.findViewById&lt;EditText&gt;(R.id.editTextDays)&#10;        val tvDaysLabel = view.findViewById&lt;TextView&gt;(R.id.tvDaysLabel)&#10;&#10;        // 테스트 모드에 따라 레이블 변경&#10;        tvDaysLabel.text = Constants.TIME_UNIT_TEXT&#10;&#10;        // 기본 숫자 입력 설정&#10;        editTextDays.inputType = InputType.TYPE_CLASS_NUMBER&#10;&#10;        // 클립보드 관련 기능 비활성화 (복사, 붙여넣기 등 차단)&#10;        editTextDays.setOnLongClickListener { true }&#10;        editTextDays.isLongClickable = false&#10;        editTextDays.setTextIsSelectable(false)&#10;&#10;        // ActionMode 콜백을 통해 컨텍스트 메뉴 비활성화&#10;        editTextDays.customSelectionActionModeCallback = object : ActionMode.Callback {&#10;            override fun onCreateActionMode(mode: ActionMode?, menu: Menu?): Boolean = false&#10;            override fun onPrepareActionMode(mode: ActionMode?, menu: Menu?): Boolean = false&#10;            override fun onActionItemClicked(mode: ActionMode?, item: MenuItem?): Boolean = false&#10;            override fun onDestroyActionMode(mode: ActionMode?) {}&#10;        }&#10;&#10;        // 입력 연결을 커스텀하여 붙여넣기 동작 차단&#10;        editTextDays.setOnCreateInputConnectionListener { outAttrs, onCreateInputConnection -&gt;&#10;            val baseInputConnection = BaseInputConnection(editTextDays, true)&#10;            InputConnectionWrapper(baseInputConnection)&#10;        }&#10;&#10;        // 시작 버튼 클릭 처리&#10;        btnStart.setOnClickListener {&#10;            val targetTime = editTextDays.text.toString().toIntOrNull() ?: 0&#10;&#10;            if (targetTime &gt; 0) {&#10;                // 사용자 설정을 SharedPreferences에 저장&#10;                val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;                with(sharedPref.edit()) {&#10;                    putInt(&quot;target_days&quot;, targetTime)&#10;&#10;                    // 현재 시간을 시작 시간으로 저장&#10;                    putLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;                    apply()&#10;                }&#10;&#10;                Toast.makeText(this, &quot;${targetTime}${Constants.TIME_UNIT_TEXT} 동안 금주를 시작합니다!&quot;, Toast.LENGTH_SHORT).show()&#10;                val intent = Intent(this, StatusActivity::class.java)&#10;                startActivity(intent)&#10;                finish()&#10;            } else {&#10;                Toast.makeText(this, &quot;1${Constants.TIME_UNIT_TEXT} 이상의 숫자를 입력해주세요&quot;, Toast.LENGTH_SHORT).show()&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    // 붙여넣기 동작을 차단하는 커스텀 InputConnection 래퍼&#10;    private class InputConnectionWrapper(private val target: InputConnection) : InputConnection {&#10;        // 모든 InputConnection 메서드를 구현하되, 붙여넣기 관련 메서드는 차단&#10;&#10;        override fun commitText(text: CharSequence?, newCursorPosition: Int): Boolean {&#10;            // 붙여넣기로 추정되는 길이가 긴 텍스트는 차단 (1자리 숫자만 허용)&#10;            if (text != null &amp;&amp; text.length &gt; 1) {&#10;                return false&#10;            }&#10;            return target.commitText(text, newCursorPosition)&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#13;&#10;&#13;&#10;import android.content.Intent&#13;&#10;import android.os.Bundle&#13;&#10;import android.text.InputType&#13;&#10;import android.view.LayoutInflater&#13;&#10;import android.view.ViewGroup&#13;&#10;import android.widget.Button&#13;&#10;import android.widget.EditText&#13;&#10;import android.widget.TextView&#13;&#10;import android.widget.Toast&#13;&#10;import com.example.alcoholictimer.utils.Constants&#13;&#10;&#13;&#10;class StartActivity : BaseActivity() {&#13;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#13;&#10;        super.onCreate(savedInstanceState)&#13;&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#13;&#10;    }&#13;&#10;&#13;&#10;    override fun setupContentView() {&#13;&#10;        // StartActivity 고유의 컨텐츠를 contentFrame에 추가&#13;&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#13;&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_start, contentFrame, true)&#13;&#10;&#13;&#10;        // 버튼 및 기타 UI 요소에 대한 이벤트 처리&#13;&#10;        val btnStart = view.findViewById&lt;Button&gt;(R.id.btnStart)&#13;&#10;        val editTextDays = view.findViewById&lt;EditText&gt;(R.id.editTextDays)&#13;&#10;        val tvDaysLabel = view.findViewById&lt;TextView&gt;(R.id.tvDaysLabel)&#13;&#10;&#13;&#10;        // 테스트 모드에 따라 레이블 변경&#13;&#10;        tvDaysLabel.text = Constants.TIME_UNIT_TEXT&#13;&#10;&#13;&#10;        // 기본 숫자 입력 설정&#13;&#10;        editTextDays.inputType = InputType.TYPE_CLASS_NUMBER&#13;&#10;&#13;&#10;        // 시작 버튼 클릭 처리&#13;&#10;        btnStart.setOnClickListener {&#13;&#10;            val targetTime = editTextDays.text.toString().toIntOrNull() ?: 0&#13;&#10;&#13;&#10;            if (targetTime &gt; 0) {&#13;&#10;                // 사용자 설정을 SharedPreferences에 저장&#13;&#10;                val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#13;&#10;                with(sharedPref.edit()) {&#13;&#10;                    putInt(&quot;target_days&quot;, targetTime)&#13;&#10;&#13;&#10;                    // 현재 시간을 시작 시간으로 저장&#13;&#10;                    putLong(&quot;start_time&quot;, System.currentTimeMillis())&#13;&#10;                    apply()&#13;&#10;                }&#13;&#10;&#13;&#10;                Toast.makeText(this, &quot;${targetTime}${Constants.TIME_UNIT_TEXT} 동안 금주를 시작합니다!&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;                val intent = Intent(this, StatusActivity::class.java)&#13;&#10;                startActivity(intent)&#13;&#10;                finish()&#13;&#10;            } else {&#13;&#10;                Toast.makeText(this, &quot;1${Constants.TIME_UNIT_TEXT} 이상의 숫자를 입력해주세요&quot;, Toast.LENGTH_SHORT).show()&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import java.util.Timer&#10;import java.util.TimerTask&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;class StatusActivity : BaseActivity() {&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#10;    private var goalAchievementChecked = false&#10;&#10;    // 일 단위 레벨 마일스톤 (실제 운영)&#10;    private val levelMilestones = listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;&#10;    // 분 단위 레벨 마일스톤 (테스트 모드)&#10;    private val minuteTestMilestones = listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;&#10;    // 초 단위 레벨 마일스톤 (초 단위 테스트 모드)&#10;    private val secondTestMilestones = listOf(0, 7, 14, 30, 60, 90, 120, 180)&#10;&#10;    private val levelTitles = listOf(&#10;        &quot;새싹 도전자&quot;,&#10;        &quot;첫걸음 성공&quot;,&#10;        &quot;의지의 시작&quot;,&#10;        &quot;한달의 기적&quot;,&#10;        &quot;습관의 탄생&quot;,&#10;        &quot;의지의 달인&quot;,&#10;        &quot;금주의 마스터&quot;,&#10;        &quot;절제의 달인&quot;&#10;    )&#10;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#10;    private var timer: Timer? = null&#10;    private val handler = Handler(Looper.getMainLooper())&#10;&#10;    // UI 요소 참조 저장 변수&#10;    private lateinit var tvDaysCount: TextView&#10;    private lateinit var tvTimeUnit: TextView&#10;    private lateinit var tvMessage: TextView&#10;    private lateinit var progressLevel: ProgressBar&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // 화면이 보일 때 타이머 시작&#10;        startTimer()&#10;&#10;        // 목표 달성 플래그 초기화&#10;        goalAchievementChecked = false&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // 화면이 보이지 않을 때 타이머 정지&#10;        stopTimer()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        // 기존 타이머가 있다면 중지&#10;        stopTimer()&#10;&#10;        // 새 타이머 생성 및 시작&#10;        timer = Timer()&#10;        timer?.schedule(object : TimerTask() {&#10;            override fun run() {&#10;                // UI 업데이트는 메인 스레드에서 수행해야 함&#10;                handler.post {&#10;                    updateUI()&#10;                }&#10;            }&#10;        }, 0, 1000) // 1초마다 업데이트&#10;    }&#10;&#10;    private fun stopTimer() {&#10;        timer?.cancel()&#10;        timer = null&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StatusActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_status, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        tvDaysCount = view.findViewById(R.id.tvDaysCount)&#10;        tvTimeUnit = view.findViewById(R.id.tvTimeUnit)&#10;        tvMessage = view.findViewById(R.id.tvMessage)&#10;        progressLevel = view.findViewById(R.id.progressLevel)&#10;&#10;        // 시간 단위 텍스트 설정&#10;        tvTimeUnit.text = Constants.TIME_UNIT_TEXT&#10;&#10;        // 중지 버튼 설정&#10;        val btnStopSobriety = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#10;        btnStopSobriety.setOnClickListener {&#10;            // 기존 AlertDialog 대신 커스텀 다이얼로그 사용&#10;            showCustomStopDialog()&#10;        }&#10;&#10;        // 최초 UI 업데이트&#10;        updateUI()&#10;    }&#10;&#10;    /**&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#10;     */&#10;    private fun updateUI() {&#10;        // SharedPreferences에서 데이터 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;&#10;        // 타이머가 이미 완료되었는지 확인&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        // 타이머가 이미 완료된 상태면 목표 일수를 보여주고 즉시 리턴&#10;        if (completionFlag) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;            return&#10;        }&#10;&#10;        // 경과 시간 계산 (테스트 모드에 따라 일, 분 또는 초 단위로 계산)&#10;        val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;        // UI 업데이트 - 마지막 목표 숫자에 도달하면 숫자를 증가시키지 않고 색상 변경&#10;        if (timePassed &gt;= targetDays) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            // 목표 달성 시 주황색으로 변경&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;&#10;            // 타이머가 완료되었음을 저장&#10;            with(sharedPref.edit()) {&#10;                putBoolean(&quot;timer_completed&quot;, true)&#10;                apply()&#10;            }&#10;&#10;            // 목표 달성 시 타이머 즉시 중지&#10;            stopTimer()&#10;&#10;            // 목표 달성 여부 메시지&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;&#10;            // 목표 달성 시 처리 (한 번만 실행되도록)&#10;            if (!goalAchievementChecked) {&#10;                goalAchievementChecked = true&#10;&#10;                // 테스트 모드에 따라 적절한 마일스톤 선택&#10;                val adjustedMilestones = when {&#10;                    Constants.SECOND_TEST_MODE -&gt; secondTestMilestones&#10;                    Constants.TEST_MODE -&gt; minuteTestMilestones&#10;                    else -&gt; levelMilestones&#10;                }&#10;&#10;                // 레벨 계산 (기록 목적으로만 사용)&#10;                var currentLevel = 0&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                // 기록 저장 및 완료 처리&#10;                val recordId = saveCompletedRecord(startTime, System.currentTimeMillis(), targetDays, currentLevel + 1)&#10;&#10;                // 토스트 메시지 표시&#10;                Toast.makeText(this, &quot;목표 달성! 금주가 완료되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;                // 요약 화면으로 이동&#10;                handler.postDelayed({&#10;                    val intent = Intent(this, RecordSummaryActivity::class.java)&#10;                    intent.putExtra(&quot;record_id&quot;, recordId)&#10;                    startActivity(intent)&#10;                    finish()&#10;                }, 1000) // 1초 후 이동&#10;            }&#10;        } else {&#10;            // 아직 목표 달성 전이면 일반적인 숫자 표시 (1일차부터 시작)&#10;            tvDaysCount.text = (timePassed + 1).toString()&#10;            // 기본 색상으로 설정&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.black, theme))&#10;&#10;            // 테스트 모드에 따라 적절한 마일스톤 선택&#10;            val adjustedMilestones = when {&#10;                Constants.SECOND_TEST_MODE -&gt; secondTestMilestones&#10;                Constants.TEST_MODE -&gt; minuteTestMilestones&#10;                else -&gt; levelMilestones&#10;            }&#10;&#10;            // 레벨 계산 (기록 목적으로만 사용)&#10;            var currentLevel = 0&#10;            for (i in adjustedMilestones.indices) {&#10;                if (timePassed &gt;= adjustedMilestones[i]) {&#10;                    currentLevel = i&#10;                } else {&#10;                    break&#10;                }&#10;            }&#10;&#10;            // 프로그레스바 업데이트 - 전체 목표일 수 기준으로 계산&#10;            val progressPercentage = (timePassed.toFloat() / targetDays) * 100&#10;            progressLevel.progress = progressPercentage.toInt().coerceIn(0, 100)&#10;&#10;            // 남은 일수 메시지에도 +1 적용하지 않음 (실제 목표까지 남은 날짜를 정확하게 표시)&#10;            tvMessage.text = &quot;목표까지 ${targetDays - timePassed}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 완료된 금주 기록을 저장합니다&#10;     * @return 저장된 기록의 ID&#10;     */&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 ID 생성&#10;        val recordId = System.currentTimeMillis()&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedLevel = level,&#10;            levelTitle = levelTitles[level - 1],&#10;            isCompleted = true&#10;        )&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;&#10;        // 기록 저장&#10;        with(sharedPref.edit()) {&#10;            putString(&quot;records&quot;, SobrietyRecord.toJsonArray(records))&#10;            apply()&#10;        }&#10;&#10;        // 현재 진행중인 금주 데이터 초기화&#10;        with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;            clear()&#10;            apply()&#10;        }&#10;&#10;        return recordId&#10;    }&#10;&#10;    /**&#10;     * 눈에 잘 보이는 버튼이 있는 커스텀 중지 확인 다이얼로그를 표시합니다.&#10;     */&#10;    private fun showCustomStopDialog() {&#10;        // 커스텀 다이얼로그 생성&#10;        val dialog = android.app.Dialog(this)&#10;        dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#10;        dialog.setContentView(com.example.alcoholictimer.R.layout.dialog_stop_sobriety)&#10;&#10;        // 다이얼로그 배경을 투명하게 설정하고 외부 영역 클릭으로 닫히지 않게 설정&#10;        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)&#10;        dialog.setCancelable(false)&#10;&#10;        // 취소 버튼 클릭 리스너&#10;        val btnCancel = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnCancel)&#10;        btnCancel.setOnClickListener {&#10;            dialog.dismiss()&#10;        }&#10;&#10;        // 확인 버튼 클릭 리스너&#10;        val btnConfirm = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnConfirm)&#10;        btnConfirm.setOnClickListener {&#10;            dialog.dismiss()&#10;&#10;            // SharedPreferences 초기화&#10;            with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;                clear()&#10;                apply()&#10;            }&#10;&#10;            // 시작 화면으로 이동&#10;            val intent = Intent(this@StatusActivity, MainActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;            startActivity(intent)&#10;            finish()&#10;&#10;            // 토스트 메시지 표시&#10;            Toast.makeText(this@StatusActivity, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        // 다이얼로그 표시&#10;        dialog.show()&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import java.util.Timer&#10;import java.util.TimerTask&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;&#10;class StatusActivity : BaseActivity() {&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#10;    private var goalAchievementChecked = false&#10;&#10;    // 일 단위 레벨 마일스톤 (실제 운영)&#10;    private val levelMilestones = listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;&#10;    // 분 단위 레벨 마일스톤 (테스트 모드)&#10;    private val minuteTestMilestones = listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;&#10;    // 초 단위 레벨 마일스톤 (초 단위 테스트 모드)&#10;    private val secondTestMilestones = listOf(0, 7, 14, 30, 60, 90, 120, 180)&#10;&#10;    private val levelTitles = listOf(&#10;        &quot;새싹 도전자&quot;,&#10;        &quot;첫걸음 성공&quot;,&#10;        &quot;의지의 시작&quot;,&#10;        &quot;한달의 기적&quot;,&#10;        &quot;습관의 탄생&quot;,&#10;        &quot;의지의 달인&quot;,&#10;        &quot;금주의 마스터&quot;,&#10;        &quot;절제의 달인&quot;&#10;    )&#10;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#10;    private var timer: Timer? = null&#10;    private val handler = Handler(Looper.getMainLooper())&#10;&#10;    // UI 요소 참조 저장 변수&#10;    private lateinit var tvDaysCount: TextView&#10;    private lateinit var tvTimeUnit: TextView&#10;    private lateinit var tvMessage: TextView&#10;    private lateinit var progressLevel: ProgressBar&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        // 화면이 보일 때 타이머 시작&#10;        startTimer()&#10;&#10;        // 목표 달성 플래그 초기화&#10;        goalAchievementChecked = false&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // 화면이 보이지 않을 때 타이머 정지&#10;        stopTimer()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        // 기존 타이머가 있다면 중지&#10;        stopTimer()&#10;&#10;        // 새 타이머 생성 및 시작&#10;        timer = Timer()&#10;        timer?.schedule(object : TimerTask() {&#10;            override fun run() {&#10;                // UI 업데이트는 메인 스레드에서 수행해야 함&#10;                handler.post {&#10;                    updateUI()&#10;                }&#10;            }&#10;        }, 0, 1000) // 1초마다 업데이트&#10;    }&#10;&#10;    private fun stopTimer() {&#10;        timer?.cancel()&#10;        timer = null&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StatusActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_status, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        tvDaysCount = view.findViewById(R.id.tvDaysCount)&#10;        tvTimeUnit = view.findViewById(R.id.tvTimeUnit)&#10;        tvMessage = view.findViewById(R.id.tvMessage)&#10;        progressLevel = view.findViewById(R.id.progressLevel)&#10;&#10;        // 시간 단위 텍스트 설정&#10;        tvTimeUnit.text = Constants.TIME_UNIT_TEXT&#10;&#10;        // 중지 버튼 설정&#10;        val btnStopSobriety = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#10;        btnStopSobriety.setOnClickListener {&#10;            // 기존 AlertDialog 대신 커스텀 다이얼로그 사용&#10;            showCustomStopDialog()&#10;        }&#10;&#10;        // 최초 UI 업데이트&#10;        updateUI()&#10;    }&#10;&#10;    /**&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#10;     */&#10;    private fun updateUI() {&#10;        // SharedPreferences에서 데이터 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;&#10;        // 타이머가 이미 완료되었는지 확인&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        // 타이머가 이미 완료된 상태면 목표 일수를 보여주고 즉시 리턴&#10;        if (completionFlag) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;&#10;            // 완료 상태에서는 프로그레스바를 100%로 설정&#10;            progressLevel.progress = 100&#10;            return&#10;        }&#10;&#10;        // 경과 시간 계산 (테스트 모드에 따라 일, 분 또는 초 단위로 계산)&#10;        val timePassed = ((System.currentTimeMillis() - startTime) / Constants.TIME_UNIT_MILLIS).toInt()&#10;&#10;        // UI 업데이트 - 마지막 목표 숫자에 도달하면 숫자를 증가시키지 않고 색상 변경&#10;        if (timePassed &gt;= targetDays) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            // 목표 달성 시 주황색으로 변경&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;&#10;            // 프로그레스바를 100%로 강제 설정&#10;            progressLevel.progress = 100&#10;&#10;            // 타이머가 완료되었음을 저장&#10;            with(sharedPref.edit()) {&#10;                putBoolean(&quot;timer_completed&quot;, true)&#10;                apply()&#10;            }&#10;&#10;            // 목표 달성 시 타이머 즉시 중지&#10;            stopTimer()&#10;&#10;            // 목표 달성 여부 메시지&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;&#10;            // 목표 달성 시 처리 (한 번만 실행되도록)&#10;            if (!goalAchievementChecked) {&#10;                goalAchievementChecked = true&#10;&#10;                // 테스트 모드에 따라 적절한 마일스톤 선택&#10;                val adjustedMilestones = when {&#10;                    Constants.SECOND_TEST_MODE -&gt; secondTestMilestones&#10;                    Constants.TEST_MODE -&gt; minuteTestMilestones&#10;                    else -&gt; levelMilestones&#10;                }&#10;&#10;                // 레벨 계산 (기록 목적으로만 사용)&#10;                var currentLevel = 0&#10;                for (i in adjustedMilestones.indices) {&#10;                    if (timePassed &gt;= adjustedMilestones[i]) {&#10;                        currentLevel = i&#10;                    } else {&#10;                        break&#10;                    }&#10;                }&#10;&#10;                // 기록 저장 및 완료 처리&#10;                val recordId = saveCompletedRecord(startTime, System.currentTimeMillis(), targetDays, currentLevel + 1)&#10;&#10;                // 토스트 메시지 표시&#10;                Toast.makeText(this, &quot;목표 달성! 금주가 완료되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;&#10;                // 요약 화면으로 이동&#10;                handler.postDelayed({&#10;                    val intent = Intent(this, RecordSummaryActivity::class.java)&#10;                    intent.putExtra(&quot;record_id&quot;, recordId)&#10;                    startActivity(intent)&#10;                    finish()&#10;                }, 1000) // 1초 후 이동&#10;            }&#10;        } else {&#10;            // 아직 목표 달성 전이면 일반적인 숫자 표시 (1일차부터 시작)&#10;            tvDaysCount.text = (timePassed + 1).toString()&#10;            // 기본 색상으로 설정&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.black, theme))&#10;&#10;            // 테스트 모드에 따라 적절한 마일스톤 선택&#10;            val adjustedMilestones = when {&#10;                Constants.SECOND_TEST_MODE -&gt; secondTestMilestones&#10;                Constants.TEST_MODE -&gt; minuteTestMilestones&#10;                else -&gt; levelMilestones&#10;            }&#10;&#10;            // 레벨 계산 (기록 목적으로만 사용)&#10;            var currentLevel = 0&#10;            for (i in adjustedMilestones.indices) {&#10;                if (timePassed &gt;= adjustedMilestones[i]) {&#10;                    currentLevel = i&#10;                } else {&#10;                    break&#10;                }&#10;            }&#10;&#10;            // 프로그레스바 업데이트 - 전체 목표일 수 기준으로 계산&#10;            val progressPercentage = (timePassed.toFloat() / targetDays) * 100&#10;            progressLevel.progress = progressPercentage.toInt().coerceIn(0, 100)&#10;&#10;            // 남은 일수 메시지에도 +1 적용하지 않음 (실제 목표까지 남은 날짜를 정확하게 표시)&#10;            tvMessage.text = &quot;목표까지 ${targetDays - timePassed}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 완료된 금주 기록을 저장합니다&#10;     * @return 저장된 기록의 ID&#10;     */&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 ID 생성&#10;        val recordId = System.currentTimeMillis()&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedLevel = level,&#10;            levelTitle = levelTitles[level - 1],&#10;            isCompleted = true&#10;        )&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;&#10;        // 기록 저장&#10;        with(sharedPref.edit()) {&#10;            putString(&quot;records&quot;, SobrietyRecord.toJsonArray(records))&#10;            apply()&#10;        }&#10;&#10;        // 현재 진행중인 금주 데이터 초기화&#10;        with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;            clear()&#10;            apply()&#10;        }&#10;&#10;        return recordId&#10;    }&#10;&#10;    /**&#10;     * 눈에 잘 보이는 버튼이 있는 커스텀 중지 확인 다이얼로그를 표시합니다.&#10;     */&#10;    private fun showCustomStopDialog() {&#10;        // 커스텀 다이얼로그 생성&#10;        val dialog = android.app.Dialog(this)&#10;        dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#10;        dialog.setContentView(com.example.alcoholictimer.R.layout.dialog_stop_sobriety)&#10;&#10;        // 다이얼로그 배경을 투명하게 설정하고 외부 영역 클릭으로 닫히지 않게 설정&#10;        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)&#10;        dialog.setCancelable(false)&#10;&#10;        // 취소 버튼 클릭 리스너&#10;        val btnCancel = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnCancel)&#10;        btnCancel.setOnClickListener {&#10;            dialog.dismiss()&#10;        }&#10;&#10;        // 확인 버튼 클릭 리스너&#10;        val btnConfirm = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnConfirm)&#10;        btnConfirm.setOnClickListener {&#10;            dialog.dismiss()&#10;&#10;            // SharedPreferences 초기화&#10;            with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;                clear()&#10;                apply()&#10;            }&#10;&#10;            // 시작 화면으로 이동&#10;            val intent = Intent(this@StatusActivity, MainActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;            startActivity(intent)&#10;            finish()&#10;&#10;            // 토스트 메시지 표시&#10;            Toast.makeText(this@StatusActivity, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        // 다이얼로그 표시&#10;        dialog.show()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/utils/Constants.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer.utils&#10;&#10;object Constants {&#10;    // 테스트 모드 설정 (true: 분 단위, false: 일 단위)&#10;    const val TEST_MODE = true&#10;&#10;    // 프로그레스바 초 단위 테스트 모드&#10;    const val PROGRESS_TEST_MODE = true&#10;&#10;    // 시간 변환 상수&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#10;&#10;    // 사용할 시간 단위&#10;    val TIME_UNIT_MILLIS = if (TEST_MODE) MINUTE_IN_MILLIS else DAY_IN_MILLIS&#10;&#10;    // 프로그레스바용 시간 단위 (초 단위 테스트를 위함)&#10;    val PROGRESS_TIME_UNIT_MILLIS = if (PROGRESS_TEST_MODE) SECOND_IN_MILLIS else TIME_UNIT_MILLIS&#10;&#10;    // 단위 텍스트&#10;    val TIME_UNIT_TEXT = if (TEST_MODE) &quot;분&quot; else &quot;일&quot;&#10;    val PROGRESS_TIME_UNIT_TEXT = if (PROGRESS_TEST_MODE) &quot;초&quot; else TIME_UNIT_TEXT&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer.utils&#10;&#10;object Constants {&#10;    // 테스트 모드 설정 (true: 초 단위, false: 일 단위)&#10;    const val TEST_MODE = true&#10;    &#10;    // 초 단위 테스트 모드 (1초 = 1일 개념)&#10;    const val SECOND_TEST_MODE = true&#10;    &#10;    // 프로그레스바 초 단위 테스트 모드&#10;    const val PROGRESS_TEST_MODE = true&#10;&#10;    // 시간 변환 상수&#10;    const val DAY_IN_MILLIS = 1000L * 60 * 60 * 24  // 일 단위 (1일 = 24시간)&#10;    const val MINUTE_IN_MILLIS = 1000L * 60         // 분 단위 (1분 = 60초)&#10;    const val SECOND_IN_MILLIS = 1000L              // 초 단위&#10;&#10;    // 사용할 시간 단위&#10;    val TIME_UNIT_MILLIS = when {&#10;        SECOND_TEST_MODE -&gt; SECOND_IN_MILLIS  // 초 단위 테스트 (1초 = 1일)&#10;        TEST_MODE -&gt; MINUTE_IN_MILLIS         // 분 단위 테스트 (1분 = 1일)&#10;        else -&gt; DAY_IN_MILLIS                 // 실제 일 단위 (1일 = 24시간)&#10;    }&#10;&#10;    // 프로그레스바용 시간 단위&#10;    val PROGRESS_TIME_UNIT_MILLIS = if (PROGRESS_TEST_MODE) SECOND_IN_MILLIS else TIME_UNIT_MILLIS&#10;&#10;    // 단위 텍스트&#10;    val TIME_UNIT_TEXT = when {&#10;        SECOND_TEST_MODE -&gt; &quot;초&quot;  // 초 단위 테스트 시 표시 텍스트&#10;        TEST_MODE -&gt; &quot;분&quot;        // 분 단위 테스트 시 표시 텍스트&#10;        else -&gt; &quot;일&quot;            // 실제 운영 시 표시 텍스트&#10;    }&#10;    &#10;    val PROGRESS_TIME_UNIT_TEXT = if (PROGRESS_TEST_MODE) &quot;초&quot; else TIME_UNIT_TEXT&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/btn_outline_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/btn_outline_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;#000000&quot; /&gt;&#10;    &lt;corners android:radius=&quot;4dp&quot; /&gt;&#10;    &lt;solid android:color=&quot;#00000000&quot; /&gt; &lt;!-- 투명 배경 --&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/drawable/btn_primary_background.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/drawable/btn_primary_background.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    android:shape=&quot;rectangle&quot;&gt;&#10;    &lt;stroke&#10;        android:width=&quot;1dp&quot;&#10;        android:color=&quot;#000000&quot; /&gt;&#10;    &lt;corners android:radius=&quot;4dp&quot; /&gt;&#10;    &lt;solid android:color=&quot;#00000000&quot; /&gt; &lt;!-- 투명 배경 --&gt;&#10;&lt;/shape&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/custom_numpad.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/custom_numpad.xml" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;wrap_content&quot;&#10;    android:background=&quot;#F8F8F8&quot;&#10;    android:padding=&quot;8dp&quot;&gt;&#10;&#10;    &lt;GridLayout&#10;        android:id=&quot;@+id/numpadGrid&quot;&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;wrap_content&quot;&#10;        android:columnCount=&quot;3&quot;&#10;        android:rowCount=&quot;4&quot;&#10;        android:orientation=&quot;horizontal&quot;&#10;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;&#10;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;&#10;        app:layout_constraintStart_toStartOf=&quot;parent&quot;&#10;        app:layout_constraintTop_toTopOf=&quot;parent&quot;&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn1&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;60dp&quot;&#10;            android:layout_rowWeight=&quot;1&quot;&#10;            android:layout_columnWeight=&quot;1&quot;&#10;            android:layout_margin=&quot;4dp&quot;&#10;            android:text=&quot;1&quot;&#10;            android:textSize=&quot;22sp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn2&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;60dp&quot;&#10;            android:layout_rowWeight=&quot;1&quot;&#10;            android:layout_columnWeight=&quot;1&quot;&#10;            android:layout_margin=&quot;4dp&quot;&#10;            android:text=&quot;2&quot;&#10;            android:textSize=&quot;22sp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn3&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;60dp&quot;&#10;            android:layout_rowWeight=&quot;1&quot;&#10;            android:layout_columnWeight=&quot;1&quot;&#10;            android:layout_margin=&quot;4dp&quot;&#10;            android:text=&quot;3&quot;&#10;            android:textSize=&quot;22sp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn4&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;60dp&quot;&#10;            android:layout_rowWeight=&quot;1&quot;&#10;            android:layout_columnWeight=&quot;1&quot;&#10;            android:layout_margin=&quot;4dp&quot;&#10;            android:text=&quot;4&quot;&#10;            android:textSize=&quot;22sp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn5&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;60dp&quot;&#10;            android:layout_rowWeight=&quot;1&quot;&#10;            android:layout_columnWeight=&quot;1&quot;&#10;            android:layout_margin=&quot;4dp&quot;&#10;            android:text=&quot;5&quot;&#10;            android:textSize=&quot;22sp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn6&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;60dp&quot;&#10;            android:layout_rowWeight=&quot;1&quot;&#10;            android:layout_columnWeight=&quot;1&quot;&#10;            android:layout_margin=&quot;4dp&quot;&#10;            android:text=&quot;6&quot;&#10;            android:textSize=&quot;22sp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn7&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;60dp&quot;&#10;            android:layout_rowWeight=&quot;1&quot;&#10;            android:layout_columnWeight=&quot;1&quot;&#10;            android:layout_margin=&quot;4dp&quot;&#10;            android:text=&quot;7&quot;&#10;            android:textSize=&quot;22sp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn8&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;60dp&quot;&#10;            android:layout_rowWeight=&quot;1&quot;&#10;            android:layout_columnWeight=&quot;1&quot;&#10;            android:layout_margin=&quot;4dp&quot;&#10;            android:text=&quot;8&quot;&#10;            android:textSize=&quot;22sp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn9&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;60dp&quot;&#10;            android:layout_rowWeight=&quot;1&quot;&#10;            android:layout_columnWeight=&quot;1&quot;&#10;            android:layout_margin=&quot;4dp&quot;&#10;            android:text=&quot;9&quot;&#10;            android:textSize=&quot;22sp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnClear&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;60dp&quot;&#10;            android:layout_rowWeight=&quot;1&quot;&#10;            android:layout_columnWeight=&quot;1&quot;&#10;            android:layout_margin=&quot;4dp&quot;&#10;            android:text=&quot;C&quot;&#10;            android:textSize=&quot;22sp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btn0&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;60dp&quot;&#10;            android:layout_rowWeight=&quot;1&quot;&#10;            android:layout_columnWeight=&quot;1&quot;&#10;            android:layout_margin=&quot;4dp&quot;&#10;            android:text=&quot;0&quot;&#10;            android:textSize=&quot;22sp&quot; /&gt;&#10;&#10;        &lt;Button&#10;            android:id=&quot;@+id/btnDelete&quot;&#10;            android:layout_width=&quot;0dp&quot;&#10;            android:layout_height=&quot;60dp&quot;&#10;            android:layout_rowWeight=&quot;1&quot;&#10;            android:layout_columnWeight=&quot;1&quot;&#10;            android:layout_margin=&quot;4dp&quot;&#10;            android:text=&quot;⌫&quot;&#10;            android:textSize=&quot;22sp&quot; /&gt;&#10;    &lt;/GridLayout&gt;&#10;&#10;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/layout_base.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/layout_base.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;androidx.drawerlayout.widget.DrawerLayout&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#10;    android:id=&quot;@+id/drawerLayout&quot;&#10;    android:layout_width=&quot;match_parent&quot;&#10;    android:layout_height=&quot;match_parent&quot;&#10;    android:background=&quot;@color/background&quot;&gt;&#10;&#10;    &lt;!-- 메인 컨텐츠 컨테이너 --&gt;&#10;    &lt;LinearLayout&#10;        android:layout_width=&quot;match_parent&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:orientation=&quot;vertical&quot;&gt;&#10;&#10;        &lt;!-- 상단 툴바 --&gt;&#10;        &lt;androidx.appcompat.widget.Toolbar&#10;            android:id=&quot;@+id/toolbar&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;wrap_content&quot;&#10;            android:minHeight=&quot;?attr/actionBarSize&quot;&#10;            android:paddingTop=&quot;24dp&quot;&#10;            android:background=&quot;@color/background&quot;&#10;            android:elevation=&quot;0dp&quot;&gt;&#10;&#10;            &lt;ImageButton&#10;                android:id=&quot;@+id/btnMenu&quot;&#10;                android:layout_width=&quot;48dp&quot;&#10;                android:layout_height=&quot;48dp&quot;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#10;                android:src=&quot;@drawable/ic_menu&quot;&#10;                android:contentDescription=&quot;메뉴 열기&quot;/&gt;&#10;&#10;        &lt;/androidx.appcompat.widget.Toolbar&gt;&#10;&#10;        &lt;!-- 각 화면의 컨텐츠가 들어갈 곳 --&gt;&#10;        &lt;FrameLayout&#10;            android:id=&quot;@+id/contentFrame&quot;&#10;            android:layout_width=&quot;match_parent&quot;&#10;            android:layout_height=&quot;match_parent&quot; /&gt;&#10;    &lt;/LinearLayout&gt;&#10;&#10;    &lt;!-- 네비게이션 드로어 --&gt;&#10;    &lt;com.google.android.material.navigation.NavigationView&#10;        android:id=&quot;@+id/navigationView&quot;&#10;        android:layout_width=&quot;wrap_content&quot;&#10;        android:layout_height=&quot;match_parent&quot;&#10;        android:layout_gravity=&quot;start&quot;&#10;        android:background=&quot;@color/background&quot;&#10;        app:menu=&quot;@menu/drawer_menu&quot;/&gt;&#10;&#10;&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;androidx.drawerlayout.widget.DrawerLayout&#13;&#10;    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;&#13;&#10;    android:id=&quot;@+id/drawerLayout&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;match_parent&quot;&#13;&#10;    android:background=&quot;@color/background&quot;&gt;&#13;&#10;&#13;&#10;    &lt;!-- 메인 컨텐츠 컨테이너 --&gt;&#13;&#10;    &lt;LinearLayout&#13;&#10;        android:layout_width=&quot;match_parent&quot;&#13;&#10;        android:layout_height=&quot;match_parent&quot;&#13;&#10;        android:orientation=&quot;vertical&quot;&gt;&#13;&#10;&#13;&#10;        &lt;!-- 상단 툴바 --&gt;&#13;&#10;        &lt;androidx.appcompat.widget.Toolbar&#13;&#10;            android:id=&quot;@+id/toolbar&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;wrap_content&quot;&#13;&#10;            android:minHeight=&quot;?attr/actionBarSize&quot;&#13;&#10;            android:paddingTop=&quot;24dp&quot;&#13;&#10;            android:background=&quot;@color/background&quot;&#13;&#10;            android:elevation=&quot;0dp&quot;&gt;&#13;&#10;&#13;&#10;            &lt;ImageButton&#13;&#10;                android:id=&quot;@+id/btnMenu&quot;&#13;&#10;                android:layout_width=&quot;48dp&quot;&#13;&#10;                android:layout_height=&quot;48dp&quot;&#13;&#10;                android:background=&quot;?attr/selectableItemBackgroundBorderless&quot;&#13;&#10;                android:src=&quot;@drawable/ic_menu&quot;&#13;&#10;                android:contentDescription=&quot;메뉴 열기&quot;/&gt;&#13;&#10;&#13;&#10;        &lt;/androidx.appcompat.widget.Toolbar&gt;&#13;&#10;&#13;&#10;        &lt;!-- 각 화면의 컨텐츠가 들어갈 곳 --&gt;&#13;&#10;        &lt;FrameLayout&#13;&#10;            android:id=&quot;@+id/contentFrame&quot;&#13;&#10;            android:layout_width=&quot;match_parent&quot;&#13;&#10;            android:layout_height=&quot;match_parent&quot; /&gt;&#13;&#10;    &lt;/LinearLayout&gt;&#13;&#10;&#13;&#10;    &lt;!-- 네비게이션 드로어 --&gt;&#13;&#10;    &lt;com.google.android.material.navigation.NavigationView&#13;&#10;        android:id=&quot;@+id/navigationView&quot;&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;match_parent&quot;&#13;&#10;        android:layout_gravity=&quot;start&quot;&#13;&#10;        android:background=&quot;@color/background&quot;&#13;&#10;        app:headerLayout=&quot;@layout/nav_header&quot;&#13;&#10;        app:menu=&quot;@menu/drawer_menu&quot;&#13;&#10;        app:itemIconTint=&quot;@color/primary&quot;&#13;&#10;        app:itemTextColor=&quot;@android:color/black&quot;/&gt;&#13;&#10;&#13;&#10;&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/layout/nav_header.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/layout/nav_header.xml" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#13;&#10;&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&#13;&#10;    android:layout_width=&quot;match_parent&quot;&#13;&#10;    android:layout_height=&quot;wrap_content&quot;&#13;&#10;    android:background=&quot;#FFFFFF&quot;&#13;&#10;    android:orientation=&quot;vertical&quot;&#13;&#10;    android:padding=&quot;16dp&quot;&#13;&#10;    android:theme=&quot;@style/ThemeOverlay.AppCompat.Light&quot;&gt;&#13;&#10;&#13;&#10;    &lt;!-- 프로필 아이콘 --&gt;&#13;&#10;    &lt;ImageView&#13;&#10;        android:id=&quot;@+id/ivProfileIcon&quot;&#13;&#10;        android:layout_width=&quot;80dp&quot;&#13;&#10;        android:layout_height=&quot;80dp&quot;&#13;&#10;        android:layout_marginTop=&quot;24dp&quot;&#13;&#10;        android:contentDescription=&quot;프로필 아이콘&quot;&#13;&#10;        android:src=&quot;@drawable/ic_profile&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- 사용자 이름/별명 --&gt;&#13;&#10;    &lt;TextView&#13;&#10;        android:id=&quot;@+id/tvUserNickname&quot;&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_marginTop=&quot;16dp&quot;&#13;&#10;        android:text=&quot;알중이&quot;&#13;&#10;        android:textAppearance=&quot;@style/TextAppearance.AppCompat.Body1&quot;&#13;&#10;        android:textColor=&quot;#000000&quot;&#13;&#10;        android:textSize=&quot;18sp&quot;&#13;&#10;        android:textStyle=&quot;bold&quot; /&gt;&#13;&#10;&#13;&#10;    &lt;!-- 레벨 및 금주 일수 --&gt;&#13;&#10;    &lt;TextView&#13;&#10;        android:id=&quot;@+id/tvUserLevelDays&quot;&#13;&#10;        android:layout_width=&quot;wrap_content&quot;&#13;&#10;        android:layout_height=&quot;wrap_content&quot;&#13;&#10;        android:layout_marginTop=&quot;4dp&quot;&#13;&#10;        android:layout_marginBottom=&quot;16dp&quot;&#13;&#10;        android:text=&quot;Level 1 · 0일 금주 중&quot;&#13;&#10;        android:textColor=&quot;#000000&quot;&#13;&#10;        android:textAppearance=&quot;@style/TextAppearance.AppCompat.Body1&quot; /&gt;&#13;&#10;&#13;&#10;&lt;/LinearLayout&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/res/menu/drawer_menu.xml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/res/menu/drawer_menu.xml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_start&quot;&#10;        android:title=&quot;금주 시작&quot;/&gt;&#10;    &lt;item&#10;        android:id=&quot;@+id/nav_status&quot;&#10;        android:title=&quot;활동 보기&quot;/&gt;&#10;&lt;/menu&gt;&#10;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&#10;&lt;menu xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;&#10;    &lt;!-- 메뉴 섹션 --&gt;&#10;    &lt;group android:id=&quot;@+id/group_main_menu&quot;&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_start&quot;&#10;            android:icon=&quot;@drawable/ic_flag&quot;&#10;            android:title=&quot;금주 시작&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_records&quot;&#10;            android:icon=&quot;@drawable/ic_calendar&quot;&#10;            android:title=&quot;활동 보기&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_challenge&quot;&#10;            android:icon=&quot;@drawable/ic_trophy&quot;&#10;            android:title=&quot;챌린지&quot;&#10;            android:enabled=&quot;false&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_messages&quot;&#10;            android:icon=&quot;@drawable/ic_message&quot;&#10;            android:title=&quot;응원 메시지&quot;&#10;            android:enabled=&quot;false&quot; /&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_notifications&quot;&#10;            android:icon=&quot;@drawable/ic_notification&quot;&#10;            android:title=&quot;알림함&quot;&#10;            android:enabled=&quot;false&quot; /&gt;&#10;    &lt;/group&gt;&#10;&#10;    &lt;!-- 설정 섹션 --&gt;&#10;    &lt;group android:id=&quot;@+id/group_settings&quot;&gt;&#10;        &lt;item&#10;            android:id=&quot;@+id/nav_settings&quot;&#10;            android:icon=&quot;@drawable/ic_settings&quot;&#10;            android:title=&quot;설정&quot; /&gt;&#10;    &lt;/group&gt;&#10;&lt;/menu&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>