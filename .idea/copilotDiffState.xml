<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/StatusActivity.kt" />
              <option name="originalContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.RecordManager&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.Timer&#10;import java.util.TimerTask&#10;&#10;class StatusActivity : BaseActivity() {&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#10;    private var goalAchievementChecked = false&#10;&#10;    // 일 단위 레벨 마일스톤 (실제 운영)&#10;    private val levelMilestones = listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;&#10;    // 분 단위 레벨 마일스톤 (테스트 모드)&#10;    private val minuteTestMilestones = listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;&#10;    // 초 단위 레벨 마일스톤 (초 단위 테스트 모드)&#10;    private val secondTestMilestones = listOf(0, 7, 14, 30, 60, 90, 120, 180)&#10;&#10;    private val levelTitles = listOf(&#10;        &quot;새싹 도전자&quot;,&#10;        &quot;첫걸음 성공&quot;,&#10;        &quot;의지의 시작&quot;,&#10;        &quot;한달의 기적&quot;,&#10;        &quot;습관의 탄생&quot;,&#10;        &quot;의지의 달인&quot;,&#10;        &quot;금주의 마스터&quot;,&#10;        &quot;절제의 달인&quot;&#10;    )&#10;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#10;    private var timer: Timer? = null&#10;    private val handler = Handler(Looper.getMainLooper())&#10;&#10;    // UI 요소 참조 저장 변수&#10;    private lateinit var tvDaysCount: TextView&#10;    private lateinit var tvTimeUnit: TextView&#10;    private lateinit var tvMessage: TextView&#10;    private lateinit var progressLevel: ProgressBar&#10;    private lateinit var tvTimeDetail: TextView&#10;    private lateinit var tvHoursDisplay: TextView // 시간 표시용 TextView 추가&#10;&#10;    // 금주 시작 시간 저장 변수&#10;    private var abstainStartTime: String = &quot;&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;        updateUI()&#10;        startTimer()&#10;&#10;        // 목표 달성 플래그 초기화&#10;        goalAchievementChecked = false&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // 화면이 보이지 않을 때 타이머 정지&#10;        stopTimer()&#10;    }&#10;&#10;    // Activity 클래스의 onNewIntent를 오버라이드&#10;    public override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        // 새 인텐트로 액티비티가 재사용될 때 수행할 작업&#10;        setIntent(intent)&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;        // UI 즉시 갱신&#10;        updateUI()&#10;    }&#10;&#10;    override fun handleNewIntent(intent: Intent?) {&#10;        // BaseActivity의 handleNewIntent 구현&#10;        updateUI()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        stopTimer()&#10;        timer = Timer()&#10;        timer?.scheduleAtFixedRate(object : TimerTask() {&#10;            override fun run() {&#10;                handler.post {&#10;                    updateTimeDisplay()&#10;                }&#10;            }&#10;        }, 0, 100)  // 100ms 간격으로 업데이트&#10;    }&#10;&#10;    private fun stopTimer() {&#10;        timer?.cancel()&#10;        timer = null&#10;    }&#10;&#10;    private fun updateTimeDisplay() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따른 시간 계산 - 대형 숫자 업데이트&#10;        val timePassed = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;        }&#10;        &#10;        // 대형 숫자 실시간 업데이트 (특히 초 모드에서 중요)&#10;        tvDaysCount.text = timePassed.toString()&#10;&#10;        // 시간 계산&#10;        val hours = (secondsPassed / 3600) % 24&#10;&#10;        // 시간 표시 업데이트&#10;        tvHoursDisplay.text = String.format(&quot;%02d시간&quot;, hours)&#10;&#10;        // 테스트 모드별 시간 표시 업데이트&#10;        val timeText = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;        }&#10;&#10;        tvTimeDetail.text = timeText&#10;        &#10;        // 진행 상태 확인 및 완료 처리&#10;        checkProgressStatus()&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StatusActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_status, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        tvDaysCount = view.findViewById(R.id.tvDaysCount)&#10;        tvTimeUnit = view.findViewById(R.id.tvTimeUnit)&#10;        tvMessage = view.findViewById(R.id.tvMessage)&#10;        progressLevel = view.findViewById(R.id.progressLevel)&#10;        tvTimeDetail = view.findViewById(R.id.tvTimeDetail)&#10;        tvHoursDisplay = view.findViewById(R.id.tvHoursDisplay) // 시간 표시 TextView 초기화&#10;        tvTimeDetail.text = &quot;00:00:00&quot;  // 초기값 변경&#10;&#10;        // 시간 단위 텍스트 설정&#10;        tvTimeUnit.text = Constants.TIME_UNIT_TEXT&#10;&#10;        // 중지 버튼 설정&#10;        val btnStopSobriety = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#10;        btnStopSobriety.setOnClickListener {&#10;            // 기존 AlertDialog 대신 커스텀 다이얼로그 사용&#10;            showCustomStopDialog()&#10;        }&#10;&#10;        // 최초 UI 업데이트&#10;        updateUI()&#10;    }&#10;&#10;    private fun displayTimeDetails(timePassed: Int, secondsPassed: Long) {&#10;        val timeText = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val seconds = secondsPassed % 60&#10;                val millis = (System.currentTimeMillis() % 1000) / 10&#10;                String.format(&quot;%02d:%02d&quot;, seconds, millis)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val minutes = secondsPassed / 60&#10;                val seconds = secondsPassed % 60&#10;                String.format(&quot;%02d:%02d&quot;, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val hours = (secondsPassed / 3600) % 24&#10;                val minutes = (secondsPassed / 60) % 60&#10;                String.format(&quot;%02d:%02d&quot;, hours, minutes)&#10;            }&#10;        }&#10;&#10;        tvTimeDetail.text = timeText&#10;    }&#10;&#10;    /**&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#10;     */&#10;    private fun updateUI() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        if (completionFlag) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;            progressLevel.progress = 100&#10;            return&#10;        }&#10;&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따른 시간 계산&#10;        val timePassed = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;        }&#10;&#10;        // 대형 숫자에 진행 중인 시간 표시&#10;        tvDaysCount.text = timePassed.toString()&#10;&#10;        // 진행률 계산&#10;        val targetSeconds = when {&#10;            Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;            Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;            else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;        }&#10;&#10;        val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;        progressLevel.progress = progress.coerceIn(0, 100)&#10;&#10;        // 타이머 표시 업데이트&#10;        updateTimeDisplay()&#10;&#10;        // 완료 조건 확인 - 초단위 테스트 모드에서는 초 단위로 비교&#10;        val isCompleted = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#10;            Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#10;            else -&gt; timePassed &gt; targetDays&#10;        }&#10;&#10;        if (isCompleted) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            progressLevel.progress = 100&#10;            handleGoalCompletion(targetDays)&#10;        } else {&#10;            // 남은 시간 계산 및 메시지 업데이트&#10;            val remainingTime = targetDays - timePassed + 1&#10;            tvMessage.text = &quot;목표까지 ${remainingTime}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;        }&#10;    }&#10;&#10;    private fun handleGoalCompletion(targetDays: Int) {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val endTime = System.currentTimeMillis()&#10;&#10;        with(sharedPref.edit()) {&#10;            putBoolean(&quot;timer_completed&quot;, true)&#10;            apply()&#10;        }&#10;&#10;        if (!goalAchievementChecked) {&#10;            goalAchievementChecked = true&#10;            stopTimer()&#10;&#10;            // 3초 후에 기록 화면으로 이동&#10;            Handler(Looper.getMainLooper()).postDelayed({&#10;                // 활동 기록 저장&#10;                saveActivity(true)&#10;                // 기록 화면으로 이동&#10;                navigateToRecords()&#10;            }, 3000)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 완료된 금주 기록을 저장합니다&#10;     * @return 저장된 기록의 ID&#10;     */&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 ID 생성&#10;        val recordId = System.currentTimeMillis()&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedLevel = level,&#10;            levelTitle = levelTitles[level - 1],&#10;            isCompleted = true&#10;        )&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;&#10;        // 기록 저장&#10;        with(sharedPref.edit()) {&#10;            putString(&quot;records&quot;, SobrietyRecord.toJsonArray(records))&#10;            apply()&#10;        }&#10;&#10;        // 현재 진행중인 금주 데이터 초기화&#10;        with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;            clear()&#10;            apply()&#10;        }&#10;&#10;        return recordId&#10;    }&#10;&#10;    private fun saveActivity(isCompleted: Boolean) {&#10;        val activity = RecentActivity(&#10;            startDate = abstainStartTime,&#10;            endDate = getCurrentDate(),&#10;            duration = calculateDuration(),&#10;            isCompleted = isCompleted&#10;        )&#10;        RecordManager.addActivity(activity)&#10;    }&#10;&#10;    private fun onGoalCompleted() {&#10;        saveActivity(true)&#10;        navigateToRecords()&#10;    }&#10;&#10;    private fun stopAbstaining() {&#10;        saveActivity(false)&#10;        // ...existing stop logic...&#10;    }&#10;&#10;    private fun getCurrentDate(): String {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        return dateFormat.format(Date())&#10;    }&#10;&#10;    private fun calculateDuration(): Int {&#10;        val startDate = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).parse(abstainStartTime)&#10;        val currentDate = Date()&#10;        return ((currentDate.time - startDate.time) / (1000 * 60 * 60 * 24)).toInt() + 1&#10;    }&#10;&#10;    private fun navigateToRecords() {&#10;        val intent = Intent(this, RecordsActivity::class.java)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    /**&#10;     * 눈에 잘 보이는 버튼이 있는 커스텀 중지 확인 다이얼로그를 표시합니다.&#10;     */&#10;    private fun showCustomStopDialog() {&#10;        // 커스텀 다이얼로그 생성&#10;        val dialog = android.app.Dialog(this)&#10;        dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#10;        dialog.setContentView(com.example.alcoholictimer.R.layout.dialog_stop_sobriety)&#10;&#10;        // 다이얼로그 배경을 투명하게 설정하고 외부 영역 클릭으로 닫히지 않게 설정&#10;        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)&#10;        dialog.setCancelable(false)&#10;&#10;        // 취소 버튼 클릭 리스너&#10;        val btnCancel = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnCancel)&#10;        btnCancel.setOnClickListener {&#10;            dialog.dismiss()&#10;        }&#10;&#10;        // 확인 버튼 클릭 리스너&#10;        val btnConfirm = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnConfirm)&#10;        btnConfirm.setOnClickListener {&#10;            dialog.dismiss()&#10;&#10;            // SharedPreferences 초기화&#10;            with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;                clear()&#10;                apply()&#10;            }&#10;&#10;            // 시작 화면으로 이동&#10;            val intent = Intent(this@StatusActivity, MainActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;            startActivity(intent)&#10;            finish()&#10;&#10;            // 토스트 메시지 표시&#10;            Toast.makeText(this@StatusActivity, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        // 다이얼로그 표시&#10;        dialog.show()&#10;    }&#10;&#10;    private fun navigateToStart() {&#10;        val intent = Intent(this, StartActivity::class.java)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;&#10;    private fun updateTimeModeDisplay() {&#10;        val timeUnitText = when {&#10;            Constants.isSecondTestMode -&gt; &quot;금주 목표 초수&quot;&#10;            Constants.isMinuteTestMode -&gt; &quot;금주 목표 분수&quot;&#10;            else -&gt; &quot;금주 목표 일수&quot;&#10;        }&#10;        tvTimeUnit.text = timeUnitText&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.example.alcoholictimer&#10;&#10;import android.content.Intent&#10;import android.os.Bundle&#10;import android.os.Handler&#10;import android.os.Looper&#10;import android.view.LayoutInflater&#10;import android.view.ViewGroup&#10;import android.widget.ProgressBar&#10;import android.widget.TextView&#10;import android.widget.Toast&#10;import com.example.alcoholictimer.models.RecentActivity&#10;import com.example.alcoholictimer.utils.Constants&#10;import com.example.alcoholictimer.utils.RecordManager&#10;import com.example.alcoholictimer.utils.SobrietyRecord&#10;import com.google.android.material.floatingactionbutton.FloatingActionButton&#10;import java.text.SimpleDateFormat&#10;import java.util.Date&#10;import java.util.Locale&#10;import java.util.Timer&#10;import java.util.TimerTask&#10;&#10;class StatusActivity : BaseActivity() {&#10;    // 이전에 목표 달성 여부를 확인했는지 체크하는 플래그&#10;    private var goalAchievementChecked = false&#10;&#10;    // 일 단위 레벨 마일스톤 (실제 운영)&#10;    private val levelMilestones = listOf(0, 7, 14, 30, 60, 120, 240, 365)&#10;&#10;    // 분 단위 레벨 마일스톤 (테스트 모드)&#10;    private val minuteTestMilestones = listOf(0, 1, 2, 5, 10, 15, 20, 30)&#10;&#10;    // 초 단위 레벨 마일스톤 (초 단위 테스트 모드)&#10;    private val secondTestMilestones = listOf(0, 7, 14, 30, 60, 90, 120, 180)&#10;&#10;    private val levelTitles = listOf(&#10;        &quot;새싹 도전자&quot;,&#10;        &quot;첫걸음 성공&quot;,&#10;        &quot;의지의 시작&quot;,&#10;        &quot;한달의 기적&quot;,&#10;        &quot;습관의 탄생&quot;,&#10;        &quot;의지의 달인&quot;,&#10;        &quot;금주의 마스터&quot;,&#10;        &quot;절제의 달인&quot;&#10;    )&#10;&#10;    // UI 업데이트를 위한 타이머 및 핸들러&#10;    private var timer: Timer? = null&#10;    private val handler = Handler(Looper.getMainLooper())&#10;&#10;    // UI 요소 참조 저장 변수&#10;    private lateinit var tvDaysCount: TextView&#10;    private lateinit var tvTimeUnit: TextView&#10;    private lateinit var tvMessage: TextView&#10;    private lateinit var progressLevel: ProgressBar&#10;    private lateinit var tvTimeDetail: TextView&#10;    private lateinit var tvHoursDisplay: TextView // 시간 표시용 TextView 추가&#10;&#10;    // 금주 시작 시간 저장 변수&#10;    private var abstainStartTime: String = &quot;&quot;&#10;&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        // BaseActivity에서 이미 햄버거 메뉴 및 네비게이션 기능 처리됨&#10;    }&#10;&#10;    override fun onResume() {&#10;        super.onResume()&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;        updateUI()&#10;        startTimer()&#10;&#10;        // 목표 달성 플래그 초기화&#10;        goalAchievementChecked = false&#10;    }&#10;&#10;    override fun onPause() {&#10;        super.onPause()&#10;        // 화면이 보이지 않을 때 타이머 정지&#10;        stopTimer()&#10;    }&#10;&#10;    // Activity 클래스의 onNewIntent를 오버라이드&#10;    public override fun onNewIntent(intent: Intent) {&#10;        super.onNewIntent(intent)&#10;        // 새 인텐트로 액티비티가 재사용될 때 수행할 작업&#10;        setIntent(intent)&#10;        updateTimeModeDisplay()  // 모드 변경사항 업데이트&#10;        // UI 즉시 갱신&#10;        updateUI()&#10;    }&#10;&#10;    override fun handleNewIntent(intent: Intent?) {&#10;        // BaseActivity의 handleNewIntent 구현&#10;        updateUI()&#10;    }&#10;&#10;    private fun startTimer() {&#10;        stopTimer()&#10;        timer = Timer()&#10;        timer?.scheduleAtFixedRate(object : TimerTask() {&#10;            override fun run() {&#10;                handler.post {&#10;                    updateTimeDisplay()&#10;                }&#10;            }&#10;        }, 0, 100)  // 100ms 간격으로 업데이트&#10;    }&#10;&#10;    private fun stopTimer() {&#10;        timer?.cancel()&#10;        timer = null&#10;    }&#10;&#10;    private fun updateTimeDisplay() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따른 시간 계산 - 대형 숫자 업데이트&#10;        val timePassed = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;        }&#10;        &#10;        // 대형 숫자 실시간 업데이트 (특히 초 모드에서 중요)&#10;        tvDaysCount.text = timePassed.toString()&#10;&#10;        // 시간 계산&#10;        val hours = (secondsPassed / 3600) % 24&#10;&#10;        // 시간 표시 업데이트&#10;        tvHoursDisplay.text = String.format(&quot;%02d시간&quot;, hours)&#10;&#10;        // 테스트 모드별 시간 표시 업데이트&#10;        val timeText = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val totalSeconds = secondsPassed&#10;                val hours = totalSeconds / 3600&#10;                val minutes = (totalSeconds % 3600) / 60&#10;                val seconds = totalSeconds % 60&#10;                String.format(&quot;%02d:%02d:%02d&quot;, hours, minutes, seconds)&#10;            }&#10;        }&#10;&#10;        tvTimeDetail.text = timeText&#10;        &#10;        // 진행 상태 확인 및 완료 처리&#10;        checkProgressStatus()&#10;    }&#10;&#10;    override fun setupContentView() {&#10;        // StatusActivity 고유의 컨텐츠를 contentFrame에 추가&#10;        val contentFrame = findViewById&lt;ViewGroup&gt;(R.id.contentFrame)&#10;        val view = LayoutInflater.from(this).inflate(R.layout.content_status, contentFrame, true)&#10;&#10;        // UI 요소 초기화&#10;        tvDaysCount = view.findViewById(R.id.tvDaysCount)&#10;        tvTimeUnit = view.findViewById(R.id.tvTimeUnit)&#10;        tvMessage = view.findViewById(R.id.tvMessage)&#10;        progressLevel = view.findViewById(R.id.progressLevel)&#10;        tvTimeDetail = view.findViewById(R.id.tvTimeDetail)&#10;        tvHoursDisplay = view.findViewById(R.id.tvHoursDisplay) // 시간 표시 TextView 초기화&#10;        tvTimeDetail.text = &quot;00:00:00&quot;  // 초기값 변경&#10;&#10;        // 시간 단위 텍스트 설정&#10;        tvTimeUnit.text = Constants.TIME_UNIT_TEXT&#10;&#10;        // 중지 버튼 설정&#10;        val btnStopSobriety = view.findViewById&lt;FloatingActionButton&gt;(R.id.btnStopSobriety)&#10;        btnStopSobriety.setOnClickListener {&#10;            // 기존 AlertDialog 대신 커스텀 다이얼로그 사용&#10;            showCustomStopDialog()&#10;        }&#10;&#10;        // 최초 UI 업데이트&#10;        updateUI()&#10;    }&#10;&#10;    private fun displayTimeDetails(timePassed: Int, secondsPassed: Long) {&#10;        val timeText = when {&#10;            Constants.isSecondTestMode -&gt; {&#10;                val seconds = secondsPassed % 60&#10;                val millis = (System.currentTimeMillis() % 1000) / 10&#10;                String.format(&quot;%02d:%02d&quot;, seconds, millis)&#10;            }&#10;            Constants.isMinuteTestMode -&gt; {&#10;                val minutes = secondsPassed / 60&#10;                val seconds = secondsPassed % 60&#10;                String.format(&quot;%02d:%02d&quot;, minutes, seconds)&#10;            }&#10;            else -&gt; {&#10;                val hours = (secondsPassed / 3600) % 24&#10;                val minutes = (secondsPassed / 60) % 60&#10;                String.format(&quot;%02d:%02d&quot;, hours, minutes)&#10;            }&#10;        }&#10;&#10;        tvTimeDetail.text = timeText&#10;    }&#10;&#10;    /**&#10;     * UI를 업데이트하는 메서드 - 타이머에 의해 주기적으로 호출됨&#10;     */&#10;    private fun updateUI() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;&#10;        if (completionFlag) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            tvMessage.text = &quot;축하합니다! ${targetDays}${Constants.TIME_UNIT_TEXT} 목표를 달성했습니다!&quot;&#10;            progressLevel.progress = 100&#10;            return&#10;        }&#10;&#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;&#10;        // 테스트 모드에 따른 시간 계산&#10;        val timePassed = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;            Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;            else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;        }&#10;&#10;        // 대형 숫자에 진행 중인 시간 표시&#10;        tvDaysCount.text = timePassed.toString()&#10;&#10;        // 진행률 계산&#10;        val targetSeconds = when {&#10;            Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;            Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;            else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;        }&#10;&#10;        val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;        progressLevel.progress = progress.coerceIn(0, 100)&#10;&#10;        // 타이머 표시 업데이트&#10;        updateTimeDisplay()&#10;&#10;        // 완료 조건 확인 - 초단위 테스트 모드에서는 초 단위로 비교&#10;        val isCompleted = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#10;            Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#10;            else -&gt; timePassed &gt; targetDays&#10;        }&#10;&#10;        if (isCompleted) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            progressLevel.progress = 100&#10;            handleGoalCompletion(targetDays)&#10;        } else {&#10;            // 남은 시간 계산 및 메시지 업데이트&#10;            val remainingTime = targetDays - timePassed + 1&#10;            tvMessage.text = &quot;목표까지 ${remainingTime}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;        }&#10;    }&#10;&#10;    private fun handleGoalCompletion(targetDays: Int) {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val endTime = System.currentTimeMillis()&#10;&#10;        with(sharedPref.edit()) {&#10;            putBoolean(&quot;timer_completed&quot;, true)&#10;            apply()&#10;        }&#10;&#10;        if (!goalAchievementChecked) {&#10;            goalAchievementChecked = true&#10;            stopTimer()&#10;&#10;            // 3초 후에 기록 화면으로 이동&#10;            Handler(Looper.getMainLooper()).postDelayed({&#10;                // 활동 기록 저장&#10;                saveActivity(true)&#10;                // 기록 화면으로 이동&#10;                navigateToRecords()&#10;            }, 3000)&#10;        }&#10;    }&#10;&#10;    /**&#10;     * 완료된 금주 기록을 저장합니다&#10;     * @return 저장된 기록의 ID&#10;     */&#10;    private fun saveCompletedRecord(startTime: Long, endTime: Long, targetDays: Int, level: Int): Long {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ss&quot;, Locale.getDefault())&#10;        val startDate = dateFormat.format(Date(startTime))&#10;        val endDate = dateFormat.format(Date(endTime))&#10;&#10;        // 기록 ID 생성&#10;        val recordId = System.currentTimeMillis()&#10;&#10;        // 기록 객체 생성&#10;        val record = SobrietyRecord(&#10;            id = recordId,&#10;            startDate = startDate,&#10;            endDate = endDate,&#10;            duration = targetDays,&#10;            achievedLevel = level,&#10;            levelTitle = levelTitles[level - 1],&#10;            isCompleted = true&#10;        )&#10;&#10;        // 기존 기록 불러오기&#10;        val sharedPref = getSharedPreferences(&quot;sobriety_records&quot;, MODE_PRIVATE)&#10;        val recordsJson = sharedPref.getString(&quot;records&quot;, &quot;[]&quot;)&#10;        val records = SobrietyRecord.fromJsonArray(recordsJson ?: &quot;[]&quot;).toMutableList()&#10;&#10;        // 새 기록 추가&#10;        records.add(record)&#10;&#10;        // 기록 저장&#10;        with(sharedPref.edit()) {&#10;            putString(&quot;records&quot;, SobrietyRecord.toJsonArray(records))&#10;            apply()&#10;        }&#10;&#10;        // 현재 진행중인 금주 데이터 초기화&#10;        with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;            clear()&#10;            apply()&#10;        }&#10;&#10;        return recordId&#10;    }&#10;&#10;    private fun saveActivity(isCompleted: Boolean) {&#10;        val activity = RecentActivity(&#10;            startDate = abstainStartTime,&#10;            endDate = getCurrentDate(),&#10;            duration = calculateDuration(),&#10;            isCompleted = isCompleted&#10;        )&#10;        RecordManager.addActivity(activity)&#10;    }&#10;&#10;    private fun onGoalCompleted() {&#10;        saveActivity(true)&#10;        navigateToRecords()&#10;    }&#10;&#10;    private fun stopAbstaining() {&#10;        saveActivity(false)&#10;        // ...existing stop logic...&#10;    }&#10;&#10;    private fun getCurrentDate(): String {&#10;        val dateFormat = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault())&#10;        return dateFormat.format(Date())&#10;    }&#10;&#10;    private fun calculateDuration(): Int {&#10;        val startDate = SimpleDateFormat(&quot;yyyy-MM-dd&quot;, Locale.getDefault()).parse(abstainStartTime)&#10;        val currentDate = Date()&#10;        return ((currentDate.time - startDate.time) / (1000 * 60 * 60 * 24)).toInt() + 1&#10;    }&#10;&#10;    private fun navigateToRecords() {&#10;        val intent = Intent(this, RecordsActivity::class.java)&#10;        startActivity(intent)&#10;        finish()&#10;    }&#10;&#10;    /**&#10;     * 눈에 잘 보이는 버튼이 있는 커스텀 중지 확인 다이얼로그를 표시합니다.&#10;     */&#10;    private fun showCustomStopDialog() {&#10;        // 커스텀 다이얼로그 생성&#10;        val dialog = android.app.Dialog(this)&#10;        dialog.requestWindowFeature(android.view.Window.FEATURE_NO_TITLE)&#10;        dialog.setContentView(com.example.alcoholictimer.R.layout.dialog_stop_sobriety)&#10;&#10;        // 다이얼로그 배경을 투명하게 설정하고 외부 영역 클릭으로 닫히지 않게 설정&#10;        dialog.window?.setBackgroundDrawableResource(android.R.color.transparent)&#10;        dialog.setCancelable(false)&#10;&#10;        // 취소 버튼 클릭 리스너&#10;        val btnCancel = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnCancel)&#10;        btnCancel.setOnClickListener {&#10;            dialog.dismiss()&#10;        }&#10;&#10;        // 확인 버튼 클릭 리스너&#10;        val btnConfirm = dialog.findViewById&lt;android.widget.Button&gt;(R.id.btnConfirm)&#10;        btnConfirm.setOnClickListener {&#10;            dialog.dismiss()&#10;&#10;            // SharedPreferences 초기화&#10;            with(getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE).edit()) {&#10;                clear()&#10;                apply()&#10;            }&#10;&#10;            // 시작 화면으로 이동&#10;            val intent = Intent(this@StatusActivity, MainActivity::class.java)&#10;            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_NEW_TASK)&#10;            startActivity(intent)&#10;            finish()&#10;&#10;            // 토스트 메시지 표시&#10;            Toast.makeText(this@StatusActivity, &quot;금주가 초기화되었습니다.&quot;, Toast.LENGTH_SHORT).show()&#10;        }&#10;&#10;        // 다이얼로그 표시&#10;        dialog.show()&#10;    }&#10;&#10;    private fun navigateToStart() {&#10;        val intent = Intent(this, StartActivity::class.java)&#10;        startActivity(intent)&#10;        overridePendingTransition(0, 0)&#10;        finish()&#10;        overridePendingTransition(0, 0)&#10;    }&#10;&#10;    private fun updateTimeModeDisplay() {&#10;        val timeUnitText = when {&#10;            Constants.isSecondTestMode -&gt; &quot;금주 목표 초수&quot;&#10;            Constants.isMinuteTestMode -&gt; &quot;금주 목표 분수&quot;&#10;            else -&gt; &quot;금주 목표 일수&quot;&#10;        }&#10;        tvTimeUnit.text = timeUnitText&#10;    }&#10;&#10;    /**&#10;     * 진행 상태를 확인하고 필요한 경우 목표 완료 처리를 합니다.&#10;     * 타이머에서 주기적으로 호출됩니다.&#10;     */&#10;    private fun checkProgressStatus() {&#10;        val sharedPref = getSharedPreferences(&quot;user_settings&quot;, MODE_PRIVATE)&#10;        val startTime = sharedPref.getLong(&quot;start_time&quot;, System.currentTimeMillis())&#10;        val targetDays = sharedPref.getInt(&quot;target_days&quot;, 30)&#10;        val completionFlag = sharedPref.getBoolean(&quot;timer_completed&quot;, false)&#10;        &#10;        if (completionFlag) {&#10;            return  // 이미 완료된 상태면 처리하지 않음&#10;        }&#10;        &#10;        val currentTime = System.currentTimeMillis()&#10;        val secondsPassed = (currentTime - startTime) / 1000L&#10;        &#10;        // 진행률 계산 및 업데이트&#10;        val targetSeconds = when {&#10;            Constants.isSecondTestMode -&gt; targetDays.toLong()&#10;            Constants.isMinuteTestMode -&gt; targetDays.toLong() * 60&#10;            else -&gt; targetDays.toLong() * 24 * 60 * 60&#10;        }&#10;        &#10;        val progress = ((secondsPassed.toFloat() / targetSeconds.toFloat()) * 100).toInt()&#10;        progressLevel.progress = progress.coerceIn(0, 100)&#10;        &#10;        // 완료 조건 확인&#10;        val isCompleted = when {&#10;            Constants.isSecondTestMode -&gt; secondsPassed &gt;= targetDays&#10;            Constants.isMinuteTestMode -&gt; secondsPassed &gt;= (targetDays * 60)&#10;            else -&gt; secondsPassed &gt;= (targetDays * 24 * 60 * 60)&#10;        }&#10;        &#10;        if (isCompleted &amp;&amp; !goalAchievementChecked) {&#10;            tvDaysCount.text = targetDays.toString()&#10;            tvDaysCount.setTextColor(resources.getColor(android.R.color.holo_orange_dark, theme))&#10;            progressLevel.progress = 100&#10;            handleGoalCompletion(targetDays)&#10;        } else if (!isCompleted) {&#10;            // 남은 시간 계산 및 메시지 업데이트&#10;            val timePassed = when {&#10;                Constants.isSecondTestMode -&gt; secondsPassed.toInt() + 1  // 초 단위&#10;                Constants.isMinuteTestMode -&gt; (secondsPassed / 60).toInt() + 1  // 분 단위&#10;                else -&gt; ((currentTime - startTime) / Constants.TIME_UNIT_MILLIS).toInt() + 1  // 일 단위&#10;            }&#10;            val remainingTime = targetDays - timePassed + 1&#10;            if (remainingTime &gt; 0) {&#10;                tvMessage.text = &quot;목표까지 ${remainingTime}${Constants.TIME_UNIT_TEXT} 남았습니다. 힘내세요!&quot;&#10;            } else {&#10;                tvMessage.text = &quot;목표 달성이 임박했습니다!&quot;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/alcoholictimer/adapter/RecentActivityAdapter.kt" />
              <option name="updatedContent" value="package com.example.alcoholictimer.adapter&#10;&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import android.widget.ImageView&#10;import android.widget.TextView&#10;import androidx.recyclerview.widget.RecyclerView&#10;import com.example.alcoholictimer.R&#10;import com.example.alcoholictimer.model.RecentActivity&#10;&#10;class RecentActivityAdapter : RecyclerView.Adapter&lt;RecentActivityAdapter.ViewHolder&gt;() {&#10;    private val activities = ArrayList&lt;RecentActivity&gt;()&#10;&#10;    inner class ViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {&#10;        val ivActivityIcon: ImageView = itemView.findViewById(R.id.ivActivityIcon)&#10;        val tvEndDate: TextView = itemView.findViewById(R.id.tvEndDate)&#10;        val tvActivityTitle: TextView = itemView.findViewById(R.id.tvActivityTitle)&#10;        val tvDuration: TextView = itemView.findViewById(R.id.tvDuration)&#10;        val tvStatus: TextView = itemView.findViewById(R.id.tvStatus)&#10;        val tvSavedMoney: TextView = itemView.findViewById(R.id.tvSavedMoney)&#10;    }&#10;&#10;    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {&#10;        val view = LayoutInflater.from(parent.context)&#10;            .inflate(R.layout.item_recent_activity, parent, false)&#10;        return ViewHolder(view)&#10;    }&#10;&#10;    override fun onBindViewHolder(holder: ViewHolder, position: Int) {&#10;        val activity = activities[position]&#10;        &#10;        holder.tvEndDate.text = activity.endDate&#10;        holder.tvActivityTitle.text = activity.title&#10;        holder.tvDuration.text = &quot;${activity.duration}일 ${activity.hours}시간&quot;&#10;        holder.tvStatus.text = if(activity.isSuccess) &quot;성공&quot; else &quot;실패&quot;&#10;        holder.tvSavedMoney.text = &quot;${activity.savedMoney}만원 절약&quot;&#10;    }&#10;&#10;    override fun getItemCount() = activities.size&#10;&#10;    fun updateActivities(newActivities: List&lt;RecentActivity&gt;) {&#10;        activities.clear()&#10;        activities.addAll(newActivities.take(5)) // 최대 5개까지만 표시&#10;        notifyDataSetChanged()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>