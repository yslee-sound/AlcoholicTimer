package com.example.alcoholictimer

import android.content.Context
import android.content.Intent
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.clickable
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import java.text.SimpleDateFormat
import java.util.*
import kotlin.math.roundToInt

class DetailActivity : ComponentActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        // IntentÏóêÏÑú Îç∞Ïù¥ÌÑ∞ Î∞õÍ∏∞
        val startTime = intent.getLongExtra("start_time", 0L)
        val endTime = intent.getLongExtra("end_time", System.currentTimeMillis())
        val targetDays = intent.getFloatExtra("target_days", 30f)
        val actualDays = intent.getIntExtra("actual_days", 0)
        val isCompleted = intent.getBooleanExtra("is_completed", false)
        
        setContent {
            DetailScreen(
                startTime = startTime,
                endTime = endTime,
                targetDays = targetDays,
                actualDays = actualDays,
                isCompleted = isCompleted
            )
        }
    }

    companion object {
        fun start(
            context: Context,
            startTime: Long,
            endTime: Long,
            targetDays: Float,
            actualDays: Int,
            isCompleted: Boolean
        ) {
            val intent = Intent(context, DetailActivity::class.java).apply {
                putExtra("start_time", startTime)
                putExtra("end_time", endTime)
                putExtra("target_days", targetDays)
                putExtra("actual_days", actualDays)
                putExtra("is_completed", isCompleted)
            }
            context.startActivity(intent)
        }
    }
}

@Composable
fun DetailScreen(
    startTime: Long,
    endTime: Long,
    targetDays: Float,
    actualDays: Int,
    isCompleted: Boolean
) {
    val context = LocalContext.current

    // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÏÉÅÌÉú Í¥ÄÎ¶¨ (Ïª¥Ìè¨ÏßÄÏÖò ÏµúÏÉÅÎã®ÏúºÎ°ú Ïù¥Îèô)
    var shouldNavigateToStart by remember { mutableStateOf(false) }
    var shouldFinish by remember { mutableStateOf(false) }

    // ÏïàÏ†ÑÌïú ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï≤òÎ¶¨ (Ïª¥Ìè¨ÏßÄÏÖò ÏµúÏÉÅÎã®ÏúºÎ°ú Ïù¥Îèô)
    LaunchedEffect(shouldNavigateToStart) {
        if (shouldNavigateToStart) {
            val intent = Intent(context, StartActivity::class.java)
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TOP)
            context.startActivity(intent)
            (context as? DetailActivity)?.finish()
        }
    }

    LaunchedEffect(shouldFinish) {
        if (shouldFinish) {
            (context as? DetailActivity)?.finish()
        }
    }

    // ÎÇ†Ïßú/ÏãúÍ∞Ñ Ìè¨Îß∑
    val dateTimeFormat = SimpleDateFormat("yyyy-MM-dd - a h:mm", Locale.getDefault())
    val displayDateTime = if (startTime > 0) {
        dateTimeFormat.format(Date(startTime))
    } else {
        "Ïò§Îäò - ${SimpleDateFormat("a h:mm", Locale.getDefault()).format(Date())}"
    }

    // Í∏∞Î°ù Ï†úÎ™© ÏûêÎèô ÏÉùÏÑ±
    val recordTitle = if (isCompleted) {
        "Í∏àÏ£º ${actualDays}Ïùº Îã¨ÏÑ± Í∏∞Î°ù"
    } else {
        "Í∏àÏ£º ${actualDays}ÏùºÏ∞® Ï§ëÎã® Í∏∞Î°ù"
    }

    // Í∏àÏ£º Í∏∞Í∞Ñ Í≥ÑÏÇ∞
    val totalDuration = if (startTime > 0) {
        ((endTime - startTime) / (24 * 60 * 60 * 1000)).toInt()
    } else {
        actualDays
    }

    // ÏÑ§Ï†ïÍ∞í Í∞ÄÏ†∏Ïò§Í∏∞ (Ï†àÏïΩ Í∏àÏï°/ÏãúÍ∞Ñ Í≥ÑÏÇ∞Ïö©)
    val sharedPref = context.getSharedPreferences("user_settings", Context.MODE_PRIVATE)
    val selectedCost = sharedPref.getString("selected_cost", "Ï§ë") ?: "Ï§ë"
    val selectedFrequency = sharedPref.getString("selected_frequency", "Ï£º 2~3Ìöå") ?: "Ï£º 2~3Ìöå"
    val selectedDuration = sharedPref.getString("selected_duration", "Î≥¥ÌÜµ") ?: "Î≥¥ÌÜµ"

    // Ï†àÏïΩ Í∏àÏï°/ÏãúÍ∞Ñ Í≥ÑÏÇ∞
    val costVal = when(selectedCost) {
        "Ï†Ä" -> 10000
        "Ï§ë" -> 40000
        "Í≥†" -> 70000
        else -> 40000
    }

    val freqVal = when(selectedFrequency) {
        "Ï£º 1Ìöå Ïù¥Ìïò" -> 1.0
        "Ï£º 2~3Ìöå" -> 2.5
        "Ï£º 4Ìöå Ïù¥ÏÉÅ" -> 5.0
        else -> 2.5
    }

    val drinkHoursVal = when(selectedDuration) {
        "ÏßßÏùå" -> 2
        "Î≥¥ÌÜµ" -> 4
        "ÍπÄ" -> 6
        else -> 4
    }

    val hangoverHoursVal = 5
    val weeks = actualDays / 7.0
    val savedMoney = (weeks * freqVal * costVal).roundToInt()
    val savedHours = (weeks * freqVal * (drinkHoursVal + hangoverHoursVal)).roundToInt()

    // Î†àÎ≤®Ïóê Îî∞Î•∏ Î∞∞Í≤ΩÏÉâ
    val backgroundColor = when {
        actualDays < 7 -> Color(0xFFF5F5F5)
        actualDays < 30 -> Color(0xFFFFF3CD)
        actualDays < 90 -> Color(0xFFE7F3FF)
        actualDays < 365 -> Color(0xFFE8F5E8)
        else -> Color(0xFFFFF0DC)
    }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .background(Color.White)
            .padding(24.dp)
    ) {
        // Ìó§Îçî ÏòÅÏó≠
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            // Îí§Î°úÍ∞ÄÍ∏∞ Î≤ÑÌäº
            Box(
                contentAlignment = Alignment.Center,
                modifier = Modifier
                    .size(40.dp)
                    .background(Color.LightGray, CircleShape)
                    .clickable { 
                        (context as? DetailActivity)?.finish()
                    }
            ) {
                Text(
                    text = "‚Üê",
                    fontSize = 20.sp,
                    fontWeight = FontWeight.Bold
                )
            }
            
            Text(
                text = "Í∏àÏ£º Í∏∞Î°ù ÏÉÅÏÑ∏",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold
            )
            
            Spacer(modifier = Modifier.width(40.dp)) // Í∑†Ìòï ÎßûÏ∂îÍ∏∞
        }

        Spacer(modifier = Modifier.height(32.dp))

        // ÎÇ†Ïßú Î∞è ÏãúÍ∞Ñ
        Text(
            text = displayDateTime,
            fontSize = 16.sp,
            color = Color.Gray,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(8.dp))

        // Í∏∞Î°ù Ï†úÎ™©
        Text(
            text = recordTitle,
            fontSize = 20.sp,
            fontWeight = FontWeight.Bold,
            modifier = Modifier.fillMaxWidth()
        )

        Spacer(modifier = Modifier.height(40.dp))

        // Ï£ºÏöî ÌÜµÍ≥Ñ ÏòÅÏó≠
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween
        ) {
            // ÏôºÏ™Ω ÎåÄÌòï Ïà´Ïûê
            Column(
                modifier = Modifier.weight(1f),
                horizontalAlignment = Alignment.Start
            ) {
                Text(
                    text = actualDays.toString(),
                    fontSize = 72.sp,
                    fontWeight = FontWeight.Bold,
                    color = Color.Black,
                    lineHeight = 72.sp
                )
                Text(
                    text = "Ïùº",
                    fontSize = 16.sp,
                    color = Color.Gray
                )
            }

            // Ïò§Î•∏Ï™Ω ÏÑ±Ï∑® ÏïÑÏù¥ÏΩò
            Column(
                modifier = Modifier.weight(1f),
                horizontalAlignment = Alignment.End
            ) {
                Text(
                    text = if (isCompleted) "üèÜ" else "‚è∏Ô∏è",
                    fontSize = 60.sp
                )
                Spacer(modifier = Modifier.height(8.dp))
                Text(
                    text = if (isCompleted) "Î™©Ìëú Îã¨ÏÑ±" else "Ï§ëÎã®Îê®",
                    fontSize = 14.sp,
                    color = if (isCompleted) Color(0xFF4CAF50) else Color(0xFFFF9800),
                    fontWeight = FontWeight.Bold
                )
            }
        }

        Spacer(modifier = Modifier.height(32.dp))

        // ÏÑúÎ∏å ÌÜµÍ≥Ñ (2Ï§Ñ Î∞∞Ïπò)
        Column {
            // Ï≤´ Î≤àÏß∏ Ï§Ñ
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                SubStatItem(
                    value = "${totalDuration}Ïùº",
                    label = "Ï¥ù Í∏àÏ£º Í∏∞Í∞Ñ",
                    modifier = Modifier.weight(1f)
                )
                SubStatItem(
                    value = String.format("%,dÏõê", savedMoney),
                    label = "Ï†àÏïΩÌïú Í∏àÏï°",
                    modifier = Modifier.weight(1f)
                )
                SubStatItem(
                    value = "${savedHours}ÏãúÍ∞Ñ",
                    label = "Ï†àÏïΩÌïú ÏãúÍ∞Ñ",
                    modifier = Modifier.weight(1f)
                )
            }

            Spacer(modifier = Modifier.height(24.dp))

            // Îëê Î≤àÏß∏ Ï§Ñ
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceEvenly
            ) {
                SubStatItem(
                    value = "${((actualDays.toFloat() / targetDays) * 100).roundToInt()}%",
                    label = "Î™©Ìëú Îã¨ÏÑ±Î•†",
                    modifier = Modifier.weight(1f)
                )
                SubStatItem(
                    value = getLevelName(actualDays),
                    label = "Îã¨ÏÑ± Î†àÎ≤®",
                    modifier = Modifier.weight(1f)
                )
                SubStatItem(
                    value = "+${(actualDays / 30.0).roundToInt()}Ïùº",
                    label = "Í∏∞ÎåÄ ÏàòÎ™Ö Ï¶ùÍ∞Ä",
                    modifier = Modifier.weight(1f)
                )
            }
        }

        Spacer(modifier = Modifier.weight(1f))

        // ÌïòÎã® Î≤ÑÌäº
        Button(
            onClick = { 
                if (isCompleted) {
                    // Î™©Ìëú Îã¨ÏÑ± ÏôÑÎ£å Ïãú StartActivityÎ°ú Ïù¥Îèô
                    shouldNavigateToStart = true
                } else {
                    // Í∏∞Î°ù Ï°∞ÌöåÏóêÏÑú Ïò® Í≤ΩÏö∞ Îã®ÏàúÌûà ÌôîÎ©¥ Ï¢ÖÎ£å
                    shouldFinish = true
                }
            },
            modifier = Modifier
                .fillMaxWidth()
                .height(56.dp),
            colors = ButtonDefaults.buttonColors(
                containerColor = Color.Black
            )
        ) {
            Text(
                text = "ÌôïÏù∏",
                fontSize = 18.sp,
                fontWeight = FontWeight.Bold,
                color = Color.White
            )
        }
    }
}

@Composable
fun SubStatItem(
    value: String,
    label: String,
    modifier: Modifier = Modifier
) {
    Column(
        modifier = modifier.padding(horizontal = 8.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        Text(
            text = value,
            fontSize = 18.sp,
            fontWeight = FontWeight.Bold,
            color = Color.Black,
            textAlign = TextAlign.Center
        )
        Spacer(modifier = Modifier.height(4.dp))
        Text(
            text = label,
            fontSize = 12.sp,
            color = Color.Gray,
            textAlign = TextAlign.Center
        )
    }
}

// Î†àÎ≤®Î™Ö Ìï®Ïàò
private fun getLevelName(days: Int): String {
    return when {
        days < 7 -> "ÏãúÏûë"
        days < 30 -> "ÏûëÏã¨ 7Ïùº"
        days < 90 -> "Ìïú Îã¨ ÌÅ¥Î¶¨Ïñ¥"
        days < 365 -> "3Í∞úÏõî ÌÅ¥Î¶¨Ïñ¥"
        else -> "Ï†àÏ†úÏùò Î†àÏ†ÑÎìú"
    }
}

@Preview(showBackground = true)
@Composable
fun PreviewDetailScreen() {
    DetailScreen(
        startTime = System.currentTimeMillis() - (7 * 24 * 60 * 60 * 1000L),
        endTime = System.currentTimeMillis(),
        targetDays = 30f,
        actualDays = 7,
        isCompleted = true
    )
}
