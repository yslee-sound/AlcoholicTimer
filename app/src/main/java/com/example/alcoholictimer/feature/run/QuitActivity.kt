package com.sweetapps.alcoholictimer.feature.run

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.Log
import androidx.activity.compose.setContent
import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.gestures.awaitEachGesture
import androidx.compose.foundation.gestures.awaitFirstDown
import androidx.compose.foundation.gestures.waitForUpOrCancellation
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.PlayArrow
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.res.colorResource
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Density
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.content.edit
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import org.json.JSONArray
import org.json.JSONObject
import java.util.Locale
import com.sweetapps.alcoholictimer.R
import com.sweetapps.alcoholictimer.core.ui.BaseActivity
import com.sweetapps.alcoholictimer.core.ui.StandardScreenWithBottomButton
import com.sweetapps.alcoholictimer.core.ui.LayoutConstants
import com.sweetapps.alcoholictimer.core.util.FormatUtils
import com.sweetapps.alcoholictimer.feature.start.StartActivity
import com.sweetapps.alcoholictimer.core.ui.AppElevation
import com.sweetapps.alcoholictimer.core.ui.AppBorder
import com.sweetapps.alcoholictimer.core.util.Constants
import com.sweetapps.alcoholictimer.core.ads.InterstitialAdManager
import com.sweetapps.alcoholictimer.BuildConfig
import com.sweetapps.alcoholictimer.core.ui.AdmobBanner

class QuitActivity : BaseActivity() {
    override fun getScreenTitle(): String = getString(R.string.quit_title)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent { BaseScreen(applyBottomInsets = false, manageBottomAreaExternally = true) { QuitScreen() } }
        // Ï†ÑÎ©¥Í¥ëÍ≥† ÌîÑÎ¶¨Î°úÎìú(Ïù¥ÎØ∏ Î°úÎìúÎêú Í≤ΩÏö∞ ÎÇ¥Î∂ÄÏóêÏÑú Î¨¥ÏãúÎê®)
        InterstitialAdManager.preload(applicationContext)
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun QuitScreen() {
    val context = LocalContext.current
    val activity = context as? QuitActivity
    val intent = activity?.intent
    val elapsedDays = intent?.getIntExtra("elapsed_days", 0) ?: 0
    val elapsedHours = intent?.getIntExtra("elapsed_hours", 0) ?: 0
    val elapsedMinutes = intent?.getIntExtra("elapsed_minutes", 0) ?: 0
    val savedMoney = intent?.getDoubleExtra("saved_money", 0.0) ?: 0.0
    val savedHours = intent?.getDoubleExtra("saved_hours", 0.0) ?: 0.0
    val lifeGainDays = intent?.getDoubleExtra("life_gain_days", 0.0) ?: 0.0
    val sharedPref = context.getSharedPreferences(Constants.USER_SETTINGS_PREFS, Context.MODE_PRIVATE)
    val targetDays = sharedPref.getFloat(Constants.PREF_TARGET_DAYS, 30f)

    var isPressed by remember { mutableStateOf(false) }
    var progress by remember { mutableFloatStateOf(0f) }
    val coroutineScope = rememberCoroutineScope()

    StandardScreenWithBottomButton(
        topContent = {
            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(LayoutConstants.CARD_CORNER_RADIUS),
                colors = CardDefaults.cardColors(containerColor = Color.White),
                elevation = CardDefaults.cardElevation(defaultElevation = AppElevation.CARD), // lowered from CARD_HIGH
                border = BorderStroke(AppBorder.Hairline, colorResource(id = R.color.color_border_light)) // added for depth after elevation reduction
            ) {
                Column(
                    modifier = Modifier.fillMaxWidth().padding(LayoutConstants.CARD_PADDING),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    CompositionLocalProvider(LocalDensity provides Density(LocalDensity.current.density, 1f)) {
                        Text("ü§î", fontSize = 48.sp, modifier = Modifier.padding(bottom = 12.dp))
                    }
                    Text(
                        text = stringResource(id = R.string.quit_confirm_title),
                        fontSize = 22.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF333333),
                        textAlign = TextAlign.Center,
                        modifier = Modifier.padding(bottom = 6.dp)
                    )
                    Text(
                        text = stringResource(id = R.string.quit_confirm_subtitle),
                        fontSize = 14.sp,
                        color = Color(0xFF666666),
                        textAlign = TextAlign.Center
                    )
                }
            }
            StatisticsCardsSection(
                elapsedDays = elapsedDays,
                elapsedHours = elapsedHours,
                elapsedMinutes = elapsedMinutes,
                savedMoney = savedMoney,
                savedHours = savedHours,
                lifeGainDays = lifeGainDays
            )
        },
        bottomButton = {
            Box(
                modifier = Modifier.fillMaxWidth().height(120.dp),
                contentAlignment = Alignment.Center
            ) {
                Row(
                    horizontalArrangement = Arrangement.spacedBy(48.dp, Alignment.CenterHorizontally),
                    verticalAlignment = Alignment.CenterVertically,
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Box(contentAlignment = Alignment.Center, modifier = Modifier.size(106.dp)) {
                        // Î∞∞Í≤Ω Ïõê (ÌöåÏÉâ)
                        CircularProgressIndicator(
                            progress = { 1f }, modifier = Modifier.size(106.dp),
                            color = Color(0xFFE0E0E0), strokeWidth = 4.dp, trackColor = Color.Transparent
                        )
                        // ÏßÑÌñâ ÏÉÅÌÉú Ïõê (Îπ®Í∞ÑÏÉâ)
                        if (isPressed) {
                            CircularProgressIndicator(
                                progress = { progress }, modifier = Modifier.size(106.dp),
                                color = Color(0xFFD32F2F), strokeWidth = 4.dp, trackColor = Color.Transparent
                            )
                        }
                        // Ï§ëÏßÄ Î≤ÑÌäº
                        Card(
                            modifier = Modifier.size(96.dp).pointerInput(Unit) {
                                awaitEachGesture {
                                    awaitFirstDown(); isPressed = true; progress = 0f
                                    val job = coroutineScope.launch {
                                        try {
                                            val duration = 1500L
                                            val startMs = System.currentTimeMillis()
                                            while (progress < 1f && isPressed) {
                                                val elapsed = System.currentTimeMillis() - startMs
                                                progress = (elapsed.toFloat() / duration).coerceAtMost(1f)
                                                delay(16)
                                            }
                                            if (progress >= 1f && isPressed) {
                                                // Î°±ÌîÑÎ†àÏä§ ÏôÑÎ£å Î°úÍ∑∏
                                                Log.d("QuitActivity", "Î°±ÌîÑÎ†àÏä§ ÏôÑÎ£å - Í∏àÏ£º Ï¢ÖÎ£å Ï≤òÎ¶¨ ÏãúÏûë")

                                                // ÏôÑÎ£å Ï≤òÎ¶¨: Í∏∞Î°ù Ï†ÄÏû• + ÏßÑÌñâ ÏÉÅÌÉú Ï†ïÎ¶¨
                                                try {
                                                    saveCompletedRecord(
                                                        context = context,
                                                        startTime = System.currentTimeMillis() - (elapsedDays * 24L * 60 * 60 * 1000),
                                                        endTime = System.currentTimeMillis(),
                                                        targetDays = targetDays,
                                                        actualDays = elapsedDays
                                                    )
                                                    Log.d("QuitActivity", "Í∏∞Î°ù Ï†ÄÏû• ÏôÑÎ£å")
                                                } catch (t: Throwable) {
                                                    Log.e("QuitActivity", "saveCompletedRecord Ïã§Ìå®", t)
                                                }
                                                try {
                                                    sharedPref.edit {
                                                        remove(Constants.PREF_START_TIME)
                                                        putBoolean(Constants.PREF_TIMER_COMPLETED, true)
                                                    }
                                                    Log.d("QuitActivity", "ÏßÑÌñâ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å: timer_completed=true")
                                                } catch (t: Throwable) {
                                                    Log.e("QuitActivity", "ÏßÑÌñâ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®", t)
                                                }

                                                // StartActivityÎ°úÏùò ÏïàÏ†ÑÌïú Ï†ÑÌôò Î°úÏßÅÏùÑ ÎûåÎã§Î°ú Ï†ïÏùò
                                                val navigateToStart: () -> Unit = {
                                                    Log.d("QuitActivity", "StartActivityÎ°ú Ïù¥Îèô ÏãúÏûë")
                                                    val act = activity
                                                    if (act != null) {
                                                        val i = Intent(act, StartActivity::class.java).apply {
                                                            // Í∏àÏ£º Ï¢ÖÎ£å ÌõÑÏóêÎäî ÏÉàÎ°úÏö¥ TaskÎ°ú ÏãúÏûëÌïòÏó¨ ÏôÑÏ†ÑÌûà Ï¥àÍ∏∞Ìôî
                                                            addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK)
                                                        }
                                                        try {
                                                            act.startActivity(i)
                                                            Log.d("QuitActivity", "StartActivity Ïã§Ìñâ ÏÑ±Í≥µ")
                                                        } finally {
                                                            act.finish()
                                                        }
                                                    } else {
                                                        try {
                                                            val i = Intent(context, StartActivity::class.java).apply {
                                                                addFlags(Intent.FLAG_ACTIVITY_NEW_TASK or Intent.FLAG_ACTIVITY_CLEAR_TASK)
                                                            }
                                                            context.startActivity(i)
                                                        } catch (t: Throwable) {
                                                            Log.e("QuitActivity", "StartActivity ÏßÑÏûÖ Ïã§Ìå®", t)
                                                        }
                                                    }
                                                }

                                                // ...existing ad code...

                                                // Ï†ÑÎ©¥Í¥ëÍ≥† ÎÖ∏Ï∂ú ÏãúÎèÑ: ÏÑ±Í≥µ Ïãú Îã´Ìûå ÌõÑ navigateToStart ÏàòÌñâ, Ïã§Ìå®/Ï∞®Îã® Ïãú Ï¶âÏãú Ï†ÑÌôò
                                                val actForAd = activity
                                                if (actForAd != null) {
                                                    val showed = InterstitialAdManager.maybeShowIfEligible(actForAd) { navigateToStart() }
                                                    if (!showed) {
                                                        if (BuildConfig.DEBUG) {
                                                            // ÎîîÎ≤ÑÍ∑∏: ÏµúÎåÄ 2.5Ï¥à ÎåÄÍ∏∞ÌïòÎ©∞ Î°úÎìú ÎêòÎ©¥ Ï¶âÏãú ÌëúÏãú, Ïã§Ìå®/ÌÉÄÏûÑÏïÑÏõÉ Ïãú Ï†ÑÌôò
                                                            var handled = false
                                                            InterstitialAdManager.addLoadListener { success ->
                                                                if (!handled) {
                                                                    handled = true
                                                                    if (success) {
                                                                        val s2 = InterstitialAdManager.maybeShowIfEligible(actForAd) { navigateToStart() }
                                                                        if (!s2) navigateToStart()
                                                                    } else {
                                                                        navigateToStart()
                                                                    }
                                                                }
                                                            }
                                                            InterstitialAdManager.preload(actForAd.applicationContext)
                                                            coroutineScope.launch {
                                                                delay(2500)
                                                                if (!handled) { handled = true; navigateToStart() }
                                                            }
                                                        } else {
                                                            // Î¶¥Î¶¨Ï¶à: Ï†ïÏ±Ö ÎØ∏Ï∂©Ï°±/ÎØ∏Î°úÎî© Ïãú Ï¶âÏãú Ï†ÑÌôò + Îã§Ïùå Í∏∞Ìöå ÎåÄÎπÑ ÌîÑÎ¶¨Î°úÎìú
                                                            navigateToStart()
                                                            InterstitialAdManager.preload(actForAd.applicationContext)
                                                        }
                                                    }
                                                } else {
                                                    // ÎπÑÏ†ïÏÉÅ Ïª®ÌÖçÏä§Ìä∏: Ï¶âÏãú Ï†ÑÌôò
                                                    navigateToStart()
                                                }
                                            }
                                        } catch (t: Throwable) {
                                            Log.e("QuitActivity", "Ï§ëÏßÄ Ï†úÏä§Ï≤ò Ï≤òÎ¶¨ Ï§ë Ïò§Î•ò", t)
                                        }
                                    }
                                    waitForUpOrCancellation(); isPressed = false; job.cancel()
                                    coroutineScope.launch {
                                        while (progress > 0f) { progress = (progress - 0.1f).coerceAtLeast(0f); delay(16) }
                                    }
                                }
                            },
                            shape = CircleShape,
                            colors = CardDefaults.cardColors(containerColor = if (isPressed) Color(0xFFD32F2F) else Color(0xFFE53935)),
                            elevation = CardDefaults.cardElevation(defaultElevation = AppElevation.CARD_HIGH)
                        ) { Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                            Icon(Icons.Default.Close, contentDescription = stringResource(id = R.string.cd_stop), tint = Color.White, modifier = Modifier.size(48.dp))
                        } }
                    }
                    Card(
                        onClick = {
                            // Ï∑®ÏÜå: RunActivityÎ°ú Î≥µÍ∑Ä (Í∏àÏ£º Í≥ÑÏÜç ÏßÑÌñâ)
                            (context as? QuitActivity)?.finish()
                        },
                        modifier = Modifier.size(96.dp),
                        shape = CircleShape,
                        colors = CardDefaults.cardColors(containerColor = Color(0xFF4CAF50)),
                        elevation = CardDefaults.cardElevation(defaultElevation = AppElevation.CARD_HIGH)
                    ) { Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                        Icon(Icons.Default.PlayArrow, contentDescription = stringResource(id = R.string.cd_continue), tint = Color.White, modifier = Modifier.size(48.dp))
                    } }
                }
            }
        },
        bottomAd = { AdmobBanner() }
    )
}

@Composable
fun StatisticsCardsSection(
    elapsedDays: Int,
    elapsedHours: Int,
    elapsedMinutes: Int,
    savedMoney: Double,
    savedHours: Double,
    lifeGainDays: Double
) {
    Column(
        modifier = Modifier.fillMaxWidth(),
        verticalArrangement = Arrangement.spacedBy(LayoutConstants.STAT_ROW_SPACING)
    ) {
        val totalDaysDecimal = elapsedDays.toDouble() + (elapsedHours.toDouble() / 24.0) + (elapsedMinutes.toDouble() / (24.0 * 60.0))
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(LayoutConstants.STAT_ROW_SPACING)
        ) {
            com.sweetapps.alcoholictimer.feature.detail.components.DetailStatCard(
                value = String.format(Locale.getDefault(), "%.1fÏùº", totalDaysDecimal),
                label = stringResource(id = R.string.stat_total_days),
                modifier = Modifier.weight(1f),
                valueColor = colorResource(id = R.color.color_indicator_days)
            )
            com.sweetapps.alcoholictimer.feature.detail.components.DetailStatCard(
                value = String.format(Locale.getDefault(), "%,.0fÏõê", savedMoney),
                label = stringResource(id = R.string.stat_saved_money_short),
                modifier = Modifier.weight(1f),
                valueColor = colorResource(id = R.color.color_indicator_money)
            )
        }
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(LayoutConstants.STAT_ROW_SPACING)
        ) {
            com.sweetapps.alcoholictimer.feature.detail.components.DetailStatCard(
                value = String.format(Locale.getDefault(), "%.1fÏãúÍ∞Ñ", savedHours),
                label = stringResource(id = R.string.stat_saved_hours_short),
                modifier = Modifier.weight(1f),
                valueColor = colorResource(id = R.color.color_indicator_hours)
            )
            com.sweetapps.alcoholictimer.feature.detail.components.DetailStatCard(
                value = FormatUtils.daysToDayHourString(lifeGainDays, 2),
                label = stringResource(id = R.string.indicator_title_life_gain),
                modifier = Modifier.weight(1f),
                valueColor = colorResource(id = R.color.color_indicator_life)
            )
        }
    }
}

private fun saveCompletedRecord(
    context: Context,
    startTime: Long,
    endTime: Long,
    targetDays: Float,
    actualDays: Int
) {
    try {
        val sharedPref = context.getSharedPreferences(Constants.USER_SETTINGS_PREFS, Context.MODE_PRIVATE)
        val record = JSONObject().apply {
            put("id", System.currentTimeMillis().toString())
            put("startTime", startTime)
            put("endTime", endTime)
            put("targetDays", targetDays.toInt())
            put("actualDays", actualDays)
            put("isCompleted", true)
            put("status", "quit")
            put("createdAt", System.currentTimeMillis())
        }
        val current = sharedPref.getString(Constants.PREF_SOBRIETY_RECORDS, "[]") ?: "[]"
        val array = JSONArray(current)
        array.put(record)
        sharedPref.edit { putString(Constants.PREF_SOBRIETY_RECORDS, array.toString()) }
        Log.d("QuitActivity", "Í∏∞Î°ù Ï†ÄÏû• ÏôÑÎ£å: $record")
    } catch (e: Exception) {
        Log.e("QuitActivity", "Í∏∞Î°ù Ï†ÄÏû• Ïò§Î•ò", e)
    }
}

@Preview(showBackground = true)
@Composable
fun QuitScreenPreview() { QuitScreen() }
