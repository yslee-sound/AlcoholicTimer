package com.example.alcoholictimer

import android.content.Context
import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.activity.compose.setContent
import androidx.compose.foundation.background
import androidx.compose.foundation.gestures.awaitEachGesture
import androidx.compose.foundation.gestures.awaitFirstDown
import androidx.compose.foundation.gestures.waitForUpOrCancellation
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Close
import androidx.compose.material.icons.filled.PlayArrow
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.input.pointer.pointerInput
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalDensity
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.Density
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.core.content.edit
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import org.json.JSONArray
import org.json.JSONObject
import java.util.Locale
import com.example.alcoholictimer.ui.StandardScreenWithBottomButton

class QuitActivity : BaseActivity() {

    override fun getScreenTitle(): String = "Í∏àÏ£º Ï¢ÖÎ£å"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            BaseScreen {
                QuitScreen()
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun QuitScreen() {
    val context = LocalContext.current
    val activity = context as? QuitActivity
    val intent = activity?.intent
    val elapsedDays = intent?.getIntExtra("elapsed_days", 0) ?: 0
    val elapsedHours = intent?.getIntExtra("elapsed_hours", 0) ?: 0
    val elapsedMinutes = intent?.getIntExtra("elapsed_minutes", 0) ?: 0
    val savedMoney = intent?.getDoubleExtra("saved_money", 0.0) ?: 0.0
    val savedHours = intent?.getDoubleExtra("saved_hours", 0.0) ?: 0.0
    val lifeGainDays = intent?.getDoubleExtra("life_gain_days", 0.0) ?: 0.0
    val levelName = intent?.getStringExtra("level_name") ?: "ÏÉàÏãπ"
    val levelColorValue = intent?.getLongExtra("level_color", 0L) ?: 0L
    val levelColor = if (levelColorValue != 0L) Color(levelColorValue.toULong()) else Color(0xFF4CAF50)
    val sharedPref = context.getSharedPreferences("user_settings", Context.MODE_PRIVATE)
    val targetDays = sharedPref.getFloat("target_days", 30f)

    var isPressed by remember { mutableStateOf(false) }
    var progress by remember { mutableFloatStateOf(0f) }
    val coroutineScope = rememberCoroutineScope()

    StandardScreenWithBottomButton(
        topContent = {
            Card(
                modifier = Modifier.fillMaxWidth(),
                shape = RoundedCornerShape(20.dp),
                colors = CardDefaults.cardColors(containerColor = Color.White.copy(alpha = 0.95f)),
                elevation = CardDefaults.cardElevation(defaultElevation = 6.dp)
            ) {
                Column(
                    modifier = Modifier.fillMaxWidth().padding(20.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    CompositionLocalProvider(LocalDensity provides Density(LocalDensity.current.density, 1f)) {
                        Text("ü§î", fontSize = 48.sp, modifier = Modifier.padding(bottom = 12.dp))
                    }
                    Text(
                        text = "Ï†ïÎßê Î©àÏ∂îÏãúÍ≤†Ïñ¥Ïöî?",
                        fontSize = 22.sp,
                        fontWeight = FontWeight.Bold,
                        color = Color(0xFF333333),
                        textAlign = TextAlign.Center,
                        modifier = Modifier.padding(bottom = 6.dp)
                    )
                    Text(
                        text = "ÏßÄÍ∏àÍπåÏßÄ Ïûò Ìï¥Ïò§ÏÖ®ÎäîÎç∞...",
                        fontSize = 14.sp,
                        color = Color(0xFF666666),
                        textAlign = TextAlign.Center
                    )
                }
            }

            StatisticsCardsSection(
                elapsedDays = elapsedDays,
                elapsedHours = elapsedHours,
                elapsedMinutes = elapsedMinutes,
                savedMoney = savedMoney,
                savedHours = savedHours,
                lifeGainDays = lifeGainDays,
                levelName = levelName,
                levelColor = levelColor
            )
        },
        bottomButton = {
            // QuitActivityÎäî Î≤ÑÌäºÏù¥ 2Í∞úÏù¥ÎØÄÎ°ú ÌäπÎ≥ÑÌïú Ï≤òÎ¶¨
            Row(
                horizontalArrangement = Arrangement.spacedBy(48.dp, Alignment.CenterHorizontally),
                verticalAlignment = Alignment.CenterVertically
            ) {
                // Ï§ëÏßÄ Î≤ÑÌäº Í∑∏Î£π
                Box(contentAlignment = Alignment.Center, modifier = Modifier.size(106.dp)) {
                    CircularProgressIndicator(
                        progress = { 1f },
                        modifier = Modifier.size(106.dp),
                        color = Color(0xFFE0E0E0),
                        strokeWidth = 4.dp,
                        trackColor = Color.Transparent
                    )
                    if (isPressed) {
                        CircularProgressIndicator(
                            progress = { progress },
                            modifier = Modifier.size(106.dp),
                            color = Color(0xFFD32F2F),
                            strokeWidth = 4.dp,
                            trackColor = Color.Transparent
                        )
                    }
                    Card(
                        modifier = Modifier
                            .size(96.dp)
                            .pointerInput(Unit) {
                                awaitEachGesture {
                                    awaitFirstDown()
                                    isPressed = true
                                    progress = 0f
                                    val job = coroutineScope.launch {
                                        val duration = 1500L
                                        val startMs = System.currentTimeMillis()
                                        while (progress < 1f && isPressed) {
                                            val elapsed = System.currentTimeMillis() - startMs
                                            progress = (elapsed.toFloat() / duration).coerceAtMost(1f)
                                            delay(16)
                                        }
                                        if (progress >= 1f && isPressed) {
                                            saveCompletedRecord(
                                                context = context,
                                                startTime = System.currentTimeMillis() - (elapsedDays * 24L * 60 * 60 * 1000),
                                                endTime = System.currentTimeMillis(),
                                                targetDays = targetDays,
                                                actualDays = elapsedDays
                                            )
                                            sharedPref.edit {
                                                remove("start_time")
                                                putBoolean("timer_completed", true)
                                            }
                                            val intent = Intent(context, StartActivity::class.java).apply {
                                                addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP or Intent.FLAG_ACTIVITY_SINGLE_TOP)
                                            }
                                            context.startActivity(intent)
                                            (context as? QuitActivity)?.overridePendingTransition(0, 0)
                                            (context as? QuitActivity)?.finish()
                                        }
                                    }
                                    val up = waitForUpOrCancellation()
                                    isPressed = false
                                    job.cancel()
                                    coroutineScope.launch {
                                        while (progress > 0f) {
                                            progress = (progress - 0.1f).coerceAtLeast(0f)
                                            delay(16)
                                        }
                                    }
                                }
                            },
                        shape = CircleShape,
                        colors = CardDefaults.cardColors(containerColor = if (isPressed) Color(0xFFD32F2F) else Color(0xFFE53935)),
                        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
                    ) {
                        Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                            Icon(Icons.Default.Close, contentDescription = "Ï§ëÏßÄ", tint = Color.White, modifier = Modifier.size(48.dp))
                        }
                    }
                }
                // Í≥ÑÏÜç Î≤ÑÌäº
                Card(
                    onClick = { (context as? QuitActivity)?.finish() },
                    modifier = Modifier.size(96.dp),
                    shape = CircleShape,
                    colors = CardDefaults.cardColors(containerColor = Color(0xFF4CAF50)),
                    elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
                ) {
                    Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
                        Icon(Icons.Default.PlayArrow, contentDescription = "Í≥ÑÏÜç", tint = Color.White, modifier = Modifier.size(48.dp))
                    }
                }
            }
        }
    )
}

@Composable
fun StatisticsCardsSection(
    elapsedDays: Int,
    elapsedHours: Int,
    elapsedMinutes: Int,
    savedMoney: Double,
    savedHours: Double,
    lifeGainDays: Double,
    levelName: String, // Ï∂îÍ∞Ä: Î†àÎ≤®Î™Ö
    levelColor: Color // Ï∂îÍ∞Ä: Î†àÎ≤® ÏÉâÏÉÅ
) {
    Column(
        modifier = Modifier.fillMaxWidth(),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        // Ï≤´ Î≤àÏß∏ Ìñâ
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            ModernStatCard(
                value = "${elapsedDays}",
                label = "Í∏àÏ£º ÏùºÏàò",
                color = Color(0xFF1976D2),
                modifier = Modifier.weight(1f)
            )
            ModernStatCard(
                value = levelName, // Ï†ÑÎã¨Î∞õÏùÄ Î†àÎ≤®Î™Ö ÏÇ¨Ïö©
                label = "Î†àÎ≤®",
                color = levelColor, // Ï†ÑÎã¨Î∞õÏùÄ Î†àÎ≤® ÏÉâÏÉÅ ÏÇ¨Ïö©
                modifier = Modifier.weight(1f)
            )
        }

        // Îëê Î≤àÏß∏ Ìñâ
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            ModernStatCard(
                value = String.format(Locale.getDefault(), "%02d:%02d", elapsedHours, elapsedMinutes),
                label = "Í≤ΩÍ≥º ÏãúÍ∞Ñ",
                color = Color(0xFF388E3C),
                modifier = Modifier.weight(1f)
            )
            ModernStatCard(
                value = String.format(Locale.getDefault(), "%.1f", savedMoney / 10000),
                label = "Ï†àÏïΩ Í∏àÏï°",
                color = Color(0xFFE91E63),
                modifier = Modifier.weight(1f)
            )
        }

        // ÏÑ∏ Î≤àÏß∏ Ìñâ
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            ModernStatCard(
                value = String.format(Locale.getDefault(), "%.1f", savedHours),
                label = "Ï†àÏïΩ ÏãúÍ∞Ñ",
                color = Color(0xFFFF9800),
                modifier = Modifier.weight(1f)
            )
            ModernStatCard(
                value = String.format(Locale.getDefault(), "%.1f", lifeGainDays),
                label = "Í∏∞ÎåÄ ÏàòÎ™Ö+",
                color = Color(0xFF9C27B0),
                modifier = Modifier.weight(1f)
            )
        }
    }
}

@Composable
fun ModernStatCard(
    value: String,
    label: String,
    color: Color,
    modifier: Modifier = Modifier
) {
    Card(
        modifier = modifier.height(80.dp),
        shape = RoundedCornerShape(15.dp), //15
        colors = CardDefaults.cardColors(
            containerColor = Color.White.copy(alpha = 0.95f)
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(12.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.Center
        ) {
            CompositionLocalProvider(
                LocalDensity provides Density(LocalDensity.current.density, 1f)
            ) {
                Text(
                    text = value,
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = color,
                    textAlign = TextAlign.Center,
                    maxLines = 1
                )
            }

            Spacer(modifier = Modifier.height(4.dp))

            Text(
                text = label,
                fontSize = 12.sp,
                fontWeight = FontWeight.Medium,
                color = Color(0xFF666666),
                textAlign = TextAlign.Center,
                maxLines = 1
            )
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ModernControlButton(
    icon: androidx.compose.ui.graphics.vector.ImageVector,
    backgroundColor: Color,
    contentDescription: String,
    modifier: Modifier = Modifier,
    onClick: (() -> Unit)? = null
) {
    if (onClick != null) {
        // onClickÏù¥ ÏûàÎäî Í≤ΩÏö∞ RunActivityÏôÄ ÎèôÏùºÌïú Î∞©Ïãù ÏÇ¨Ïö©
        Card(
            onClick = onClick,
            modifier = modifier.size(90.dp),
            shape = CircleShape,
            colors = CardDefaults.cardColors(
                containerColor = backgroundColor
            ),
            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
        ) {
            Box(
                contentAlignment = Alignment.Center,
                modifier = Modifier.fillMaxSize()
            ) {
                Icon(
                    imageVector = icon,
                    contentDescription = contentDescription,
                    tint = Color.White,
                    modifier = Modifier.size(45.dp)
                )
            }
        }
    } else {
        // onClickÏù¥ ÏóÜÎäî Í≤ΩÏö∞ (PreviewÏö©) Í∏∞Ï°¥ Î∞©Ïãù ÏÇ¨Ïö©
        Card(
            modifier = modifier.size(90.dp),
            shape = CircleShape,
            colors = CardDefaults.cardColors(
                containerColor = backgroundColor
            ),
            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
        ) {
            Box(
                contentAlignment = Alignment.Center,
                modifier = Modifier.fillMaxSize()
            ) {
                Icon(
                    imageVector = icon,
                    contentDescription = contentDescription,
                    tint = Color.White,
                    modifier = Modifier.size(45.dp)
                )
            }
        }
    }
}

// Í∏∞Î°ù Ï†ÄÏû• Ìï®Ïàò
private fun saveCompletedRecord(
    context: Context,
    startTime: Long,
    endTime: Long,
    targetDays: Float,
    actualDays: Int
) {
    try {
        Log.d("QuitActivity", "========== Í∏∞Î°ù Ï†ÄÏû• ÏãúÏûë ==========")
        Log.d("QuitActivity", "startTime: $startTime")
        Log.d("QuitActivity", "endTime: $endTime")
        Log.d("QuitActivity", "targetDays: $targetDays")
        Log.d("QuitActivity", "actualDays: $actualDays")

        val sharedPref = context.getSharedPreferences("user_settings", Context.MODE_PRIVATE)

        val recordId = System.currentTimeMillis().toString()
        Log.d("QuitActivity", "ÏÉùÏÑ±Îêú Í∏∞Î°ù ID: $recordId")

        // Î™©Ìëú Îã¨ÏÑ±Î•† Í≥ÑÏÇ∞
        val achievementRate = if (targetDays > 0) {
            (actualDays.toFloat() / targetDays) * 100
        } else {
            0f
        }

        // Î™©Ìëú Îã¨ÏÑ± Ïó¨Î∂Ä ÌôïÏù∏
        val isCompleted = achievementRate >= 100f
        val status = if (isCompleted) "ÏôÑÎ£å" else "Ï§ëÏßÄ"

        Log.d("QuitActivity", "Îã¨ÏÑ±Î•†: ${achievementRate}%, ÏôÑÎ£å Ïó¨Î∂Ä: $isCompleted, ÏÉÅÌÉú: $status")

        val record = JSONObject().apply {
            put("id", recordId)
            put("startTime", startTime)
            put("endTime", endTime)
            put("targetDays", targetDays.toInt()) // DoubleÏóêÏÑú IntÎ°ú Î≥ÄÍ≤Ω
            put("actualDays", actualDays)
            put("isCompleted", isCompleted)
            put("status", status)
            put("createdAt", System.currentTimeMillis())
        }

        Log.d("QuitActivity", "ÏÉùÏÑ±Îêú Í∏∞Î°ù JSON: $record")

        val recordsJson = sharedPref.getString("sobriety_records", "[]") ?: "[]"
        Log.d("QuitActivity", "Í∏∞Ï°¥ Í∏∞Î°ùÎì§: $recordsJson")

        val recordsList = try {
            JSONArray(recordsJson)
        } catch (e: Exception) {
            Log.w("QuitActivity", "Í∏∞Ï°¥ Í∏∞Î°ù ÌååÏã± Ïã§Ìå®, ÏÉàÎ°úÏö¥ Î∞∞Ïó¥ ÏÉùÏÑ±: ${e.message}")
            JSONArray()
        }

        recordsList.put(record)
        Log.d("QuitActivity", "Í∏∞Î°ù Ï∂îÍ∞Ä ÌõÑ Î∞∞Ïó¥: $recordsList")

        val finalJson = recordsList.toString()
        sharedPref.edit {
            putString("sobriety_records", finalJson)
        }

        // Ï†ÄÏû• ÌôïÏù∏
        val savedJson = sharedPref.getString("sobriety_records", "[]")
        Log.d("QuitActivity", "Ï†ÄÏû• ÌôïÏù∏ - Ï†ÄÏû•Îêú Îç∞Ïù¥ÌÑ∞: $savedJson")
        Log.d("QuitActivity", "========== Í∏∞Î°ù Ï†ÄÏû• ÏôÑÎ£å ==========")

        val message = "Í∏àÏ£º Í∏∞Î°ùÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§."
        Toast.makeText(context, message, Toast.LENGTH_SHORT).show()

    } catch (e: Exception) {
        Log.e("QuitActivity", "Í∏∞Î°ù Ï†ÄÏû• Ï§ë Ïò§Î•ò Î∞úÏÉù: ${e.message}", e)
        Toast.makeText(context, "Í∏∞Î°ù Ï†ÄÏû• Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.", Toast.LENGTH_SHORT).show()
    }
}

// Î†àÎ≤®Î™Ö Ìï®Ïàò
private fun getLevelName(days: Int): String {
    return LevelDefinitions.getLevelName(days)
}

// Preview Ìï®Ïàò Ï∂îÍ∞Ä
@Preview(showBackground = true)
@Composable
fun QuitScreenPreview() { QuitScreen() }
